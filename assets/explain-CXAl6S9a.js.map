{"version":3,"file":"explain-CXAl6S9a.js","sources":["../../panels/explain/PromptBuilder.js","../../panels/explain/components/consoleInsight.css.js","../../panels/explain/components/consoleInsightSourcesList.css.js","../../panels/explain/components/ConsoleInsight.js","../../panels/explain/ActionDelegate.js"],"sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Formatter from '../../models/formatter/formatter.js';\nimport * as Logs from '../../models/logs/logs.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nconst MAX_MESSAGE_SIZE = 1000;\nconst MAX_STACK_TRACE_SIZE = 1000;\nconst MAX_CODE_SIZE = 1000;\nconst MAX_HEADERS_SIZE = 1000;\nexport var SourceType;\n(function (SourceType) {\n    SourceType[\"MESSAGE\"] = \"message\";\n    SourceType[\"STACKTRACE\"] = \"stacktrace\";\n    SourceType[\"NETWORK_REQUEST\"] = \"networkRequest\";\n    SourceType[\"RELATED_CODE\"] = \"relatedCode\";\n})(SourceType || (SourceType = {}));\nexport class PromptBuilder {\n    #consoleMessage;\n    constructor(consoleMessage) {\n        this.#consoleMessage = consoleMessage;\n    }\n    async getNetworkRequest() {\n        const requestId = this.#consoleMessage.consoleMessage().getAffectedResources()?.requestId;\n        if (!requestId) {\n            return;\n        }\n        const log = Logs.NetworkLog.NetworkLog.instance();\n        // TODO: we might try handling redirect requests too later.\n        return log.requestsForId(requestId)[0];\n    }\n    /**\n     * Gets the source file associated with the top of the message's stacktrace.\n     * Returns an empty string if the source is not available for any reasons.\n     */\n    async getMessageSourceCode() {\n        const callframe = this.#consoleMessage.consoleMessage().stackTrace?.callFrames[0];\n        const runtimeModel = this.#consoleMessage.consoleMessage().runtimeModel();\n        const debuggerModel = runtimeModel?.debuggerModel();\n        if (!debuggerModel || !runtimeModel || !callframe) {\n            return { text: '', columnNumber: 0, lineNumber: 0 };\n        }\n        const rawLocation = new SDK.DebuggerModel.Location(debuggerModel, callframe.scriptId, callframe.lineNumber, callframe.columnNumber);\n        const mappedLocation = await Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().rawLocationToUILocation(rawLocation);\n        const content = await mappedLocation?.uiSourceCode.requestContent();\n        const text = !content?.isEncoded && content?.content ? content.content : '';\n        const firstNewline = text.indexOf('\\n');\n        if (text.length > MAX_CODE_SIZE && (firstNewline < 0 || firstNewline > MAX_CODE_SIZE)) {\n            // Use formatter\n            const { formattedContent, formattedMapping } = await Formatter.ScriptFormatter.formatScriptContent(mappedLocation?.uiSourceCode.mimeType() ?? 'text/javascript', text);\n            const [lineNumber, columnNumber] = formattedMapping.originalToFormatted(mappedLocation?.lineNumber ?? 0, mappedLocation?.columnNumber ?? 0);\n            return { text: formattedContent, columnNumber, lineNumber };\n        }\n        return { text, columnNumber: mappedLocation?.columnNumber ?? 0, lineNumber: mappedLocation?.lineNumber ?? 0 };\n    }\n    async buildPrompt(sourcesTypes = Object.values(SourceType)) {\n        const [sourceCode, request] = await Promise.all([\n            sourcesTypes.includes(SourceType.RELATED_CODE) ? this.getMessageSourceCode() : undefined,\n            sourcesTypes.includes(SourceType.NETWORK_REQUEST) ? this.getNetworkRequest() : undefined,\n        ]);\n        const relatedCode = sourceCode?.text ? formatRelatedCode(sourceCode) : '';\n        const relatedRequest = request ? formatNetworkRequest(request) : '';\n        const stacktrace = sourcesTypes.includes(SourceType.STACKTRACE) ? formatStackTrace(this.#consoleMessage) : '';\n        const message = formatConsoleMessage(this.#consoleMessage);\n        const prompt = this.formatPrompt({\n            message: [message, stacktrace].join('\\n').trim(),\n            relatedCode,\n            relatedRequest,\n        });\n        const sources = [\n            {\n                type: SourceType.MESSAGE,\n                value: message,\n            },\n        ];\n        if (stacktrace) {\n            sources.push({\n                type: SourceType.STACKTRACE,\n                value: stacktrace,\n            });\n        }\n        if (relatedCode) {\n            sources.push({\n                type: SourceType.RELATED_CODE,\n                value: relatedCode,\n            });\n        }\n        if (relatedRequest) {\n            sources.push({\n                type: SourceType.NETWORK_REQUEST,\n                value: relatedRequest,\n            });\n        }\n        return {\n            prompt,\n            sources,\n            isPageReloadRecommended: sourcesTypes.includes(SourceType.NETWORK_REQUEST) &&\n                Boolean(this.#consoleMessage.consoleMessage().getAffectedResources()?.requestId) && !relatedRequest,\n        };\n    }\n    formatPrompt({ message, relatedCode, relatedRequest }) {\n        let prompt = `Why does browser show an error\n${message}`;\n        if (relatedCode) {\n            prompt += `\nFor the following code in my web app\n\n\\`\\`\\`\n${relatedCode}\n\\`\\`\\``;\n        }\n        if (relatedRequest) {\n            prompt += `\nFor the following network request in my web app\n\n\\`\\`\\`\n${relatedRequest}\n\\`\\`\\``;\n        }\n        return prompt;\n    }\n    getSearchQuery() {\n        let message = this.#consoleMessage.toMessageTextString();\n        if (message) {\n            // If there are multiple lines, it is likely the rest of the message\n            // is a stack trace, which we don't want.\n            message = message.split('\\n')[0];\n        }\n        return message;\n    }\n}\nexport function allowHeader(header) {\n    const normalizedName = header.name.toLowerCase().trim();\n    // Skip custom headers.\n    if (normalizedName.startsWith('x-')) {\n        return false;\n    }\n    // Skip cookies as they might contain auth.\n    if (normalizedName === 'cookie' || normalizedName === 'set-cookie') {\n        return false;\n    }\n    if (normalizedName === 'authorization') {\n        return false;\n    }\n    return true;\n}\nexport function lineWhitespace(line) {\n    const matches = /^\\s*/.exec(line);\n    if (!matches || !matches.length) {\n        // This should not happen\n        return null;\n    }\n    const whitespace = matches[0];\n    if (whitespace === line) {\n        return null;\n    }\n    return whitespace;\n}\nexport function formatRelatedCode({ text, columnNumber, lineNumber }, maxCodeSize = MAX_CODE_SIZE) {\n    const lines = text.split('\\n');\n    if (lines[lineNumber].length >= maxCodeSize / 2) {\n        const start = Math.max(columnNumber - maxCodeSize / 2, 0);\n        const end = Math.min(columnNumber + maxCodeSize / 2, lines[lineNumber].length);\n        return lines[lineNumber].substring(start, end);\n    }\n    let relatedCodeSize = 0;\n    let currentLineNumber = lineNumber;\n    let currentWhitespace = lineWhitespace(lines[lineNumber]);\n    const startByPrefix = new Map();\n    while (lines[currentLineNumber] !== undefined &&\n        (relatedCodeSize + lines[currentLineNumber].length <= maxCodeSize / 2)) {\n        const whitespace = lineWhitespace(lines[currentLineNumber]);\n        if (whitespace !== null && currentWhitespace !== null &&\n            (whitespace === currentWhitespace || !whitespace.startsWith(currentWhitespace))) {\n            // Don't start on a line that begins with a closing character\n            if (!/^\\s*[\\}\\)\\]]/.exec(lines[currentLineNumber])) {\n                // Update map of where code should start based on its indentation\n                startByPrefix.set(whitespace, currentLineNumber);\n            }\n            currentWhitespace = whitespace;\n        }\n        relatedCodeSize += lines[currentLineNumber].length + 1;\n        currentLineNumber--;\n    }\n    currentLineNumber = lineNumber + 1;\n    let startLine = lineNumber;\n    let endLine = lineNumber;\n    currentWhitespace = lineWhitespace(lines[lineNumber]);\n    while (lines[currentLineNumber] !== undefined && (relatedCodeSize + lines[currentLineNumber].length <= maxCodeSize)) {\n        relatedCodeSize += lines[currentLineNumber].length;\n        const whitespace = lineWhitespace(lines[currentLineNumber]);\n        if (whitespace !== null && currentWhitespace !== null &&\n            (whitespace === currentWhitespace || !whitespace.startsWith(currentWhitespace))) {\n            // We shouldn't end on a line if it is followed by an indented line\n            const nextLine = lines[currentLineNumber + 1];\n            const nextWhitespace = nextLine ? lineWhitespace(nextLine) : null;\n            if (!nextWhitespace || nextWhitespace === whitespace || !nextWhitespace.startsWith(whitespace)) {\n                // Look up where code should start based on its indentation\n                if (startByPrefix.has(whitespace)) {\n                    startLine = startByPrefix.get(whitespace) ?? 0;\n                    endLine = currentLineNumber;\n                }\n            }\n            currentWhitespace = whitespace;\n        }\n        currentLineNumber++;\n    }\n    return lines.slice(startLine, endLine + 1).join('\\n');\n}\nfunction formatLines(title, lines, maxLength) {\n    let result = '';\n    for (const line of lines) {\n        if (result.length + line.length > maxLength) {\n            break;\n        }\n        result += line;\n    }\n    result = result.trim();\n    return result && title ? title + '\\n' + result : result;\n}\nexport function formatNetworkRequest(request) {\n    const formatHeaders = (title, headers) => formatLines(title, headers.filter(allowHeader).map(header => header.name + ': ' + header.value + '\\n'), MAX_HEADERS_SIZE);\n    // TODO: anything else that might be relavant?\n    // TODO: handle missing headers\n    return `Request: ${request.url()}\n\n${formatHeaders('Request headers:', request.requestHeaders())}\n\n${formatHeaders('Response headers:', request.responseHeaders)}\n\nResponse status: ${request.statusCode} ${request.statusText}`;\n}\nexport function formatConsoleMessage(message) {\n    return message.toMessageTextString().substr(0, MAX_MESSAGE_SIZE);\n}\n/**\n * This formats the stacktrace from the console message which might or might not\n * match the content of stacktrace(s) in the console message arguments.\n */\nexport function formatStackTrace(message) {\n    const previewContainer = message.contentElement().querySelector('.stack-preview-container');\n    if (!previewContainer) {\n        return '';\n    }\n    const preview = previewContainer.shadowRoot?.querySelector('.stack-preview-container');\n    const nodes = preview.childTextNodes();\n    // Gets application-level source mapped stack trace taking the ignore list\n    // into account.\n    const messageContent = nodes\n        .filter(n => {\n        return !n.parentElement?.closest('.show-all-link,.show-less-link,.hidden-row');\n    })\n        .map(Components.Linkifier.Linkifier.untruncatedNodeText);\n    return formatLines('', messageContent, MAX_STACK_TRACE_SIZE);\n}\n//# sourceMappingURL=PromptBuilder.js.map","// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(\n`/*\n * Copyright 2023 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\n:host {\n  font-family: var(--default-font-family);\n  font-size: inherit;\n  display: block;\n}\n\n.wrapper {\n  background-color: var(--sys-color-cdt-base-container);\n  border-radius: 16px;\n  /* stylelint-disable-next-line property-no-unknown */\n  container-type: inline-size;\n  display: grid;\n  animation: expand var(--sys-motion-duration-medium2) var(--sys-motion-easing-emphasized) forwards;\n}\n\n:host-context(.closing) .wrapper {\n  animation: collapse var(--sys-motion-duration-medium2) var(--sys-motion-easing-emphasized) forwards;\n}\n\n@keyframes expand {\n  from {\n    grid-template-rows: 0fr;\n  }\n\n  to {\n    grid-template-rows: 1fr;\n  }\n}\n\n@keyframes collapse {\n  from {\n    grid-template-rows: 1fr;\n  }\n\n  to {\n    grid-template-rows: 0fr;\n    padding-top: 0;\n    padding-bottom: 0;\n  }\n}\n\n.animation-wrapper {\n  overflow: hidden;\n  padding: var(--sys-size-6) var(--sys-size-8);\n}\n\n.wrapper.top {\n  border-radius: 16px 16px 4px 4px;\n}\n\n.wrapper.bottom {\n  margin-top: 5px;\n  border-radius: 4px 4px 16px 16px;\n}\n\nheader {\n  display: flex;\n  flex-direction: row;\n  gap: 6px;\n  color: var(--sys-color-on-surface);\n  font-size: 13px;\n  font-style: normal;\n  font-weight: 500;\n  margin-bottom: var(--sys-size-6);\n  align-items: center;\n}\n\nheader:focus-visible {\n  outline: none;\n}\n\nheader > .filler {\n  display: flex;\n  flex-direction: row;\n  gap: var(--sys-size-5);\n  align-items: center;\n  flex: 1;\n}\n\n.reminder-container {\n  border-radius: var(--sys-size-5);\n  background-color: var(--sys-color-surface4);\n  padding: var(--sys-size-8);\n  font-weight: var(--ref-typeface-weight-medium);\n\n  h3 {\n    font: inherit;\n  }\n}\n\n.reminder-items {\n  display: grid;\n  grid-template-columns: var(--sys-size-8) auto;\n  gap: var(--sys-size-5) var(--sys-size-6);\n  margin-top: var(--sys-size-6);\n  line-height: var(--sys-size-8);\n  font-weight: var(--ref-typeface-weight-regular);\n}\n\nmain {\n  --override-markdown-view-message-color: var(--sys-color-on-surface);\n\n  color: var(--sys-color-on-surface);\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 20px;\n\n  p {\n    margin-block-start: 1em;\n    margin-block-end: 1em;\n  }\n\n  ul {\n    list-style-type: none;\n    list-style-position: inside;\n    padding-inline-start: 0.2em;\n\n    li {\n      display: list-item;\n      list-style-type: disc;\n      list-style-position: outside;\n      margin-inline-start: 1em;\n    }\n\n    li::marker {\n      font-size: 11px;\n      line-height: 1;\n    }\n  }\n\n  label {\n    display: inline-flex;\n    flex-direction: row;\n    gap: 0.5em;\n\n    input,\n    span {\n      vertical-align: middle;\n    }\n\n    input[type=\"checkbox\"] {\n      margin-top: 0.3em;\n    }\n  }\n}\n\n.opt-in-teaser {\n  display: flex;\n  gap: var(--sys-size-5);\n}\n\ndevtools-markdown-view {\n  margin-bottom: 12px;\n}\n\nfooter {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  color: var(--sys-color-on-surface);\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  margin-top: 14px;\n  gap: 32px;\n}\n\n/* stylelint-disable-next-line at-rule-no-unknown */\n@container (max-width: 600px) {\n  footer {\n    gap: 8px;\n  }\n}\n\nfooter > .filler {\n  flex: 1;\n}\n\nfooter .rating {\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n}\n\ntextarea {\n  height: 84px;\n  padding: 10px;\n  border-radius: 8px;\n  border: 1px solid var(--sys-color-neutral-outline);\n  width: 100%;\n  font-family: var(--default-font-family);\n  font-size: inherit;\n}\n\n.buttons {\n  display: flex;\n  gap: 5px;\n}\n\n@media (max-width: 500px) {\n  .buttons {\n    flex-wrap: wrap;\n  }\n}\n\nmain .buttons {\n  margin-top: 12px;\n}\n\n.disclaimer {\n  display: flex;\n  gap: 2px;\n  color: var(--sys-color-on-surface-subtle);\n  font-size: 11px;\n  align-items: flex-start;\n  flex-direction: column;\n}\n\n.link {\n  color: var(--sys-color-primary);\n  text-decoration-line: underline;\n\n  devtools-icon {\n    color: var(--sys-color-primary);\n    width: 14px;\n    height: 14px;\n  }\n}\n\nbutton.link {\n  border: none;\n  background: none;\n  cursor: pointer;\n  font: inherit;\n}\n\n.loader {\n  background:\n    linear-gradient(\n      130deg,\n      transparent 0%,\n      var(--sys-color-gradient-tertiary) 20%,\n      var(--sys-color-gradient-primary) 40%,\n      transparent 60%,\n      var(--sys-color-gradient-tertiary) 80%,\n      var(--sys-color-gradient-primary) 100%\n    );\n  background-position: 0% 0%;\n  background-size: 250% 250%;\n  animation: gradient 5s infinite linear;\n}\n\n@keyframes gradient {\n  0% { background-position: 0 0; }\n  100% { background-position: 100% 100%; }\n}\n\nsummary {\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 20px;\n}\n\ndetails {\n  --collapsed-height: 20px;\n\n  overflow: hidden;\n  height: var(--collapsed-height);\n  margin-top: 10px;\n}\n\ndetails[open] {\n  height: calc(var(--list-height) + var(--collapsed-height) + /* margin */ 8px);\n  transition: height var(--sys-motion-duration-short4) var(--sys-motion-easing-emphasized);\n}\n\nh2 {\n  display: block;\n  font-size: var(--sys-size-7);\n  margin: 0;\n  font-weight: var(--ref-typeface-weight-medium);\n  line-height: var(--sys-size-9);\n}\n\nh2:focus-visible {\n  outline: none;\n}\n\n.info {\n  width: 20px;\n  height: 20px;\n}\n\n.badge {\n  background: linear-gradient(135deg, var(--sys-color-gradient-primary), var(--sys-color-gradient-tertiary));\n  border-radius: var(--sys-size-3);\n  height: var(--sys-size-9);\n\n  devtools-icon {\n    margin: var(--sys-size-2);\n  }\n}\n\n.header-icon-container {\n  background: linear-gradient(135deg, var(--sys-color-gradient-primary), var(--sys-color-gradient-tertiary));\n  border-radius: var(--sys-size-4);\n  height: 36px;\n  width: 36px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.close-button {\n  align-self: flex-start;\n}\n\n/*# sourceURL=./components/consoleInsight.css */\n`);\n\nexport default styles;\n","// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(\n`/*\n * Copyright 2023 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\n:host {\n  display: block;\n}\n\nul {\n  color: var(--sys-color-primary);\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 18px;\n  margin-top: 8px;\n}\n\nli {\n  list-style-type: none;\n}\n\nul .link {\n  color: var(--sys-color-primary);\n  display: inline-flex !important; /* stylelint-disable-line declaration-no-important */\n  align-items: center;\n  gap: 4px;\n  text-decoration-line: underline;\n}\n\ndevtools-icon {\n  height: 16px;\n  width: 16px;\n}\n\ndevtools-icon[name=\"open-externally\"] {\n  color: var(--icon-link);\n}\n\n.source-disclaimer {\n  color: var(--sys-color-on-surface-subtle);\n}\n\n/*# sourceURL=./components/consoleInsightSourcesList.css */\n`);\n\nexport default styles;\n","// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport '../../../ui/components/spinners/spinners.js';\nimport * as Common from '../../../core/common/common.js';\nimport * as Host from '../../../core/host/host.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport * as Marked from '../../../third_party/marked/marked.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as Input from '../../../ui/components/input/input.js';\nimport * as MarkdownView from '../../../ui/components/markdown_view/markdown_view.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\nimport { SourceType } from '../PromptBuilder.js';\nimport styles from './consoleInsight.css.js';\nimport listStyles from './consoleInsightSourcesList.css.js';\n// Note: privacy and legal notices are not localized so far.\nconst UIStrings = {\n    /**\n     * @description The title of the insight source \"Console message\".\n     */\n    consoleMessage: 'Console message',\n    /**\n     * @description The title of the insight source \"Stacktrace\".\n     */\n    stackTrace: 'Stacktrace',\n    /**\n     * @description The title of the insight source \"Network request\".\n     */\n    networkRequest: 'Network request',\n    /**\n     * @description The title of the insight source \"Related code\".\n     */\n    relatedCode: 'Related code',\n    /**\n     * @description The title that is shown while the insight is being generated.\n     */\n    generating: 'Generating explanation…',\n    /**\n     * @description The header that indicates that the content shown is a console\n     * insight.\n     */\n    insight: 'Explanation',\n    /**\n     * @description The title of the a button that closes the insight pane.\n     */\n    closeInsight: 'Close explanation',\n    /**\n     * @description The title of the list of source data that was used to generate the insight.\n     */\n    inputData: 'Data used to understand this message',\n    /**\n     * @description The title of the button that allows submitting positive\n     * feedback about the console insight.\n     */\n    goodResponse: 'Good response',\n    /**\n     * @description The title of the button that allows submitting negative\n     * feedback about the console insight.\n     */\n    badResponse: 'Bad response',\n    /**\n     * @description The title of the button that opens a page to report a legal\n     * issue with the console insight.\n     */\n    report: 'Report legal issue',\n    /**\n     * @description The text of the header inside the console insight pane when there was an error generating an insight.\n     */\n    error: 'DevTools has encountered an error',\n    /**\n     * @description The message shown when an error has been encountered.\n     */\n    errorBody: 'Something went wrong. Try again.',\n    /**\n     * @description Label for screenreaders that is added to the end of the link\n     * title to indicate that the link will be opened in a new tab.\n     */\n    opensInNewTab: '(opens in a new tab)',\n    /**\n     * @description The title of a link that allows the user to learn more about\n     * the feature.\n     */\n    learnMore: 'Learn more',\n    /**\n     * @description The error message when the user is not logged in into Chrome.\n     */\n    notLoggedIn: 'This feature is only available when you sign into Chrome with your Google account.',\n    /**\n     * @description The title of the button that opens Chrome settings.\n     */\n    updateSettings: 'Update Settings',\n    /**\n     * @description The header shown when the internet connection is not\n     * available.\n     */\n    offlineHeader: 'DevTools can’t reach the internet',\n    /**\n     * @description Message shown when the user is offline.\n     */\n    offline: 'Check your internet connection and try again.',\n    /**\n     * @description The message shown if the user is not logged in.\n     */\n    signInToUse: 'Sign in to use this feature',\n    /**\n     * @description The title of the button that searches for the console\n     * insight using a search engine instead of using console insights.\n     */\n    search: 'Use search instead',\n    /**\n     * @description Shown to the user when the network request data is not\n     * available and a page reload might populate it.\n     */\n    reloadRecommendation: 'Reload the page to capture related network request data for this message in order to create a better insight.',\n    /**\n     * @description Shown to the user when they need to enable the console insights feature in settings in order to use it.\n     * @example {Console insights in Settings} PH1\n     */\n    turnOnInSettings: 'Turn on {PH1} to receive AI assistance for understanding and addressing console warnings and errors.',\n    /**\n     * @description Text for a link to Chrome DevTools Settings.\n     */\n    settingsLink: '`Console insights` in Settings',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/explain/components/ConsoleInsight.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst { render, html, Directives } = LitHtml;\nexport class CloseEvent extends Event {\n    static eventName = 'close';\n    constructor() {\n        super(CloseEvent.eventName, { composed: true, bubbles: true });\n    }\n}\nfunction localizeType(sourceType) {\n    switch (sourceType) {\n        case SourceType.MESSAGE:\n            return i18nString(UIStrings.consoleMessage);\n        case SourceType.STACKTRACE:\n            return i18nString(UIStrings.stackTrace);\n        case SourceType.NETWORK_REQUEST:\n            return i18nString(UIStrings.networkRequest);\n        case SourceType.RELATED_CODE:\n            return i18nString(UIStrings.relatedCode);\n    }\n}\nconst TERMS_OF_SERVICE_URL = 'https://policies.google.com/terms';\nconst PRIVACY_POLICY_URL = 'https://policies.google.com/privacy';\nconst CODE_SNIPPET_WARNING_URL = 'https://support.google.com/legal/answer/13505487';\nconst LEARNMORE_URL = 'https://goo.gle/devtools-console-messages-ai';\nconst REPORT_URL = 'https://support.google.com/legal/troubleshooter/1114905?hl=en#ts=1115658%2C13380504';\nconst CHROME_SETTINGS_URL = 'chrome://settings';\nexport class ConsoleInsight extends HTMLElement {\n    static async create(promptBuilder, aidaClient) {\n        const aidaAvailability = await Host.AidaClient.AidaClient.checkAccessPreconditions();\n        return new ConsoleInsight(promptBuilder, aidaClient, aidaAvailability);\n    }\n    #shadow = this.attachShadow({ mode: 'open' });\n    #promptBuilder;\n    #aidaClient;\n    #renderer = new MarkdownView.MarkdownView.MarkdownInsightRenderer();\n    // Main state.\n    #state;\n    // Rating sub-form state.\n    #selectedRating;\n    #consoleInsightsEnabledSetting;\n    #aidaAvailability;\n    #boundOnAidaAvailabilityChange;\n    constructor(promptBuilder, aidaClient, aidaAvailability) {\n        super();\n        this.#promptBuilder = promptBuilder;\n        this.#aidaClient = aidaClient;\n        this.#aidaAvailability = aidaAvailability;\n        this.#consoleInsightsEnabledSetting = this.#getConsoleInsightsEnabledSetting();\n        this.#state = this.#getStateFromAidaAvailability();\n        this.#boundOnAidaAvailabilityChange = this.#onAidaAvailabilityChange.bind(this);\n        this.#render();\n        // Stop keyboard event propagation to avoid Console acting on the events\n        // inside the insight component.\n        this.addEventListener('keydown', e => {\n            e.stopPropagation();\n        });\n        this.addEventListener('keyup', e => {\n            e.stopPropagation();\n        });\n        this.addEventListener('keypress', e => {\n            e.stopPropagation();\n        });\n        this.addEventListener('click', e => {\n            e.stopPropagation();\n        });\n        this.focus();\n    }\n    #getStateFromAidaAvailability() {\n        switch (this.#aidaAvailability) {\n            case \"available\" /* Host.AidaClient.AidaAccessPreconditions.AVAILABLE */: {\n                // Allows skipping the consent reminder if the user enabled the feature via settings in the current session\n                const skipReminder = Common.Settings.Settings.instance()\n                    .createSetting('console-insights-skip-reminder', false, \"Session\" /* Common.Settings.SettingStorageType.SESSION */)\n                    .get();\n                return {\n                    type: \"loading\" /* State.LOADING */,\n                    consentOnboardingCompleted: this.#getOnboardingCompletedSetting().get() || skipReminder,\n                };\n            }\n            case \"no-account-email\" /* Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL */:\n                return {\n                    type: \"not-logged-in\" /* State.NOT_LOGGED_IN */,\n                };\n            case \"sync-is-paused\" /* Host.AidaClient.AidaAccessPreconditions.SYNC_IS_PAUSED */:\n                return {\n                    type: \"sync-is-paused\" /* State.SYNC_IS_PAUSED */,\n                };\n            case \"no-internet\" /* Host.AidaClient.AidaAccessPreconditions.NO_INTERNET */:\n                return {\n                    type: \"offline\" /* State.OFFLINE */,\n                };\n        }\n    }\n    // off -> entrypoints are shown, and point to the AI setting panel where the setting can be turned on\n    // on -> entrypoints are shown, and console insights can be generated\n    #getConsoleInsightsEnabledSetting() {\n        try {\n            return Common.Settings.moduleSetting('console-insights-enabled');\n        }\n        catch {\n            return;\n        }\n    }\n    // off -> consent reminder is shown, unless the 'console-insights-enabled'-setting has been enabled in the current DevTools session\n    // on -> no consent reminder shown\n    #getOnboardingCompletedSetting() {\n        return Common.Settings.Settings.instance().createLocalSetting('console-insights-onboarding-finished', false);\n    }\n    connectedCallback() {\n        this.#shadow.adoptedStyleSheets = [styles, Input.checkboxStyles];\n        this.classList.add('opening');\n        this.#consoleInsightsEnabledSetting?.addChangeListener(this.#onConsoleInsightsSettingChanged, this);\n        const blockedByAge = Common.Settings.Settings.instance().getHostConfig().aidaAvailability?.blockedByAge === true;\n        if (this.#state.type === \"loading\" /* State.LOADING */ && this.#consoleInsightsEnabledSetting?.getIfNotDisabled() === true &&\n            !blockedByAge && this.#state.consentOnboardingCompleted) {\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.GeneratingInsightWithoutDisclaimer);\n        }\n        Host.AidaClient.HostConfigTracker.instance().addEventListener(\"aidaAvailabilityChanged\" /* Host.AidaClient.Events.AIDA_AVAILABILITY_CHANGED */, this.#boundOnAidaAvailabilityChange);\n        // If AIDA availability has changed while the component was disconnected, we need to update.\n        void this.#onAidaAvailabilityChange();\n        // The setting might have been turned on/off while the component was disconnected.\n        // Update the state, unless the current state is already terminal (`INSIGHT` or `ERROR`).\n        if (this.#state.type !== \"insight\" /* State.INSIGHT */ && this.#state.type !== \"error\" /* State.ERROR */) {\n            this.#state = this.#getStateFromAidaAvailability();\n        }\n        void this.#generateInsightIfNeeded();\n    }\n    disconnectedCallback() {\n        this.#consoleInsightsEnabledSetting?.removeChangeListener(this.#onConsoleInsightsSettingChanged, this);\n        Host.AidaClient.HostConfigTracker.instance().removeEventListener(\"aidaAvailabilityChanged\" /* Host.AidaClient.Events.AIDA_AVAILABILITY_CHANGED */, this.#boundOnAidaAvailabilityChange);\n    }\n    async #onAidaAvailabilityChange() {\n        const currentAidaAvailability = await Host.AidaClient.AidaClient.checkAccessPreconditions();\n        if (currentAidaAvailability !== this.#aidaAvailability) {\n            this.#aidaAvailability = currentAidaAvailability;\n            this.#state = this.#getStateFromAidaAvailability();\n            void this.#generateInsightIfNeeded();\n        }\n    }\n    #onConsoleInsightsSettingChanged() {\n        if (this.#consoleInsightsEnabledSetting?.getIfNotDisabled() === true) {\n            this.#getOnboardingCompletedSetting().set(true);\n        }\n        if (this.#state.type === \"setting-is-not-true\" /* State.SETTING_IS_NOT_TRUE */ &&\n            this.#consoleInsightsEnabledSetting?.getIfNotDisabled() === true) {\n            this.#transitionTo({\n                type: \"loading\" /* State.LOADING */,\n                consentOnboardingCompleted: true,\n            });\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightsOptInTeaserConfirmedInSettings);\n            void this.#generateInsightIfNeeded();\n        }\n        if (this.#state.type === \"consent-reminder\" /* State.CONSENT_REMINDER */ &&\n            this.#consoleInsightsEnabledSetting?.getIfNotDisabled() === false) {\n            this.#transitionTo({\n                type: \"loading\" /* State.LOADING */,\n                consentOnboardingCompleted: false,\n            });\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightsReminderTeaserAbortedInSettings);\n            void this.#generateInsightIfNeeded();\n        }\n    }\n    #transitionTo(newState) {\n        const previousState = this.#state;\n        this.#state = newState;\n        this.#render();\n        if (newState.type !== previousState.type) {\n            this.#focusHeader();\n        }\n    }\n    async #generateInsightIfNeeded() {\n        if (this.#state.type !== \"loading\" /* State.LOADING */) {\n            return;\n        }\n        const blockedByAge = Common.Settings.Settings.instance().getHostConfig().aidaAvailability?.blockedByAge === true;\n        if (this.#consoleInsightsEnabledSetting?.getIfNotDisabled() !== true || blockedByAge) {\n            this.#transitionTo({\n                type: \"setting-is-not-true\" /* State.SETTING_IS_NOT_TRUE */,\n            });\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightsOptInTeaserShown);\n            return;\n        }\n        if (!this.#state.consentOnboardingCompleted) {\n            const { sources, isPageReloadRecommended } = await this.#promptBuilder.buildPrompt();\n            this.#transitionTo({\n                type: \"consent-reminder\" /* State.CONSENT_REMINDER */,\n                sources,\n                isPageReloadRecommended,\n            });\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightsReminderTeaserShown);\n            return;\n        }\n        await this.#generateInsight();\n    }\n    #onClose() {\n        if (this.#state.type === \"consent-reminder\" /* State.CONSENT_REMINDER */) {\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightsReminderTeaserCanceled);\n        }\n        this.shadowRoot?.addEventListener('animationend', () => {\n            this.dispatchEvent(new CloseEvent());\n        }, { once: true });\n        this.classList.add('closing');\n    }\n    #onRating(event) {\n        if (this.#state.type !== \"insight\" /* State.INSIGHT */) {\n            throw new Error('Unexpected state');\n        }\n        if (this.#state.metadata?.rpcGlobalId === undefined) {\n            throw new Error('RPC Id not in metadata');\n        }\n        // If it was rated, do not record again.\n        if (this.#selectedRating !== undefined) {\n            return;\n        }\n        this.#selectedRating = event.target.dataset.rating === 'true';\n        this.#render();\n        if (this.#selectedRating) {\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightRatedPositive);\n        }\n        else {\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightRatedNegative);\n        }\n        const disallowLogging = Common.Settings.Settings.instance().getHostConfig().aidaAvailability?.disallowLogging ?? true;\n        void this.#aidaClient.registerClientEvent({\n            corresponding_aida_rpc_global_id: this.#state.metadata.rpcGlobalId,\n            disable_user_content_logging: disallowLogging,\n            do_conversation_client_event: {\n                user_feedback: {\n                    sentiment: this.#selectedRating ? \"POSITIVE\" /* Host.AidaClient.Rating.POSITIVE */ : \"NEGATIVE\" /* Host.AidaClient.Rating.NEGATIVE */,\n                },\n            },\n        });\n    }\n    #onReport() {\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(REPORT_URL);\n    }\n    #onSearch() {\n        const query = this.#promptBuilder.getSearchQuery();\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.openSearchResultsInNewTab(query);\n    }\n    async #onConsentReminderConfirmed() {\n        this.#getOnboardingCompletedSetting().set(true);\n        this.#transitionTo({\n            type: \"loading\" /* State.LOADING */,\n            consentOnboardingCompleted: true,\n        });\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightsReminderTeaserConfirmed);\n        await this.#generateInsight();\n    }\n    async #generateInsight() {\n        try {\n            for await (const { sources, isPageReloadRecommended, explanation, metadata, completed } of this.#getInsight()) {\n                const tokens = this.#validateMarkdown(explanation);\n                const valid = tokens !== false;\n                this.#transitionTo({\n                    type: \"insight\" /* State.INSIGHT */,\n                    tokens: valid ? tokens : [],\n                    validMarkdown: valid,\n                    explanation,\n                    sources,\n                    metadata,\n                    isPageReloadRecommended,\n                    completed,\n                });\n            }\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightGenerated);\n        }\n        catch (err) {\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErrored);\n            this.#transitionTo({\n                type: \"error\" /* State.ERROR */,\n                error: err.message,\n            });\n        }\n    }\n    /**\n     * Validates the markdown by trying to render it.\n     */\n    #validateMarkdown(text) {\n        try {\n            const tokens = Marked.Marked.lexer(text);\n            for (const token of tokens) {\n                this.#renderer.renderToken(token);\n            }\n            return tokens;\n        }\n        catch {\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErroredMarkdown);\n            return false;\n        }\n    }\n    async *#getInsight() {\n        const { prompt, sources, isPageReloadRecommended } = await this.#promptBuilder.buildPrompt();\n        try {\n            for await (const response of this.#aidaClient.fetch(Host.AidaClient.AidaClient.buildConsoleInsightsRequest(prompt))) {\n                yield { sources, isPageReloadRecommended, ...response };\n            }\n        }\n        catch (err) {\n            if (err.message === 'Server responded: permission denied') {\n                Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErroredPermissionDenied);\n            }\n            else if (err.message.startsWith('Cannot send request:')) {\n                Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErroredCannotSend);\n            }\n            else if (err.message.startsWith('Request failed:')) {\n                Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErroredRequestFailed);\n            }\n            else if (err.message.startsWith('Cannot parse chunk:')) {\n                Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErroredCannotParseChunk);\n            }\n            else if (err.message === 'Unknown chunk result') {\n                Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErroredUnknownChunk);\n            }\n            else if (err.message.startsWith('Server responded:')) {\n                Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErroredApi);\n            }\n            else {\n                Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErroredOther);\n            }\n            throw err;\n        }\n    }\n    #onGoToChromeSettings() {\n        const rootTarget = SDK.TargetManager.TargetManager.instance().rootTarget();\n        if (rootTarget === null) {\n            return;\n        }\n        const url = CHROME_SETTINGS_URL;\n        void rootTarget.targetAgent().invoke_createTarget({ url }).then(result => {\n            if (result.getError()) {\n                Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(url);\n            }\n        });\n    }\n    #focusHeader() {\n        this.addEventListener('animationend', () => {\n            this.#shadow.querySelector('header h2')?.focus();\n        }, { once: true });\n    }\n    #renderSearchButton() {\n        // clang-format off\n        return html `<devtools-button\n      @click=${this.#onSearch}\n      class=\"search-button\"\n      .data=${{\n            variant: \"outlined\" /* Buttons.Button.Variant.OUTLINED */,\n            jslogContext: 'search',\n        }}\n    >\n      ${i18nString(UIStrings.search)}\n    </devtools-button>`;\n        // clang-format on\n    }\n    #renderLearnMoreAboutInsights() {\n        // clang-format off\n        return html `<x-link href=${LEARNMORE_URL} class=\"link\" jslog=${VisualLogging.link('learn-more').track({ click: true })}>\n      ${i18nString(UIStrings.learnMore)}\n    </x-link>`;\n        // clang-format on\n    }\n    #renderMain() {\n        const jslog = `${VisualLogging.section(this.#state.type).track({ resize: true })}`;\n        // clang-format off\n        switch (this.#state.type) {\n            case \"loading\" /* State.LOADING */:\n                return html `<main jslog=${jslog}>\n            <div role=\"presentation\" aria-label=\"Loading\" class=\"loader\" style=\"clip-path: url('#clipPath');\">\n              <svg width=\"100%\" height=\"64\">\n                <clipPath id=\"clipPath\">\n                  <rect x=\"0\" y=\"0\" width=\"100%\" height=\"16\" rx=\"8\"></rect>\n                  <rect x=\"0\" y=\"24\" width=\"100%\" height=\"16\" rx=\"8\"></rect>\n                  <rect x=\"0\" y=\"48\" width=\"100%\" height=\"16\" rx=\"8\"></rect>\n                </clipPath>\n              </svg>\n            </div>\n          </main>`;\n            case \"insight\" /* State.INSIGHT */:\n                return html `\n        <main jslog=${jslog}>\n          ${this.#state.validMarkdown ? html `<devtools-markdown-view\n              .data=${{ tokens: this.#state.tokens, renderer: this.#renderer }}>\n            </devtools-markdown-view>` : this.#state.explanation}\n          <details style=\"--list-height: ${(this.#state.sources.length + (this.#state.isPageReloadRecommended ? 1 : 0)) * 20}px;\" jslog=${VisualLogging.expand('sources').track({ click: true })}>\n            <summary>${i18nString(UIStrings.inputData)}</summary>\n            <devtools-console-insight-sources-list .sources=${this.#state.sources} .isPageReloadRecommended=${this.#state.isPageReloadRecommended}>\n            </devtools-console-insight-sources-list>\n          </details>\n          <div class=\"buttons\">\n            ${this.#renderSearchButton()}\n          </div>\n        </main>`;\n            case \"error\" /* State.ERROR */:\n                return html `\n        <main jslog=${jslog}>\n          <div class=\"error\">${i18nString(UIStrings.errorBody)}</div>\n        </main>`;\n            case \"consent-reminder\" /* State.CONSENT_REMINDER */:\n                return html `\n          <main class=\"reminder-container\" jslog=${jslog}>\n            <h3>Things to consider</h3>\n            <div class=\"reminder-items\">\n              <div>\n                <devtools-icon .data=${{\n                    iconName: 'google',\n                    width: 'var(--sys-size-8)',\n                    height: 'var(--sys-size-8)',\n                }}>\n                </devtools-icon>\n              </div>\n              <div>The console message, associated stack trace, related source code, and the associated network headers are sent to Google to generate explanations. This data may be seen by human reviewers to improve this feature. Avoid sharing sensitive or personal information.</div>\n              <div>\n                <devtools-icon .data=${{\n                    iconName: 'policy',\n                    width: 'var(--sys-size-8)',\n                    height: 'var(--sys-size-8)',\n                }}>\n                </devtools-icon>\n              </div>\n              <div>Use of this feature is subject to the\n                <x-link\n                  href=${TERMS_OF_SERVICE_URL}\n                  class=\"link\"\n                  jslog=${VisualLogging.link('terms-of-service.console-insights').track({ click: true })}\n                >Google Terms of Service</x-link>\n                and\n                <x-link\n                  href=${PRIVACY_POLICY_URL}\n                  class=\"link\"\n                  jslog=${VisualLogging.link('privacy-policy.console-insights').track({ click: true })}\n                >Google Privacy Policy</x-link>\n              </div>\n              <div>\n                <devtools-icon .data=${{\n                    iconName: 'warning',\n                    width: 'var(--sys-size-8)',\n                    height: 'var(--sys-size-8)',\n                }}>\n                </devtools-icon>\n              </div>\n              <div>\n                <x-link\n                  href=${CODE_SNIPPET_WARNING_URL}\n                  class=\"link\"\n                  jslog=${VisualLogging.link('code-snippets-explainer.console-insights').track({ click: true })}\n                >Use generated code snippets with caution</x-link>\n              </div>\n            </div>\n          </main>\n        `;\n            case \"setting-is-not-true\" /* State.SETTING_IS_NOT_TRUE */: {\n                const settingsLink = document.createElement('button');\n                settingsLink.textContent = i18nString(UIStrings.settingsLink);\n                settingsLink.classList.add('link');\n                UI.ARIAUtils.markAsLink(settingsLink);\n                settingsLink.addEventListener('click', () => {\n                    Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightsOptInTeaserSettingsLinkClicked);\n                    void UI.ViewManager.ViewManager.instance().showView('chrome-ai');\n                });\n                settingsLink.setAttribute('jslog', `${VisualLogging.action('open-ai-settings').track({ click: true })}`);\n                return html `<main class=\"opt-in-teaser\" jslog=${jslog}>\n          <div class=\"badge\">\n            <devtools-icon .data=${{\n                    iconName: 'lightbulb-spark',\n                    width: 'var(--sys-size-8)',\n                    height: 'var(--sys-size-8)',\n                }}>\n            </devtools-icon>\n          </div>\n          <div>\n            ${i18n.i18n.getFormatLocalizedString(str_, UIStrings.turnOnInSettings, { PH1: settingsLink })}\n            ${this.#renderLearnMoreAboutInsights()}\n          </div>\n        </main>`;\n            }\n            case \"not-logged-in\" /* State.NOT_LOGGED_IN */:\n            case \"sync-is-paused\" /* State.SYNC_IS_PAUSED */:\n                return html `\n          <main jslog=${jslog}>\n            <div class=\"error\">${i18nString(UIStrings.notLoggedIn)}</div>\n          </main>`;\n            case \"offline\" /* State.OFFLINE */:\n                return html `\n          <main jslog=${jslog}>\n            <div class=\"error\">${i18nString(UIStrings.offline)}</div>\n          </main>`;\n        }\n        // clang-format on\n    }\n    #renderDisclaimer() {\n        // clang-format off\n        return html `<span>\n      AI tools may generate inaccurate info that doesn't represent Google's views. Data sent to Google may be seen by human reviewers to improve this feature.\n      <button class=\"link\" role=\"link\" @click=${() => UI.ViewManager.ViewManager.instance().showView('chrome-ai')}\n        jslog=${VisualLogging.action('open-ai-settings').track({ click: true })}\n      >Open settings</button>\n      or\n      <x-link href=${LEARNMORE_URL} class=\"link\" jslog=${VisualLogging.link('learn-more').track({ click: true })}>learn more</x-link>\n    </span>`;\n        // clang-format on\n    }\n    #renderFooter() {\n        const showThumbsUpDownButtons = !(Common.Settings.Settings.instance().getHostConfig().aidaAvailability?.disallowLogging ?? true);\n        const disclaimer = this.#renderDisclaimer();\n        // clang-format off\n        switch (this.#state.type) {\n            case \"loading\" /* State.LOADING */:\n            case \"setting-is-not-true\" /* State.SETTING_IS_NOT_TRUE */:\n                return LitHtml.nothing;\n            case \"error\" /* State.ERROR */:\n            case \"offline\" /* State.OFFLINE */:\n                return html `<footer jslog=${VisualLogging.section('footer')}>\n          <div class=\"disclaimer\">\n            ${disclaimer}\n          </div>\n        </footer>`;\n            case \"not-logged-in\" /* State.NOT_LOGGED_IN */:\n            case \"sync-is-paused\" /* State.SYNC_IS_PAUSED */:\n                return html `<footer jslog=${VisualLogging.section('footer')}>\n        <div class=\"filler\"></div>\n        <div>\n          <devtools-button\n            @click=${this.#onGoToChromeSettings}\n            .data=${{\n                    variant: \"primary\" /* Buttons.Button.Variant.PRIMARY */,\n                    jslogContext: 'update-settings',\n                }}\n          >\n            ${UIStrings.updateSettings}\n          </devtools-button>\n        </div>\n      </footer>`;\n            case \"consent-reminder\" /* State.CONSENT_REMINDER */:\n                return html `<footer jslog=${VisualLogging.section('footer')}>\n          <div class=\"filler\"></div>\n          <div class=\"buttons\">\n            <devtools-button\n              @click=${() => {\n                    Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightsReminderTeaserSettingsLinkClicked);\n                    void UI.ViewManager.ViewManager.instance().showView('chrome-ai');\n                }}\n              .data=${{\n                    variant: \"tonal\" /* Buttons.Button.Variant.TONAL */,\n                    jslogContext: 'settings',\n                    title: 'Settings',\n                }}\n            >\n              Settings\n            </devtools-button>\n            <devtools-button\n              class='continue-button'\n              @click=${this.#onConsentReminderConfirmed}\n              .data=${{\n                    variant: \"primary\" /* Buttons.Button.Variant.PRIMARY */,\n                    jslogContext: 'continue',\n                    title: 'continue',\n                }}\n              >\n              Continue\n            </devtools-button>\n          </div>\n        </footer>`;\n            case \"insight\" /* State.INSIGHT */:\n                return html `<footer jslog=${VisualLogging.section('footer')}>\n        <div class=\"disclaimer\">\n          ${disclaimer}\n        </div>\n        <div class=\"filler\"></div>\n        <div class=\"rating\">\n          ${showThumbsUpDownButtons ? html `\n            <devtools-button\n              data-rating=${'true'}\n              .data=${{\n                    variant: \"icon\" /* Buttons.Button.Variant.ICON */,\n                    size: \"SMALL\" /* Buttons.Button.Size.SMALL */,\n                    iconName: 'thumb-up',\n                    active: this.#selectedRating !== undefined && this.#selectedRating,\n                    title: i18nString(UIStrings.goodResponse),\n                    jslogContext: 'thumbs-up',\n                }}\n              @click=${this.#onRating}\n            ></devtools-button>\n            <devtools-button\n              data-rating=${'false'}\n              .data=${{\n                    variant: \"icon\" /* Buttons.Button.Variant.ICON */,\n                    size: \"SMALL\" /* Buttons.Button.Size.SMALL */,\n                    iconName: 'thumb-down',\n                    active: this.#selectedRating !== undefined && !this.#selectedRating,\n                    title: i18nString(UIStrings.badResponse),\n                    jslogContext: 'thumbs-down',\n                }}\n              @click=${this.#onRating}\n            ></devtools-button>\n          ` : LitHtml.nothing}\n          <devtools-button\n            .data=${{\n                    variant: \"icon\" /* Buttons.Button.Variant.ICON */,\n                    size: \"SMALL\" /* Buttons.Button.Size.SMALL */,\n                    iconName: 'report',\n                    title: i18nString(UIStrings.report),\n                    jslogContext: 'report',\n                }}\n            @click=${this.#onReport}\n          ></devtools-button>\n        </div>\n\n      </footer>`;\n        }\n        // clang-format on\n    }\n    #getHeader() {\n        switch (this.#state.type) {\n            case \"not-logged-in\" /* State.NOT_LOGGED_IN */:\n            case \"sync-is-paused\" /* State.SYNC_IS_PAUSED */:\n                return i18nString(UIStrings.signInToUse);\n            case \"offline\" /* State.OFFLINE */:\n                return i18nString(UIStrings.offlineHeader);\n            case \"loading\" /* State.LOADING */:\n                return i18nString(UIStrings.generating);\n            case \"insight\" /* State.INSIGHT */:\n                return i18nString(UIStrings.insight);\n            case \"error\" /* State.ERROR */:\n                return i18nString(UIStrings.error);\n            case \"consent-reminder\" /* State.CONSENT_REMINDER */:\n                return 'Understand console messages with AI';\n            case \"setting-is-not-true\" /* State.SETTING_IS_NOT_TRUE */:\n                return ''; // not reached\n        }\n    }\n    #renderSpinner() {\n        // clang-format off\n        if (this.#state.type === \"insight\" /* State.INSIGHT */ && !this.#state.completed) {\n            return html `<devtools-spinner></devtools-spinner>`;\n        }\n        return LitHtml.nothing;\n        // clang-format on\n    }\n    #renderHeader() {\n        if (this.#state.type === \"setting-is-not-true\" /* State.SETTING_IS_NOT_TRUE */) {\n            return LitHtml.nothing;\n        }\n        const hasIcon = this.#state.type === \"consent-reminder\" /* State.CONSENT_REMINDER */;\n        // clang-format off\n        return html `\n      <header>\n        ${hasIcon ? html `\n          <div class=\"header-icon-container\">\n            <devtools-icon .data=${{\n            iconName: 'lightbulb-spark',\n            width: '18px',\n            height: '18px',\n        }}>\n            </devtools-icon>\n          </div>`\n            : LitHtml.nothing}\n        <div class=\"filler\">\n          <h2 tabindex=\"-1\">\n            ${this.#getHeader()}\n          </h2>\n          ${this.#renderSpinner()}\n        </div>\n        <div class=\"close-button\">\n          <devtools-button\n            .data=${{\n            variant: \"icon\" /* Buttons.Button.Variant.ICON */,\n            size: \"SMALL\" /* Buttons.Button.Size.SMALL */,\n            iconName: 'cross',\n            title: i18nString(UIStrings.closeInsight),\n        }}\n            jslog=${VisualLogging.close().track({ click: true })}\n            @click=${this.#onClose}\n          ></devtools-button>\n        </div>\n      </header>\n    `;\n        // clang-format on\n    }\n    #render() {\n        // clang-format off\n        render(html `\n      <div class=\"wrapper\" jslog=${VisualLogging.pane('console-insights').track({ resize: true })}>\n        <div class=\"animation-wrapper\">\n          ${this.#renderHeader()}\n          ${this.#renderMain()}\n          ${this.#renderFooter()}\n        </div>\n      </div>\n    `, this.#shadow, {\n            host: this,\n        });\n        // clang-format on\n    }\n}\nclass ConsoleInsightSourcesList extends HTMLElement {\n    #shadow = this.attachShadow({ mode: 'open' });\n    #sources = [];\n    #isPageReloadRecommended = false;\n    constructor() {\n        super();\n        this.#shadow.adoptedStyleSheets = [listStyles, Input.checkboxStyles];\n    }\n    #render() {\n        // clang-format off\n        render(html `\n      <ul>\n        ${Directives.repeat(this.#sources, item => item.value, item => {\n            return html `<li><x-link class=\"link\" title=\"${localizeType(item.type)} ${i18nString(UIStrings.opensInNewTab)}\" href=\"data:text/plain,${encodeURIComponent(item.value)}\" jslog=${VisualLogging.link('source-' + item.type).track({ click: true })}>\n            <devtools-icon name=\"open-externally\"></devtools-icon>\n            ${localizeType(item.type)}\n          </x-link></li>`;\n        })}\n        ${this.#isPageReloadRecommended ? html `<li class=\"source-disclaimer\">\n          <devtools-icon name=\"warning\"></devtools-icon>\n          ${i18nString(UIStrings.reloadRecommendation)}</li>` : LitHtml.nothing}\n      </ul>\n    `, this.#shadow, {\n            host: this,\n        });\n        // clang-format on\n    }\n    set sources(values) {\n        this.#sources = values;\n        this.#render();\n    }\n    set isPageReloadRecommended(isPageReloadRecommended) {\n        this.#isPageReloadRecommended = isPageReloadRecommended;\n        this.#render();\n    }\n}\ncustomElements.define('devtools-console-insight', ConsoleInsight);\ncustomElements.define('devtools-console-insight-sources-list', ConsoleInsightSourcesList);\n//# sourceMappingURL=ConsoleInsight.js.map","// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Host from '../../core/host/host.js';\nimport * as Console from '../console/console.js';\nimport { ConsoleInsight } from './components/ConsoleInsight.js';\nimport { PromptBuilder } from './PromptBuilder.js';\nexport class ActionDelegate {\n    handleAction(context, actionId) {\n        switch (actionId) {\n            case 'explain.console-message.context':\n            case 'explain.console-message.context.error':\n            case 'explain.console-message.context.warning':\n            case 'explain.console-message.context.other':\n            case 'explain.console-message.hover': {\n                const consoleViewMessage = context.flavor(Console.ConsoleViewMessage.ConsoleViewMessage);\n                if (consoleViewMessage) {\n                    if (actionId.startsWith('explain.console-message.context')) {\n                        Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightRequestedViaContextMenu);\n                    }\n                    else if (actionId === 'explain.console-message.hover') {\n                        Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightRequestedViaHoverButton);\n                    }\n                    const promptBuilder = new PromptBuilder(consoleViewMessage);\n                    const aidaClient = new Host.AidaClient.AidaClient();\n                    void ConsoleInsight.create(promptBuilder, aidaClient).then(insight => {\n                        consoleViewMessage.setInsight(insight);\n                    });\n                    return true;\n                }\n                return false;\n            }\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=ActionDelegate.js.map"],"names":["MAX_MESSAGE_SIZE","MAX_STACK_TRACE_SIZE","MAX_CODE_SIZE","MAX_HEADERS_SIZE","SourceType","PromptBuilder","#consoleMessage","consoleMessage","requestId","Logs.NetworkLog.NetworkLog","callframe","runtimeModel","debuggerModel","rawLocation","SDK.DebuggerModel.Location","mappedLocation","Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding","content","text","firstNewline","formattedContent","formattedMapping","Formatter.ScriptFormatter.formatScriptContent","lineNumber","columnNumber","sourcesTypes","sourceCode","request","relatedCode","formatRelatedCode","relatedRequest","formatNetworkRequest","stacktrace","formatStackTrace","message","formatConsoleMessage","prompt","sources","allowHeader","header","normalizedName","lineWhitespace","line","matches","whitespace","maxCodeSize","lines","start","end","relatedCodeSize","currentLineNumber","currentWhitespace","startByPrefix","startLine","endLine","nextLine","nextWhitespace","formatLines","title","maxLength","result","formatHeaders","headers","previewContainer","messageContent","n","Components.Linkifier.Linkifier","styles","UIStrings","str_","i18n.i18n.registerUIStrings","i18nString","i18n.i18n.getLocalizedString","render","html","Directives","LitHtml","CloseEvent","localizeType","sourceType","TERMS_OF_SERVICE_URL","PRIVACY_POLICY_URL","CODE_SNIPPET_WARNING_URL","LEARNMORE_URL","REPORT_URL","CHROME_SETTINGS_URL","ConsoleInsight","promptBuilder","aidaClient","aidaAvailability","Host.AidaClient.AidaClient","#shadow","#promptBuilder","#aidaClient","#renderer","MarkdownView.MarkdownView.MarkdownInsightRenderer","#state","#selectedRating","#consoleInsightsEnabledSetting","#aidaAvailability","#boundOnAidaAvailabilityChange","#getConsoleInsightsEnabledSetting","#getStateFromAidaAvailability","#onAidaAvailabilityChange","#render","e","skipReminder","Common.Settings.Settings","#getOnboardingCompletedSetting","Common.Settings.moduleSetting","Input.checkboxStyles","#onConsoleInsightsSettingChanged","blockedByAge","Host.userMetrics","Host.UserMetrics.Action","Host.AidaClient.HostConfigTracker","#generateInsightIfNeeded","currentAidaAvailability","#transitionTo","newState","previousState","#focusHeader","isPageReloadRecommended","#generateInsight","#onClose","#onRating","event","disallowLogging","#onReport","Host.InspectorFrontendHost.InspectorFrontendHostInstance","#onSearch","query","#onConsentReminderConfirmed","explanation","metadata","completed","#getInsight","tokens","#validateMarkdown","valid","err","Marked.Marked.lexer","token","response","#onGoToChromeSettings","rootTarget","SDK.TargetManager.TargetManager","url","#renderSearchButton","#renderLearnMoreAboutInsights","VisualLogging.link","#renderMain","jslog","VisualLogging.section","VisualLogging.expand","settingsLink","UI.ARIAUtils.markAsLink","UI.ViewManager.ViewManager","VisualLogging.action","i18n.i18n.getFormatLocalizedString","#renderDisclaimer","#renderFooter","showThumbsUpDownButtons","disclaimer","LitHtml.nothing","#getHeader","#renderSpinner","#renderHeader","hasIcon","VisualLogging.close","VisualLogging.pane","ConsoleInsightSourcesList","#sources","#isPageReloadRecommended","listStyles","item","values","ActionDelegate","context","actionId","consoleViewMessage","Console.ConsoleViewMessage.ConsoleViewMessage","insight"],"mappings":"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"}