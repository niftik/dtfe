{"version":3,"file":"autofill-BPyv8jHv.js","sources":["../../panels/autofill/autofillView.css.js","../../panels/autofill/AutofillView.js"],"sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(\n`/*\n * Copyright (c) 2023 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\nmain {\n  height: 100%;\n}\n\n.header {\n  display: flex;\n  border-bottom: 1px solid var(--sys-color-divider);\n  width: 100%;\n}\n\n.placeholder-container {\n  height: calc(100% - 29px);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.placeholder {\n  font-size: 15px;\n  text-align: center;\n}\n\n.address {\n  padding: 10px;\n  margin-right: auto;\n}\n\n.filled-fields-grid {\n  border-top: 1px solid var(--sys-color-divider);\n  box-sizing: border-box;\n}\n\n.content-container {\n  display: flex;\n  flex-flow: column;\n  height: 100%;\n}\n\n.grid-wrapper {\n  flex-grow: 1;\n}\n\n.checkbox-label {\n  display: flex;\n  align-items: center;\n}\n\n.right-to-left {\n  border-bottom: 1px solid var(--sys-color-divider);\n  display: flex;\n  flex-flow: row-reverse wrap;\n  justify-content: flex-end;\n}\n\n.label-container {\n  padding: 5px;\n  display: flex;\n  align-items: flex-start;\n}\n\n.top-left-corner {\n  border-bottom: 1px solid var(--sys-color-divider);\n  display: flex;\n  padding: 5px;\n  gap: 10px;\n}\n\n.matches-filled-field {\n  background-color: var(--sys-color-tonal-container);\n}\n\n.highlighted {\n  background-color: var(--sys-color-state-focus-select);\n}\n\n.link {\n  color: var(--sys-color-primary);\n  text-decoration-line: underline;\n}\n\n.feedback {\n  margin: auto 5px auto auto;\n}\n\n/*# sourceURL=autofillView.css */\n`);\n\nexport default styles;\n","// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport '../../ui/components/adorners/adorners.js';\nimport '../../ui/components/data_grid/data_grid.js';\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as AutofillManager from '../../models/autofill_manager/autofill_manager.js';\nimport * as ComponentHelpers from '../../ui/components/helpers/helpers.js';\nimport * as Input from '../../ui/components/input/input.js';\nimport * as LegacyWrapper from '../../ui/components/legacy_wrapper/legacy_wrapper.js';\nimport * as LitHtml from '../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport autofillViewStyles from './autofillView.css.js';\nconst { html } = LitHtml;\nconst UIStrings = {\n    /**\n     * @description Explanation for how to populate the autofill panel with data. Shown when there is\n     * no data available.\n     */\n    toStartDebugging: 'To start debugging autofill, use Chrome\\'s autofill menu to fill an address form.',\n    /**\n     * @description Column header for column containing form field values\n     */\n    value: 'Value',\n    /**\n     * @description Column header for column containing the predicted autofill categories\n     */\n    predictedAutofillValue: 'Predicted autofill value',\n    /**\n     * @description Column header for column containing the name/label/id of form fields\n     */\n    formField: 'Form field',\n    /**\n     * @description Tooltip for an adorner for form fields which have an autocomplete attribute\n     * (http://go/mdn/HTML/Attributes/autocomplete)\n     */\n    autocompleteAttribute: 'Autocomplete attribute',\n    /**\n     * @description Abbreviation of 'attribute'. Text content of an adorner for form fields which\n     * have an autocomplete attribute (http://go/mdn/HTML/Attributes/autocomplete)\n     */\n    attr: 'attr',\n    /**\n     * @description Tooltip for an adorner for form fields which don't have an autocomplete attribute\n     * (http://go/mdn/HTML/Attributes/autocomplete) and for which Chrome used heuristics to deduce\n     * the form field's autocomplete category.\n     */\n    inferredByHeuristics: 'Inferred by heuristics',\n    /**\n     * @description Abbreviation of 'heuristics'. Text content of an adorner for form fields which\n     * don't have an autocomplete attribute (http://go/mdn/HTML/Attributes/autocomplete) and for\n     * which Chrome used heuristics to deduce the form field's autocomplete category.\n     */\n    heur: 'heur',\n    /**\n     * @description Label for checkbox in the Autofill panel. If checked, this panel will open\n     * automatically whenever a form is being autofilled.\n     */\n    autoShow: 'Automatically open this panel',\n    /**\n     * @description Label for checkbox in the Autofill panel. If checked, test addresses will be added to the Autofill popup.\n     */\n    showTestAddressesInAutofillMenu: 'Show test addresses in autofill menu',\n    /**\n     * @description Tooltip text for a checkbox label in the Autofill panel. If checked, this panel\n     * will open automatically whenever a form is being autofilled.\n     */\n    autoShowTooltip: 'Open the autofill panel automatically when an autofill activity is detected.',\n    /**\n     * @description Aria text for the section of the autofill view containing a preview of the autofilled address.\n     */\n    addressPreview: 'Address preview',\n    /**\n     * @description Aria text for the section of the autofill view containing the info about the autofilled form fields.\n     */\n    formInspector: 'Form inspector',\n    /**\n     *@description Link text for a hyperlink to more documentation\n     */\n    learnMore: 'Learn more',\n    /**\n     *@description Link text for a hyperlink to webpage for leaving user feedback\n     */\n    sendFeedback: 'Send feedback',\n};\nconst AUTOFILL_INFO_URL = 'https://goo.gle/devtools-autofill-panel';\nconst AUTOFILL_FEEDBACK_URL = 'https://crbug.com/329106326';\nconst str_ = i18n.i18n.registerUIStrings('panels/autofill/AutofillView.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class AutofillView extends LegacyWrapper.LegacyWrapper.WrappableComponent {\n    #shadow = this.attachShadow({ mode: 'open' });\n    #renderBound = this.#render.bind(this);\n    #autoOpenViewSetting;\n    #showTestAddressesInAutofillMenuSetting;\n    #address = '';\n    #filledFields = [];\n    #matches = [];\n    #highlightedMatches = [];\n    constructor() {\n        super();\n        this.#autoOpenViewSetting =\n            Common.Settings.Settings.instance().createSetting('auto-open-autofill-view-on-event', true);\n        this.#showTestAddressesInAutofillMenuSetting =\n            Common.Settings.Settings.instance().createSetting('show-test-addresses-in-autofill-menu-on-event', false);\n    }\n    connectedCallback() {\n        this.#shadow.adoptedStyleSheets = [Input.checkboxStyles, autofillViewStyles];\n        const autofillManager = AutofillManager.AutofillManager.AutofillManager.instance();\n        const formFilledEvent = autofillManager.getLastFilledAddressForm();\n        if (formFilledEvent) {\n            ({\n                address: this.#address,\n                filledFields: this.#filledFields,\n                matches: this.#matches,\n            } = formFilledEvent);\n        }\n        autofillManager.addEventListener(\"AddressFormFilled\" /* AutofillManager.AutofillManager.Events.ADDRESS_FORM_FILLED */, this.#onAddressFormFilled, this);\n        SDK.TargetManager.TargetManager.instance().addModelListener(SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.PrimaryPageChanged, this.#onPrimaryPageChanged, this);\n        void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n    }\n    #onPrimaryPageChanged() {\n        this.#address = '';\n        this.#filledFields = [];\n        this.#matches = [];\n        this.#highlightedMatches = [];\n        void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n    }\n    #onAddressFormFilled({ data }) {\n        ({\n            address: this.#address,\n            filledFields: this.#filledFields,\n            matches: this.#matches,\n        } = data);\n        this.#highlightedMatches = [];\n        void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n    }\n    async #render() {\n        if (!ComponentHelpers.ScheduledRender.isScheduledRender(this)) {\n            throw new Error('AutofillView render was not scheduled');\n        }\n        if (!this.#address && !this.#filledFields.length) {\n            // Disabled until https://crbug.com/1079231 is fixed.\n            // clang-format off\n            LitHtml.render(html `\n        <main>\n          <div class=\"top-left-corner\">\n            <label class=\"checkbox-label\" title=${i18nString(UIStrings.showTestAddressesInAutofillMenu)}>\n              <input\n                type=\"checkbox\"\n                ?checked=${this.#showTestAddressesInAutofillMenuSetting.get()}\n                @change=${this.#onShowTestAddressesInAutofillMenuChanged.bind(this)}\n                jslog=${VisualLogging.toggle(this.#showTestAddressesInAutofillMenuSetting.name).track({ change: true })}>\n              <span>${i18nString(UIStrings.showTestAddressesInAutofillMenu)}</span>\n            </label>\n            <label class=\"checkbox-label\" title=${i18nString(UIStrings.autoShowTooltip)}>\n            <input\n              type=\"checkbox\"\n              ?checked=${this.#autoOpenViewSetting.get()}\n              @change=${this.#onAutoOpenCheckboxChanged.bind(this)}\n              jslog=${VisualLogging.toggle(this.#autoOpenViewSetting.name).track({ change: true })}>\n            <span>${i18nString(UIStrings.autoShow)}</span>\n            </label>\n            <x-link href=${AUTOFILL_FEEDBACK_URL} class=\"feedback link\" jslog=${VisualLogging.link('feedback').track({ click: true })}>${i18nString(UIStrings.sendFeedback)}</x-link>\n          </div>\n          <div class=\"placeholder-container\" jslog=${VisualLogging.pane('autofill-empty')}>\n            <div class=\"placeholder\">\n              <div>${i18nString(UIStrings.toStartDebugging)}</div>\n              <x-link href=${AUTOFILL_INFO_URL} class=\"link\" jslog=${VisualLogging.link('learn-more').track({ click: true })}>${i18nString(UIStrings.learnMore)}</x-link>\n            </div>\n          </div>\n        </main>\n      `, this.#shadow, { host: this });\n            // clang-format on\n            return;\n        }\n        // Disabled until https://crbug.com/1079231 is fixed.\n        // clang-format off\n        LitHtml.render(html `\n      <main>\n        <div class=\"content-container\" jslog=${VisualLogging.pane('autofill')}>\n          <div class=\"right-to-left\" role=\"region\" aria-label=${i18nString(UIStrings.addressPreview)}>\n            <div class=\"header\">\n              <div class=\"label-container\">\n                <label class=\"checkbox-label\" title=${i18nString(UIStrings.showTestAddressesInAutofillMenu)}>\n                  <input\n                    type=\"checkbox\"\n                    ?checked=${this.#showTestAddressesInAutofillMenuSetting.get()}\n                    @change=${this.#onShowTestAddressesInAutofillMenuChanged.bind(this)}\n                    jslog=${VisualLogging.toggle(this.#showTestAddressesInAutofillMenuSetting.name).track({ change: true })}\n                  >\n                  <span>${i18nString(UIStrings.showTestAddressesInAutofillMenu)}</span>\n                </label>\n              </div>\n              <div class=\"label-container\">\n                <label class=\"checkbox-label\" title=${i18nString(UIStrings.autoShowTooltip)}>\n                  <input\n                    type=\"checkbox\"\n                    ?checked=${this.#autoOpenViewSetting.get()}\n                    @change=${this.#onAutoOpenCheckboxChanged.bind(this)}\n                    jslog=${VisualLogging.toggle(this.#autoOpenViewSetting.name).track({ change: true })}\n                  >\n                  <span>${i18nString(UIStrings.autoShow)}</span>\n                </label>\n              </div>\n              <x-link href=${AUTOFILL_FEEDBACK_URL} class=\"feedback link\" jslog=${VisualLogging.link('feedback').track({ click: true })}>${i18nString(UIStrings.sendFeedback)}</x-link>\n            </div>\n            ${this.#renderAddress()}\n          </div>\n          ${this.#renderFilledFields()}\n        </div>\n      </main>\n    `, this.#shadow, { host: this });\n        // clang-format on\n    }\n    #onAutoOpenCheckboxChanged(e) {\n        const { checked } = e.target;\n        this.#autoOpenViewSetting.set(checked);\n    }\n    #onShowTestAddressesInAutofillMenuChanged(e) {\n        const { checked } = e.target;\n        this.#showTestAddressesInAutofillMenuSetting.set(checked);\n        AutofillManager.AutofillManager.AutofillManager.instance().onShowAutofillTestAddressesSettingsChanged();\n    }\n    #renderAddress() {\n        if (!this.#address) {\n            return LitHtml.nothing;\n        }\n        const createSpan = (startIndex, endIndex) => {\n            const textContentLines = this.#address.substring(startIndex, endIndex).split('\\n');\n            const templateLines = textContentLines.map((line, i) => i === textContentLines.length - 1 ? line : html `${line}<br>`);\n            const hasMatches = this.#matches.some(match => match.startIndex <= startIndex && match.endIndex > startIndex);\n            if (!hasMatches) {\n                return html `<span>${templateLines}</span>`;\n            }\n            const spanClasses = LitHtml.Directives.classMap({\n                'matches-filled-field': hasMatches,\n                highlighted: this.#highlightedMatches.some(match => match.startIndex <= startIndex && match.endIndex > startIndex),\n            });\n            // Disabled until https://crbug.com/1079231 is fixed.\n            // clang-format off\n            return html `\n        <span\n          class=${spanClasses}\n          @mouseenter=${() => this.#onSpanMouseEnter(startIndex)}\n          @mouseleave=${this.#onSpanMouseLeave}\n          jslog=${VisualLogging.item('matched-address-item').track({ hover: true })}\n        >${templateLines}</span>`;\n            // clang-format on\n        };\n        // Split the address string into multiple spans. Each span is connected to\n        // 0 or more matches. This allows highlighting the corresponding grid rows\n        // when hovering over a span. And vice versa finding the corresponding\n        // spans to highlight when hovering over a grid line.\n        const spans = [];\n        const matchIndices = new Set([0, this.#address.length]);\n        for (const match of this.#matches) {\n            matchIndices.add(match.startIndex);\n            matchIndices.add(match.endIndex);\n        }\n        const sortedMatchIndices = Array.from(matchIndices).sort((a, b) => a - b);\n        for (let i = 0; i < sortedMatchIndices.length - 1; i++) {\n            spans.push(createSpan(sortedMatchIndices[i], sortedMatchIndices[i + 1]));\n        }\n        return html `\n      <div class=\"address\">\n        ${spans}\n      </div>\n    `;\n    }\n    #onSpanMouseEnter(startIndex) {\n        this.#highlightedMatches =\n            this.#matches.filter(match => match.startIndex <= startIndex && match.endIndex > startIndex);\n        void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n    }\n    #onSpanMouseLeave() {\n        this.#highlightedMatches = [];\n        void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n    }\n    #renderFilledFields() {\n        if (!this.#filledFields.length) {\n            return LitHtml.nothing;\n        }\n        const gridData = {\n            columns: [\n                {\n                    id: 'name',\n                    title: i18nString(UIStrings.formField),\n                    widthWeighting: 50,\n                    hideable: false,\n                    visible: true,\n                    sortable: true,\n                },\n                {\n                    id: 'autofill-type',\n                    title: i18nString(UIStrings.predictedAutofillValue),\n                    widthWeighting: 50,\n                    hideable: false,\n                    visible: true,\n                    sortable: true,\n                },\n                {\n                    id: 'value',\n                    title: i18nString(UIStrings.value),\n                    widthWeighting: 50,\n                    hideable: false,\n                    visible: true,\n                    sortable: true,\n                },\n                {\n                    id: 'filled-field-index',\n                    title: 'filledFieldIndex',\n                    widthWeighting: 50,\n                    hideable: true,\n                    visible: false,\n                },\n            ],\n            rows: this.#buildReportRows(),\n            striped: true,\n        };\n        // Disabled until https://crbug.com/1079231 is fixed.\n        // clang-format off\n        return html `\n      <div class=\"grid-wrapper\" role=\"region\" aria-label=${i18nString(UIStrings.formInspector)}>\n        <devtools-data-grid-controller\n          @rowmouseenter=${this.#onGridRowMouseEnter}\n          @rowmouseleave=${this.#onGridRowMouseLeave}\n          class=\"filled-fields-grid\"\n          .data=${gridData}\n        >\n        </devtools-data-grid-controller>\n      </div>\n    `;\n        // clang-format on\n    }\n    #onGridRowMouseEnter(event) {\n        const rowIndex = event.data.row.cells[3].value;\n        if (typeof rowIndex !== 'number') {\n            return;\n        }\n        this.#highlightedMatches = this.#matches.filter(match => match.filledFieldIndex === rowIndex);\n        void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n        const backendNodeId = this.#filledFields[rowIndex].fieldId;\n        const target = SDK.FrameManager.FrameManager.instance()\n            .getFrame(this.#filledFields[rowIndex].frameId)\n            ?.resourceTreeModel()\n            .target();\n        if (target) {\n            const deferredNode = new SDK.DOMModel.DeferredDOMNode(target, backendNodeId);\n            const domModel = target.model(SDK.DOMModel.DOMModel);\n            if (deferredNode && domModel) {\n                domModel.overlayModel().highlightInOverlay({ deferredNode }, 'all');\n            }\n        }\n    }\n    #onGridRowMouseLeave() {\n        this.#highlightedMatches = [];\n        void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n        SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    }\n    #buildReportRows() {\n        const highlightedGridRows = new Set(this.#highlightedMatches.map(match => match.filledFieldIndex));\n        return this.#filledFields.map((field, index) => {\n            const fieldName = field.name || `#${field.id}`;\n            return {\n                cells: [\n                    { columnId: 'name', value: `${fieldName} (${field.htmlType})` },\n                    {\n                        columnId: 'autofill-type',\n                        value: field.autofillType,\n                        renderer: () => this.#autofillTypeRenderer(field.autofillType, field.fillingStrategy),\n                    },\n                    { columnId: 'value', value: `\"${field.value}\"` },\n                    { columnId: 'filled-field-index', value: index },\n                ],\n                styles: {\n                    'font-family': 'var(--monospace-font-family)',\n                    'font-size': 'var(--monospace-font-size)',\n                    ...(highlightedGridRows.has(index) && { 'background-color': 'var(--sys-color-state-hover-on-subtle)' }),\n                },\n            };\n        });\n    }\n    #autofillTypeRenderer(autofillType, fillingStrategy) {\n        const adornerContent = document.createElement('span');\n        let adornerTitle = '';\n        switch (fillingStrategy) {\n            case \"autocompleteAttribute\" /* Protocol.Autofill.FillingStrategy.AutocompleteAttribute */:\n                adornerContent.textContent = i18nString(UIStrings.attr);\n                adornerTitle = i18nString(UIStrings.autocompleteAttribute);\n                break;\n            case \"autofillInferred\" /* Protocol.Autofill.FillingStrategy.AutofillInferred */:\n                adornerContent.textContent = i18nString(UIStrings.heur);\n                adornerTitle = i18nString(UIStrings.inferredByHeuristics);\n        }\n        // Disabled until https://crbug.com/1079231 is fixed.\n        // clang-format off\n        return html `\n      ${autofillType}\n      ${adornerContent.textContent ? html `\n          <devtools-adorner title=${adornerTitle} .data=${{ name: fillingStrategy, content: adornerContent }}></devtools-adorner>\n        ` : LitHtml.nothing}\n    `;\n        // clang-format on\n    }\n}\ncustomElements.define('devtools-autofill-view', AutofillView);\n//# sourceMappingURL=AutofillView.js.map"],"names":["styles","html","LitHtml","UIStrings","AUTOFILL_INFO_URL","AUTOFILL_FEEDBACK_URL","str_","i18n.i18n.registerUIStrings","i18nString","i18n.i18n.getLocalizedString","AutofillView","LegacyWrapper.LegacyWrapper.WrappableComponent","#shadow","#renderBound","#render","#autoOpenViewSetting","#showTestAddressesInAutofillMenuSetting","#address","#filledFields","#matches","#highlightedMatches","Common.Settings.Settings","Input.checkboxStyles","autofillViewStyles","autofillManager","AutofillManager.AutofillManager.AutofillManager","formFilledEvent","#onAddressFormFilled","SDK.TargetManager.TargetManager","SDK.ResourceTreeModel.ResourceTreeModel","SDK.ResourceTreeModel.Events","#onPrimaryPageChanged","ComponentHelpers.ScheduledRender.scheduleRender","data","ComponentHelpers.ScheduledRender.isScheduledRender","LitHtml.render","#onShowTestAddressesInAutofillMenuChanged","VisualLogging.toggle","#onAutoOpenCheckboxChanged","VisualLogging.link","VisualLogging.pane","#renderAddress","#renderFilledFields","e","checked","LitHtml.nothing","createSpan","startIndex","endIndex","textContentLines","templateLines","line","i","hasMatches","match","spanClasses","LitHtml.Directives.classMap","#onSpanMouseEnter","#onSpanMouseLeave","VisualLogging.item","spans","matchIndices","sortedMatchIndices","a","b","gridData","#buildReportRows","#onGridRowMouseEnter","#onGridRowMouseLeave","event","rowIndex","backendNodeId","target","SDK.FrameManager.FrameManager","deferredNode","SDK.DOMModel.DeferredDOMNode","domModel","SDK.DOMModel.DOMModel","SDK.OverlayModel.OverlayModel","highlightedGridRows","field","index","#autofillTypeRenderer","autofillType","fillingStrategy","adornerContent","adornerTitle"],"mappings":"mQAKA,MAAMA,EAAS,IAAI,cACnBA,EAAO,YACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CA2FC,ECnFD,KAAM,CAAE,KAAAC,CAAM,EAAGC,EACXC,EAAY,CAKd,iBAAkB,mFAIlB,MAAO,QAIP,uBAAwB,2BAIxB,UAAW,aAKX,sBAAuB,yBAKvB,KAAM,OAMN,qBAAsB,yBAMtB,KAAM,OAKN,SAAU,gCAIV,gCAAiC,uCAKjC,gBAAiB,+EAIjB,eAAgB,kBAIhB,cAAe,iBAIf,UAAW,aAIX,aAAc,eAClB,EACMC,EAAoB,0CACpBC,EAAwB,8BACxBC,EAAOC,EAA4B,kCAAmCJ,CAAS,EACxEK,EAAaC,EAA6B,KAAK,OAAWH,CAAI,EACpE,MAAMI,UAAqBC,CAA+C,CAC7EC,GAAU,KAAK,aAAa,CAAE,KAAM,MAAQ,CAAA,EAC5CC,GAAe,KAAKC,GAAQ,KAAK,IAAI,EACrCC,GACAC,GACAC,GAAW,GACXC,GAAgB,CAAA,EAChBC,GAAW,CAAA,EACXC,GAAsB,CAAA,EACtB,aAAc,CACV,QACA,KAAKL,GACDM,EAAyB,SAAU,EAAC,cAAc,mCAAoC,EAAI,EAC9F,KAAKL,GACDK,EAAyB,SAAU,EAAC,cAAc,gDAAiD,EAAK,CAC/G,CACD,mBAAoB,CAChB,KAAKT,GAAQ,mBAAqB,CAACU,EAAsBC,CAAkB,EAC3E,MAAMC,EAAkBC,EAAgD,WAClEC,EAAkBF,EAAgB,2BACpCE,IACC,CACG,QAAS,KAAKT,GACd,aAAc,KAAKC,GACnB,QAAS,KAAKC,EACjB,EAAGO,GAERF,EAAgB,iBAAiB,oBAAsF,KAAKG,GAAsB,IAAI,EACtJC,EAAgC,WAAW,iBAAiBC,EAAyCC,EAA6B,mBAAoB,KAAKC,GAAuB,IAAI,EACjLC,EAAgD,KAAM,KAAKnB,EAAY,CAC/E,CACDkB,IAAwB,CACpB,KAAKd,GAAW,GAChB,KAAKC,GAAgB,GACrB,KAAKC,GAAW,GAChB,KAAKC,GAAsB,GACtBY,EAAgD,KAAM,KAAKnB,EAAY,CAC/E,CACDc,GAAqB,CAAE,KAAAM,GAAQ,EAC1B,CACG,QAAS,KAAKhB,GACd,aAAc,KAAKC,GACnB,QAAS,KAAKC,EACjB,EAAGc,GACJ,KAAKb,GAAsB,GACtBY,EAAgD,KAAM,KAAKnB,EAAY,CAC/E,CACD,KAAMC,IAAU,CACZ,GAAI,CAACoB,EAAmD,IAAI,EACxD,MAAM,IAAI,MAAM,uCAAuC,EAE3D,GAAI,CAAC,KAAKjB,IAAY,CAAC,KAAKC,GAAc,OAAQ,CAG9CiB,EAAelC;AAAA;AAAA;AAAA,kDAGuBO,EAAWL,EAAU,+BAA+B,CAAC;AAAA;AAAA;AAAA,2BAG5E,KAAKa,GAAwC,KAAK;AAAA,0BACnD,KAAKoB,GAA0C,KAAK,IAAI,CAAC;AAAA,wBAC3DC,EAAqB,KAAKrB,GAAwC,IAAI,EAAE,MAAM,CAAE,OAAQ,EAAI,CAAE,CAAC;AAAA,sBACjGR,EAAWL,EAAU,+BAA+B,CAAC;AAAA;AAAA,kDAEzBK,EAAWL,EAAU,eAAe,CAAC;AAAA;AAAA;AAAA,yBAG9D,KAAKY,GAAqB,KAAK;AAAA,wBAChC,KAAKuB,GAA2B,KAAK,IAAI,CAAC;AAAA,sBAC5CD,EAAqB,KAAKtB,GAAqB,IAAI,EAAE,MAAM,CAAE,OAAQ,EAAI,CAAE,CAAC;AAAA,oBAC9EP,EAAWL,EAAU,QAAQ,CAAC;AAAA;AAAA,2BAEvBE,CAAqB,gCAAgCkC,EAAmB,UAAU,EAAE,MAAM,CAAE,MAAO,EAAI,CAAE,CAAC,IAAI/B,EAAWL,EAAU,YAAY,CAAC;AAAA;AAAA,qDAEtHqC,EAAmB,gBAAgB,CAAC;AAAA;AAAA,qBAEpEhC,EAAWL,EAAU,gBAAgB,CAAC;AAAA,6BAC9BC,CAAiB,uBAAuBmC,EAAmB,YAAY,EAAE,MAAM,CAAE,MAAO,EAAI,CAAE,CAAC,IAAI/B,EAAWL,EAAU,SAAS,CAAC;AAAA;AAAA;AAAA;AAAA,QAItJ,KAAKS,GAAS,CAAE,KAAM,IAAM,CAAA,EAEzB,MACH,CAGDuB,EAAelC;AAAA;AAAA,+CAEwBuC,EAAmB,UAAU,CAAC;AAAA,gEACbhC,EAAWL,EAAU,cAAc,CAAC;AAAA;AAAA;AAAA,sDAG9CK,EAAWL,EAAU,+BAA+B,CAAC;AAAA;AAAA;AAAA,+BAG5E,KAAKa,GAAwC,KAAK;AAAA,8BACnD,KAAKoB,GAA0C,KAAK,IAAI,CAAC;AAAA,4BAC3DC,EAAqB,KAAKrB,GAAwC,IAAI,EAAE,MAAM,CAAE,OAAQ,EAAI,CAAE,CAAC;AAAA;AAAA,0BAEjGR,EAAWL,EAAU,+BAA+B,CAAC;AAAA;AAAA;AAAA;AAAA,sDAIzBK,EAAWL,EAAU,eAAe,CAAC;AAAA;AAAA;AAAA,+BAG5D,KAAKY,GAAqB,KAAK;AAAA,8BAChC,KAAKuB,GAA2B,KAAK,IAAI,CAAC;AAAA,4BAC5CD,EAAqB,KAAKtB,GAAqB,IAAI,EAAE,MAAM,CAAE,OAAQ,EAAI,CAAE,CAAC;AAAA;AAAA,0BAE9EP,EAAWL,EAAU,QAAQ,CAAC;AAAA;AAAA;AAAA,6BAG3BE,CAAqB,gCAAgCkC,EAAmB,UAAU,EAAE,MAAM,CAAE,MAAO,EAAI,CAAE,CAAC,IAAI/B,EAAWL,EAAU,YAAY,CAAC;AAAA;AAAA,cAE/J,KAAKsC,IAAgB;AAAA;AAAA,YAEvB,KAAKC,IAAqB;AAAA;AAAA;AAAA,MAG/B,KAAK9B,GAAS,CAAE,KAAM,IAAM,CAAA,CAE9B,CACD0B,GAA2BK,EAAG,CAC1B,KAAM,CAAE,QAAAC,CAAO,EAAKD,EAAE,OACtB,KAAK5B,GAAqB,IAAI6B,CAAO,CACxC,CACDR,GAA0CO,EAAG,CACzC,KAAM,CAAE,QAAAC,CAAO,EAAKD,EAAE,OACtB,KAAK3B,GAAwC,IAAI4B,CAAO,EACxDnB,EAAgD,WAAW,4CAC9D,CACDgB,IAAiB,CACb,GAAI,CAAC,KAAKxB,GACN,OAAO4B,EAEX,MAAMC,EAAa,CAACC,EAAYC,IAAa,CACzC,MAAMC,EAAmB,KAAKhC,GAAS,UAAU8B,EAAYC,CAAQ,EAAE,MAAM;AAAA,CAAI,EAC3EE,EAAgBD,EAAiB,IAAI,CAACE,EAAMC,IAAMA,IAAMH,EAAiB,OAAS,EAAIE,EAAOlD,IAAQkD,CAAI,MAAM,EAC/GE,EAAa,KAAKlC,GAAS,KAAKmC,GAASA,EAAM,YAAcP,GAAcO,EAAM,SAAWP,CAAU,EAC5G,GAAI,CAACM,EACD,OAAOpD,UAAciD,CAAa,UAEtC,MAAMK,EAAcC,EAA4B,CAC5C,uBAAwBH,EACxB,YAAa,KAAKjC,GAAoB,KAAKkC,GAASA,EAAM,YAAcP,GAAcO,EAAM,SAAWP,CAAU,CACjI,CAAa,EAGD,OAAO9C;AAAA;AAAA,kBAEDsD,CAAW;AAAA,wBACL,IAAM,KAAKE,GAAkBV,CAAU,CAAC;AAAA,wBACxC,KAAKW,EAAiB;AAAA,kBAC5BC,EAAmB,sBAAsB,EAAE,MAAM,CAAE,MAAO,EAAI,CAAE,CAAC;AAAA,WACxET,CAAa,SAExB,EAKcU,EAAQ,CAAA,EACRC,EAAe,IAAI,IAAI,CAAC,EAAG,KAAK5C,GAAS,MAAM,CAAC,EACtD,UAAWqC,KAAS,KAAKnC,GACrB0C,EAAa,IAAIP,EAAM,UAAU,EACjCO,EAAa,IAAIP,EAAM,QAAQ,EAEnC,MAAMQ,EAAqB,MAAM,KAAKD,CAAY,EAAE,KAAK,CAACE,EAAGC,IAAMD,EAAIC,CAAC,EACxE,QAASZ,EAAI,EAAGA,EAAIU,EAAmB,OAAS,EAAGV,IAC/CQ,EAAM,KAAKd,EAAWgB,EAAmBV,CAAC,EAAGU,EAAmBV,EAAI,CAAC,CAAC,CAAC,EAE3E,OAAOnD;AAAA;AAAA,UAEL2D,CAAK;AAAA;AAAA,KAGV,CACDH,GAAkBV,EAAY,CAC1B,KAAK3B,GACD,KAAKD,GAAS,OAAOmC,GAASA,EAAM,YAAcP,GAAcO,EAAM,SAAWP,CAAU,EAC1Ff,EAAgD,KAAM,KAAKnB,EAAY,CAC/E,CACD6C,IAAoB,CAChB,KAAKtC,GAAsB,GACtBY,EAAgD,KAAM,KAAKnB,EAAY,CAC/E,CACD6B,IAAsB,CAClB,GAAI,CAAC,KAAKxB,GAAc,OACpB,OAAO2B,EAEX,MAAMoB,EAAW,CACb,QAAS,CACL,CACI,GAAI,OACJ,MAAOzD,EAAWL,EAAU,SAAS,EACrC,eAAgB,GAChB,SAAU,GACV,QAAS,GACT,SAAU,EACb,EACD,CACI,GAAI,gBACJ,MAAOK,EAAWL,EAAU,sBAAsB,EAClD,eAAgB,GAChB,SAAU,GACV,QAAS,GACT,SAAU,EACb,EACD,CACI,GAAI,QACJ,MAAOK,EAAWL,EAAU,KAAK,EACjC,eAAgB,GAChB,SAAU,GACV,QAAS,GACT,SAAU,EACb,EACD,CACI,GAAI,qBACJ,MAAO,mBACP,eAAgB,GAChB,SAAU,GACV,QAAS,EACZ,CACJ,EACD,KAAM,KAAK+D,GAAkB,EAC7B,QAAS,EACrB,EAGQ,OAAOjE;AAAA,2DAC4CO,EAAWL,EAAU,aAAa,CAAC;AAAA;AAAA,2BAEnE,KAAKgE,EAAoB;AAAA,2BACzB,KAAKC,EAAoB;AAAA;AAAA,kBAElCH,CAAQ;AAAA;AAAA;AAAA;AAAA,KAMrB,CACDE,GAAqBE,EAAO,CACxB,MAAMC,EAAWD,EAAM,KAAK,IAAI,MAAM,CAAC,EAAE,MACzC,GAAI,OAAOC,GAAa,SACpB,OAEJ,KAAKlD,GAAsB,KAAKD,GAAS,OAAOmC,GAASA,EAAM,mBAAqBgB,CAAQ,EACvFtC,EAAgD,KAAM,KAAKnB,EAAY,EAC5E,MAAM0D,EAAgB,KAAKrD,GAAcoD,CAAQ,EAAE,QAC7CE,EAASC,EAA8B,SAAU,EAClD,SAAS,KAAKvD,GAAcoD,CAAQ,EAAE,OAAO,GAC5C,kBAAmB,EACpB,SACL,GAAIE,EAAQ,CACR,MAAME,EAAe,IAAIC,EAA6BH,EAAQD,CAAa,EACrEK,EAAWJ,EAAO,MAAMK,CAAqB,EAC/CH,GAAgBE,GAChBA,EAAS,aAAY,EAAG,mBAAmB,CAAE,aAAAF,CAAY,EAAI,KAAK,CAEzE,CACJ,CACDN,IAAuB,CACnB,KAAKhD,GAAsB,GACtBY,EAAgD,KAAM,KAAKnB,EAAY,EAC5EiE,EAA8B,qBAAoB,CACrD,CACDZ,IAAmB,CACf,MAAMa,EAAsB,IAAI,IAAI,KAAK3D,GAAoB,IAAIkC,GAASA,EAAM,gBAAgB,CAAC,EACjG,OAAO,KAAKpC,GAAc,IAAI,CAAC8D,EAAOC,KAE3B,CACH,MAAO,CACH,CAAE,SAAU,OAAQ,MAAO,GAHjBD,EAAM,MAAQ,IAAIA,EAAM,EAAE,EAGG,KAAKA,EAAM,QAAQ,GAAK,EAC/D,CACI,SAAU,gBACV,MAAOA,EAAM,aACb,SAAU,IAAM,KAAKE,GAAsBF,EAAM,aAAcA,EAAM,eAAe,CACvF,EACD,CAAE,SAAU,QAAS,MAAO,IAAIA,EAAM,KAAK,GAAK,EAChD,CAAE,SAAU,qBAAsB,MAAOC,CAAO,CACnD,EACD,OAAQ,CACJ,cAAe,+BACf,YAAa,6BACb,GAAIF,EAAoB,IAAIE,CAAK,GAAK,CAAE,mBAAoB,yCAC/D,CACjB,EACS,CACJ,CACDC,GAAsBC,EAAcC,EAAiB,CACjD,MAAMC,EAAiB,SAAS,cAAc,MAAM,EACpD,IAAIC,EAAe,GACnB,OAAQF,EAAe,CACnB,IAAK,wBACDC,EAAe,YAAc7E,EAAWL,EAAU,IAAI,EACtDmF,EAAe9E,EAAWL,EAAU,qBAAqB,EACzD,MACJ,IAAK,mBACDkF,EAAe,YAAc7E,EAAWL,EAAU,IAAI,EACtDmF,EAAe9E,EAAWL,EAAU,oBAAoB,CAC/D,CAGD,OAAOF;AAAA,QACPkF,CAAY;AAAA,QACZE,EAAe,YAAcpF;AAAA,oCACDqF,CAAY,UAAU,CAAE,KAAMF,EAAiB,QAASC,EAAgB;AAAA,UAChGxC,CAAe;AAAA,KAGtB,CACL,CACA,eAAe,OAAO,yBAA0BnC,CAAY"}