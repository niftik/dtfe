{"version":3,"file":"IsolateManager-NiMHBY0n.js","sources":["../../core/sdk/IsolateManager.js"],"sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../common/common.js';\nimport { RuntimeModel } from './RuntimeModel.js';\nimport { TargetManager } from './TargetManager.js';\nlet isolateManagerInstance;\nexport class IsolateManager extends Common.ObjectWrapper.ObjectWrapper {\n    #isolatesInternal;\n    #isolateIdByModel;\n    #observers;\n    #pollId;\n    constructor() {\n        super();\n        this.#isolatesInternal = new Map();\n        // #isolateIdByModel contains null while the isolateId is being retrieved.\n        this.#isolateIdByModel = new Map();\n        this.#observers = new Set();\n        TargetManager.instance().observeModels(RuntimeModel, this);\n        this.#pollId = 0;\n    }\n    static instance({ forceNew } = { forceNew: false }) {\n        if (!isolateManagerInstance || forceNew) {\n            isolateManagerInstance = new IsolateManager();\n        }\n        return isolateManagerInstance;\n    }\n    observeIsolates(observer) {\n        if (this.#observers.has(observer)) {\n            throw new Error('Observer can only be registered once');\n        }\n        if (!this.#observers.size) {\n            void this.poll();\n        }\n        this.#observers.add(observer);\n        for (const isolate of this.#isolatesInternal.values()) {\n            observer.isolateAdded(isolate);\n        }\n    }\n    unobserveIsolates(observer) {\n        this.#observers.delete(observer);\n        if (!this.#observers.size) {\n            ++this.#pollId;\n        } // Stops the current polling loop.\n    }\n    modelAdded(model) {\n        void this.modelAddedInternal(model);\n    }\n    async modelAddedInternal(model) {\n        this.#isolateIdByModel.set(model, null);\n        const isolateId = await model.isolateId();\n        if (!this.#isolateIdByModel.has(model)) {\n            // The model has been removed during await.\n            return;\n        }\n        if (!isolateId) {\n            this.#isolateIdByModel.delete(model);\n            return;\n        }\n        this.#isolateIdByModel.set(model, isolateId);\n        let isolate = this.#isolatesInternal.get(isolateId);\n        if (!isolate) {\n            isolate = new Isolate(isolateId);\n            this.#isolatesInternal.set(isolateId, isolate);\n        }\n        isolate.modelsInternal.add(model);\n        if (isolate.modelsInternal.size === 1) {\n            for (const observer of this.#observers) {\n                observer.isolateAdded(isolate);\n            }\n        }\n        else {\n            for (const observer of this.#observers) {\n                observer.isolateChanged(isolate);\n            }\n        }\n    }\n    modelRemoved(model) {\n        const isolateId = this.#isolateIdByModel.get(model);\n        this.#isolateIdByModel.delete(model);\n        if (!isolateId) {\n            return;\n        }\n        const isolate = this.#isolatesInternal.get(isolateId);\n        if (!isolate) {\n            return;\n        }\n        isolate.modelsInternal.delete(model);\n        if (isolate.modelsInternal.size) {\n            for (const observer of this.#observers) {\n                observer.isolateChanged(isolate);\n            }\n            return;\n        }\n        for (const observer of this.#observers) {\n            observer.isolateRemoved(isolate);\n        }\n        this.#isolatesInternal.delete(isolateId);\n    }\n    isolateByModel(model) {\n        return this.#isolatesInternal.get(this.#isolateIdByModel.get(model) || '') || null;\n    }\n    isolates() {\n        return this.#isolatesInternal.values();\n    }\n    async poll() {\n        const pollId = this.#pollId;\n        while (pollId === this.#pollId) {\n            await Promise.all(Array.from(this.isolates(), isolate => isolate.update()));\n            await new Promise(r => window.setTimeout(r, PollIntervalMs));\n        }\n    }\n}\nexport const MemoryTrendWindowMs = 120e3;\nconst PollIntervalMs = 2e3;\nexport class Isolate {\n    #idInternal;\n    modelsInternal;\n    #usedHeapSizeInternal;\n    #memoryTrend;\n    constructor(id) {\n        this.#idInternal = id;\n        this.modelsInternal = new Set();\n        this.#usedHeapSizeInternal = 0;\n        const count = MemoryTrendWindowMs / PollIntervalMs;\n        this.#memoryTrend = new MemoryTrend(count);\n    }\n    id() {\n        return this.#idInternal;\n    }\n    models() {\n        return this.modelsInternal;\n    }\n    runtimeModel() {\n        return this.modelsInternal.values().next().value || null;\n    }\n    heapProfilerModel() {\n        const runtimeModel = this.runtimeModel();\n        return runtimeModel && runtimeModel.heapProfilerModel();\n    }\n    async update() {\n        const model = this.runtimeModel();\n        const usage = model && await model.heapUsage();\n        if (!usage) {\n            return;\n        }\n        this.#usedHeapSizeInternal = usage.usedSize;\n        this.#memoryTrend.add(this.#usedHeapSizeInternal);\n        IsolateManager.instance().dispatchEventToListeners(\"MemoryChanged\" /* Events.MEMORY_CHANGED */, this);\n    }\n    samplesCount() {\n        return this.#memoryTrend.count();\n    }\n    usedHeapSize() {\n        return this.#usedHeapSizeInternal;\n    }\n    /**\n     * bytes per millisecond\n     */\n    usedHeapSizeGrowRate() {\n        return this.#memoryTrend.fitSlope();\n    }\n}\nexport class MemoryTrend {\n    #maxCount;\n    #base;\n    #index;\n    #x;\n    #y;\n    #sx;\n    #sy;\n    #sxx;\n    #sxy;\n    constructor(maxCount) {\n        this.#maxCount = maxCount | 0;\n        this.reset();\n    }\n    reset() {\n        this.#base = Date.now();\n        this.#index = 0;\n        this.#x = [];\n        this.#y = [];\n        this.#sx = 0;\n        this.#sy = 0;\n        this.#sxx = 0;\n        this.#sxy = 0;\n    }\n    count() {\n        return this.#x.length;\n    }\n    add(heapSize, timestamp) {\n        const x = typeof timestamp === 'number' ? timestamp : Date.now() - this.#base;\n        const y = heapSize;\n        if (this.#x.length === this.#maxCount) {\n            // Turns into a cyclic buffer once it reaches the |#maxCount|.\n            const x0 = this.#x[this.#index];\n            const y0 = this.#y[this.#index];\n            this.#sx -= x0;\n            this.#sy -= y0;\n            this.#sxx -= x0 * x0;\n            this.#sxy -= x0 * y0;\n        }\n        this.#sx += x;\n        this.#sy += y;\n        this.#sxx += x * x;\n        this.#sxy += x * y;\n        this.#x[this.#index] = x;\n        this.#y[this.#index] = y;\n        this.#index = (this.#index + 1) % this.#maxCount;\n    }\n    fitSlope() {\n        // We use the linear regression model to find the slope.\n        const n = this.count();\n        return n < 2 ? 0 : (this.#sxy - this.#sx * this.#sy / n) / (this.#sxx - this.#sx * this.#sx / n);\n    }\n}\n//# sourceMappingURL=IsolateManager.js.map"],"names":["isolateManagerInstance","IsolateManager","Common.ObjectWrapper.ObjectWrapper","#isolatesInternal","#isolateIdByModel","#observers","#pollId","TargetManager","RuntimeModel","forceNew","observer","isolate","model","isolateId","Isolate","pollId","r","PollIntervalMs","MemoryTrendWindowMs","#idInternal","#usedHeapSizeInternal","#memoryTrend","id","count","MemoryTrend","runtimeModel","usage","#maxCount","#base","#index","#x","#y","#sx","#sy","#sxx","#sxy","maxCount","heapSize","timestamp","x","y","x0","y0","n"],"mappings":"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"}