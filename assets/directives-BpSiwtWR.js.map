{"version":3,"file":"directives-BpSiwtWR.js","sources":["../../ui/components/helpers/directives.js"],"sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as LitHtml from '../../lit-html/lit-html.js';\n/**\n * Provides a hook to get a callback when a LitHtml node is rendered into the DOM:\n * @example\n *\n * ```\n * <p on-render=${nodeRenderedCallback(node => ...)}>\n * ```\n */\nclass NodeRenderedCallback extends LitHtml.Directive.Directive {\n    constructor(partInfo) {\n        super(partInfo);\n        if (partInfo.type !== LitHtml.Directive.PartType.ATTRIBUTE) {\n            throw new Error('Node rendered callback directive must be used as an attribute.');\n        }\n    }\n    update(part, [callback]) {\n        callback(part.element);\n    }\n    /*\n     * Because this directive doesn't render anything, there's no implementation\n     * here for the render method. But we need it to state that it takes in a\n     * callback function at the callsite. Without this definition, the types in\n     * the update() method above don't get correctly picked up.\n     */\n    render(_callback) {\n    }\n}\nexport const nodeRenderedCallback = LitHtml.Directive.directive(NodeRenderedCallback);\n//# sourceMappingURL=directives.js.map"],"names":["NodeRenderedCallback","LitHtml.Directive.Directive","partInfo","LitHtml.Directive.PartType","part","callback","_callback","nodeRenderedCallback","LitHtml.Directive.directive"],"mappings":"6DAYA,MAAMA,UAA6BC,CAA4B,CAC3D,YAAYC,EAAU,CAElB,GADA,MAAMA,CAAQ,EACVA,EAAS,OAASC,EAA2B,UAC7C,MAAM,IAAI,MAAM,gEAAgE,CAEvF,CACD,OAAOC,EAAM,CAACC,CAAQ,EAAG,CACrBA,EAASD,EAAK,OAAO,CACxB,CAOD,OAAOE,EAAW,CACjB,CACL,CACY,MAACC,EAAuBC,EAA4BR,CAAoB"}