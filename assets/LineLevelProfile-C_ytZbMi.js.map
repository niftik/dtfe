{"version":3,"file":"LineLevelProfile-C_ytZbMi.js","sources":["../../ui/legacy/components/perf_ui/LineLevelProfile.js"],"sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport * as Bindings from '../../../../models/bindings/bindings.js';\nimport * as Workspace from '../../../../models/workspace/workspace.js';\nimport * as SourceFrame from '../source_frame/source_frame.js';\nlet performanceInstance;\nexport class Performance {\n    helper;\n    constructor() {\n        this.helper = new Helper(\"performance\" /* SourceFrame.SourceFrame.DecoratorType.PERFORMANCE */);\n    }\n    static instance(opts = { forceNew: null }) {\n        const { forceNew } = opts;\n        if (!performanceInstance || forceNew) {\n            performanceInstance = new Performance();\n        }\n        return performanceInstance;\n    }\n    reset() {\n        this.helper.reset();\n    }\n    appendLegacyCPUProfile(profile, target) {\n        const nodesToGo = [profile.profileHead];\n        const sampleDuration = (profile.profileEndTime - profile.profileStartTime) / profile.totalHitCount;\n        while (nodesToGo.length) {\n            const nodes = \n            // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            nodesToGo.pop().children; // Cast to any because runtime checks assert the props.\n            for (let i = 0; i < nodes.length; ++i) {\n                const node = nodes[i];\n                nodesToGo.push(node);\n                if (!node.url || !node.positionTicks) {\n                    continue;\n                }\n                for (let j = 0; j < node.positionTicks.length; ++j) {\n                    const lineInfo = node.positionTicks[j];\n                    const line = lineInfo.line;\n                    const time = lineInfo.ticks * sampleDuration;\n                    this.helper.addLineData(target, node.url, line, time);\n                }\n            }\n        }\n    }\n    appendCPUProfile(profile, target) {\n        if (!profile.lines) {\n            this.appendLegacyCPUProfile(profile, target);\n            this.helper.scheduleUpdate();\n            return;\n        }\n        if (!profile.samples) {\n            return;\n        }\n        for (let i = 1; i < profile.samples.length; ++i) {\n            const line = profile.lines[i];\n            if (!line) {\n                continue;\n            }\n            const node = profile.nodeByIndex(i);\n            if (!node) {\n                continue;\n            }\n            const scriptIdOrUrl = Number(node.scriptId) || node.url;\n            if (!scriptIdOrUrl) {\n                continue;\n            }\n            const time = profile.timestamps[i] - profile.timestamps[i - 1];\n            this.helper.addLineData(target, scriptIdOrUrl, line, time);\n        }\n        this.helper.scheduleUpdate();\n    }\n}\nlet memoryInstance;\nexport class Memory {\n    helper;\n    constructor() {\n        this.helper = new Helper(\"memory\" /* SourceFrame.SourceFrame.DecoratorType.MEMORY */);\n    }\n    static instance(opts = { forceNew: null }) {\n        const { forceNew } = opts;\n        if (!memoryInstance || forceNew) {\n            memoryInstance = new Memory();\n        }\n        return memoryInstance;\n    }\n    reset() {\n        this.helper.reset();\n    }\n    appendHeapProfile(profile, target) {\n        const helper = this.helper;\n        processNode(profile.head);\n        helper.scheduleUpdate();\n        function processNode(node) {\n            node.children.forEach(processNode);\n            if (!node.selfSize) {\n                return;\n            }\n            const script = Number(node.callFrame.scriptId) || node.callFrame.url;\n            if (!script) {\n                return;\n            }\n            const line = node.callFrame.lineNumber + 1;\n            helper.addLineData(target, script, line, node.selfSize);\n        }\n    }\n}\nexport class Helper {\n    type;\n    locationPool;\n    updateTimer;\n    lineData;\n    constructor(type) {\n        this.type = type;\n        this.locationPool = new Bindings.LiveLocation.LiveLocationPool();\n        this.updateTimer = null;\n        this.reset();\n    }\n    reset() {\n        // The second map uses string keys for script URLs and numbers for scriptId.\n        this.lineData = new Map();\n        this.scheduleUpdate();\n    }\n    addLineData(target, scriptIdOrUrl, line, data) {\n        let targetData = this.lineData.get(target);\n        if (!targetData) {\n            targetData = new Map();\n            this.lineData.set(target, targetData);\n        }\n        let scriptData = targetData.get(scriptIdOrUrl);\n        if (!scriptData) {\n            scriptData = new Map();\n            targetData.set(scriptIdOrUrl, scriptData);\n        }\n        scriptData.set(line, (scriptData.get(line) || 0) + data);\n    }\n    scheduleUpdate() {\n        if (this.updateTimer) {\n            return;\n        }\n        this.updateTimer = window.setTimeout(() => {\n            this.updateTimer = null;\n            void this.doUpdate();\n        }, 0);\n    }\n    async doUpdate() {\n        this.locationPool.disposeAll();\n        // Map from sources to line->value profile maps.\n        const decorationsBySource = new Map();\n        const pending = [];\n        for (const [target, scriptToLineMap] of this.lineData) {\n            const debuggerModel = target ? target.model(SDK.DebuggerModel.DebuggerModel) : null;\n            for (const [scriptIdOrUrl, lineToDataMap] of scriptToLineMap) {\n                // debuggerModel is null when the profile is loaded from file.\n                // Try to get UISourceCode by the URL in this case.\n                const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n                if (debuggerModel) {\n                    const workspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance();\n                    for (const lineToData of lineToDataMap) {\n                        const line = lineToData[0] - 1;\n                        const data = lineToData[1];\n                        const rawLocation = typeof scriptIdOrUrl === 'string' ?\n                            debuggerModel.createRawLocationByURL(scriptIdOrUrl, line, 0) :\n                            debuggerModel.createRawLocationByScriptId(String(scriptIdOrUrl), line, 0);\n                        if (rawLocation) {\n                            pending.push(workspaceBinding.rawLocationToUILocation(rawLocation).then(uiLocation => {\n                                if (uiLocation) {\n                                    let lineMap = decorationsBySource.get(uiLocation.uiSourceCode);\n                                    if (!lineMap) {\n                                        lineMap = new Map();\n                                        decorationsBySource.set(uiLocation.uiSourceCode, lineMap);\n                                    }\n                                    lineMap.set(uiLocation.lineNumber + 1, data);\n                                }\n                            }));\n                        }\n                    }\n                }\n                else if (typeof scriptIdOrUrl === 'string') {\n                    const uiSourceCode = workspace.uiSourceCodeForURL(scriptIdOrUrl);\n                    if (uiSourceCode) {\n                        decorationsBySource.set(uiSourceCode, lineToDataMap);\n                    }\n                }\n            }\n            await Promise.all(pending);\n            for (const [uiSourceCode, lineMap] of decorationsBySource) {\n                uiSourceCode.setDecorationData(this.type, lineMap);\n            }\n        }\n        for (const uiSourceCode of Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodes()) {\n            if (!decorationsBySource.has(uiSourceCode)) {\n                uiSourceCode.setDecorationData(this.type, undefined);\n            }\n        }\n    }\n}\n//# sourceMappingURL=LineLevelProfile.js.map"],"names":["performanceInstance","Performance","Helper","opts","forceNew","profile","target","nodesToGo","sampleDuration","nodes","node","j","lineInfo","line","time","i","scriptIdOrUrl","memoryInstance","Memory","helper","processNode","script","type","Bindings.LiveLocation.LiveLocationPool","data","targetData","scriptData","decorationsBySource","pending","scriptToLineMap","debuggerModel","SDK.DebuggerModel.DebuggerModel","lineToDataMap","workspace","Workspace.Workspace.WorkspaceImpl","workspaceBinding","Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding","lineToData","rawLocation","uiLocation","lineMap","uiSourceCode"],"mappings":"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"}