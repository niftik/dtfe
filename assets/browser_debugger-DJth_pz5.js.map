{"version":3,"file":"browser_debugger-DJth_pz5.js","sources":["../../panels/browser_debugger/categorizedBreakpointsSidebarPane.css.js","../../panels/browser_debugger/CategorizedBreakpointsSidebarPane.js","../../panels/browser_debugger/CSPViolationBreakpointsSidebarPane.js","../../panels/browser_debugger/domBreakpointsSidebarPane.css.js","../../panels/browser_debugger/DOMBreakpointsSidebarPane.js","../../panels/browser_debugger/EventListenerBreakpointsSidebarPane.js","../../panels/browser_debugger/ObjectEventListenersSidebarPane.js","../../panels/browser_debugger/xhrBreakpointsSidebarPane.css.js","../../panels/browser_debugger/XHRBreakpointsSidebarPane.js"],"sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(\n`/*\n * Copyright 2016 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n:host {\n  margin: 0;\n  padding: 2px 4px;\n  min-height: 18px;\n}\n\n.tree-outline {\n  padding: 0;\n}\n\n.tree-outline li {\n  margin-left: 14px;\n  user-select: text;\n}\n\n.tree-outline li.parent {\n  margin-left: 1px;\n}\n\n.tree-outline li:not(.parent)::before {\n  display: none;\n}\n\n.breakpoint-hit {\n  background-color: var(--sys-color-yellow-container);\n  color: var(--sys-color-on-yellow-container);\n}\n\n.breakpoint-hit .breakpoint-hit-marker {\n  background-color: var(--sys-color-yellow-container);\n  border-right: 3px solid var(--sys-color-yellow-outline);\n  color: var(--sys-color-on-yellow-container);\n  height: 100%;\n  left: 0;\n  margin-left: -30px;\n  position: absolute;\n  right: -4px;\n  z-index: -1;\n}\n\n.source-code[is=\"dt-checkbox\"] {\n  max-width: 100%;\n}\n\n/*# sourceURL=categorizedBreakpointsSidebarPane.css */\n`);\n\nexport default styles;\n","// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Sources from '../../panels/sources/sources.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport categorizedBreakpointsSidebarPaneStyles from './categorizedBreakpointsSidebarPane.css.js';\nconst UIStrings = {\n    /**\n     * @description Category of breakpoints\n     */\n    auctionWorklet: 'Ad Auction Worklet',\n    /**\n     *@description Text that refers to the animation of the web page\n     */\n    animation: 'Animation',\n    /**\n     *@description Screen reader description of a hit breakpoint in the Sources panel\n     */\n    breakpointHit: 'breakpoint hit',\n    /**\n     *@description Text in DOMDebugger Model\n     */\n    canvas: 'Canvas',\n    /**\n     *@description Text in DOMDebugger Model\n     */\n    clipboard: 'Clipboard',\n    /**\n     * @description Noun. Describes a group of DOM events (such as 'select' and 'submit') in this context.\n     */\n    control: 'Control',\n    /**\n     *@description Text that refers to device such as a phone\n     */\n    device: 'Device',\n    /**\n     *@description Text in DOMDebugger Model\n     */\n    domMutation: 'DOM Mutation',\n    /**\n     *@description Text in DOMDebugger Model\n     */\n    dragDrop: 'Drag / drop',\n    /**\n     *@description Title for a group of cities\n     */\n    geolocation: 'Geolocation',\n    /**\n     *@description Text in DOMDebugger Model\n     */\n    keyboard: 'Keyboard',\n    /**\n     *@description Text to load something\n     */\n    load: 'Load',\n    /**\n     *@description Text that appears on a button for the media resource type filter.\n     */\n    media: 'Media',\n    /**\n     *@description Text in DOMDebugger Model\n     */\n    mouse: 'Mouse',\n    /**\n     *@description Text in DOMDebugger Model\n     */\n    notification: 'Notification',\n    /**\n     *@description Text to parse something\n     */\n    parse: 'Parse',\n    /**\n     *@description Text in DOMDebugger Model\n     */\n    pictureinpicture: 'Picture-in-Picture',\n    /**\n     *@description Text in DOMDebugger Model\n     */\n    pointer: 'Pointer',\n    /**\n     *@description Label for a group of JavaScript files\n     */\n    script: 'Script',\n    /**\n     *@description Category of breakpoints\n     */\n    sharedStorageWorklet: 'Shared Storage Worklet',\n    /**\n     *@description Text in DOMDebugger Model\n     */\n    timer: 'Timer',\n    /**\n     *@description Text for the touch type to simulate on a device\n     */\n    touch: 'Touch',\n    /**\n     *@description Title for a category of breakpoints on Trusted Type violations\n     */\n    trustedTypeViolations: 'Trusted Type Violations',\n    /**\n     *@description Title of the WebAudio tool\n     */\n    webaudio: 'WebAudio',\n    /**\n     *@description Text in DOMDebugger Model\n     */\n    window: 'Window',\n    /**\n     *@description Text for the service worker type.\n     */\n    worker: 'Worker',\n    /**\n     *@description Text that appears on a button for the xhr resource type filter.\n     */\n    xhr: 'XHR',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/browser_debugger/CategorizedBreakpointsSidebarPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\nexport class CategorizedBreakpointsSidebarPane extends UI.Widget.VBox {\n    #categoriesTreeOutline;\n    #viewId;\n    #detailsPausedReason;\n    #categories;\n    #breakpoints;\n    #highlightedElement;\n    constructor(breakpoints, viewId, detailsPausedReason) {\n        super(true);\n        this.#categoriesTreeOutline = new UI.TreeOutline.TreeOutlineInShadow();\n        this.#categoriesTreeOutline.setShowSelectionOnKeyboardFocus(/* show */ true);\n        this.contentElement.appendChild(this.#categoriesTreeOutline.element);\n        this.#viewId = viewId;\n        this.#detailsPausedReason = detailsPausedReason;\n        const categories = new Set(breakpoints.map(bp => bp.category()));\n        const sortedCategories = [...categories].sort((a, b) => {\n            const categoryA = getLocalizedCategory(a);\n            const categoryB = getLocalizedCategory(b);\n            return categoryA.localeCompare(categoryB, i18n.DevToolsLocale.DevToolsLocale.instance().locale);\n        });\n        this.#categories = new Map();\n        for (const category of sortedCategories) {\n            this.createCategory(category);\n        }\n        if (sortedCategories.length > 0) {\n            const firstCategory = this.#categories.get(sortedCategories[0]);\n            if (firstCategory) {\n                firstCategory.element.select();\n            }\n        }\n        this.#breakpoints = new Map();\n        for (const breakpoint of breakpoints) {\n            this.createBreakpoint(breakpoint);\n        }\n        SDK.TargetManager.TargetManager.instance().addModelListener(SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.DebuggerPaused, this.update, this);\n        SDK.TargetManager.TargetManager.instance().addModelListener(SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.DebuggerResumed, this.update, this);\n        UI.Context.Context.instance().addFlavorChangeListener(SDK.Target.Target, this.update, this);\n    }\n    get categories() {\n        return this.#categories;\n    }\n    get breakpoints() {\n        return this.#breakpoints;\n    }\n    focus() {\n        this.#categoriesTreeOutline.forceSelect();\n    }\n    handleSpaceKeyEventOnBreakpoint(event, breakpoint) {\n        if (event && event.key === ' ') {\n            if (breakpoint) {\n                breakpoint.checkbox.click();\n            }\n            event.consume(true);\n        }\n    }\n    createCategory(name) {\n        const labelNode = UI.UIUtils.CheckboxLabel.create(getLocalizedCategory(name), undefined, undefined, name, /* small */ true);\n        labelNode.checkboxElement.addEventListener('click', this.categoryCheckboxClicked.bind(this, name), true);\n        labelNode.checkboxElement.tabIndex = -1;\n        const treeElement = new UI.TreeOutline.TreeElement(labelNode, undefined, name);\n        treeElement.listItemElement.addEventListener('keydown', event => {\n            this.handleSpaceKeyEventOnBreakpoint(event, this.#categories.get(name));\n        });\n        labelNode.checkboxElement.addEventListener('keydown', event => {\n            treeElement.listItemElement.focus();\n            this.handleSpaceKeyEventOnBreakpoint(event, this.#categories.get(name));\n        });\n        UI.ARIAUtils.setChecked(treeElement.listItemElement, false);\n        this.#categoriesTreeOutline.appendChild(treeElement);\n        this.#categories.set(name, { element: treeElement, checkbox: labelNode.checkboxElement });\n    }\n    createBreakpoint(breakpoint) {\n        const labelNode = UI.UIUtils.CheckboxLabel.create(Sources.CategorizedBreakpointL10n.getLocalizedBreakpointName(breakpoint.name), undefined, undefined, Platform.StringUtilities.toKebabCase(breakpoint.name), /* small */ true);\n        labelNode.classList.add('source-code');\n        labelNode.checkboxElement.addEventListener('click', this.breakpointCheckboxClicked.bind(this, breakpoint), true);\n        labelNode.checkboxElement.tabIndex = -1;\n        const treeElement = new UI.TreeOutline.TreeElement(labelNode, undefined, Platform.StringUtilities.toKebabCase(breakpoint.name));\n        treeElement.listItemElement.addEventListener('keydown', event => {\n            this.handleSpaceKeyEventOnBreakpoint(event, this.#breakpoints.get(breakpoint));\n        });\n        labelNode.checkboxElement.addEventListener('keydown', event => {\n            treeElement.listItemElement.focus();\n            this.handleSpaceKeyEventOnBreakpoint(event, this.#breakpoints.get(breakpoint));\n        });\n        UI.ARIAUtils.setChecked(treeElement.listItemElement, false);\n        treeElement.listItemElement.createChild('div', 'breakpoint-hit-marker');\n        const category = this.#categories.get(breakpoint.category());\n        if (category) {\n            category.element.appendChild(treeElement);\n        }\n        // Better to return that to produce a side-effect\n        this.#breakpoints.set(breakpoint, { element: treeElement, checkbox: labelNode.checkboxElement });\n    }\n    getBreakpointFromPausedDetails(_details) {\n        return null;\n    }\n    update() {\n        const target = UI.Context.Context.instance().flavor(SDK.Target.Target);\n        const debuggerModel = target ? target.model(SDK.DebuggerModel.DebuggerModel) : null;\n        const details = debuggerModel ? debuggerModel.debuggerPausedDetails() : null;\n        if (!details || details.reason !== this.#detailsPausedReason || !details.auxData) {\n            if (this.#highlightedElement) {\n                UI.ARIAUtils.setDescription(this.#highlightedElement, '');\n                this.#highlightedElement.classList.remove('breakpoint-hit');\n                this.#highlightedElement = undefined;\n            }\n            return;\n        }\n        const breakpoint = this.getBreakpointFromPausedDetails(details);\n        if (!breakpoint) {\n            return;\n        }\n        void UI.ViewManager.ViewManager.instance().showView(this.#viewId);\n        const category = this.#categories.get(breakpoint.category());\n        if (category) {\n            category.element.expand();\n        }\n        const matchingBreakpoint = this.#breakpoints.get(breakpoint);\n        if (matchingBreakpoint) {\n            this.#highlightedElement = matchingBreakpoint.element.listItemElement;\n            UI.ARIAUtils.setDescription(this.#highlightedElement, i18nString(UIStrings.breakpointHit));\n            this.#highlightedElement.classList.add('breakpoint-hit');\n        }\n    }\n    // Probably can be kept although eventListener does not call this._breakpointCheckboxClicke\n    categoryCheckboxClicked(category) {\n        const item = this.#categories.get(category);\n        if (!item) {\n            return;\n        }\n        const enabled = item.checkbox.checked;\n        UI.ARIAUtils.setChecked(item.element.listItemElement, enabled);\n        for (const [breakpoint, treeItem] of this.#breakpoints) {\n            if (breakpoint.category() === category) {\n                const matchingBreakpoint = this.#breakpoints.get(breakpoint);\n                if (matchingBreakpoint) {\n                    matchingBreakpoint.checkbox.checked = enabled;\n                    this.toggleBreakpoint(breakpoint, enabled);\n                    UI.ARIAUtils.setChecked(treeItem.element.listItemElement, enabled);\n                }\n            }\n        }\n    }\n    toggleBreakpoint(breakpoint, enabled) {\n        breakpoint.setEnabled(enabled);\n    }\n    breakpointCheckboxClicked(breakpoint) {\n        const item = this.#breakpoints.get(breakpoint);\n        if (!item) {\n            return;\n        }\n        this.toggleBreakpoint(breakpoint, item.checkbox.checked);\n        UI.ARIAUtils.setChecked(item.element.listItemElement, item.checkbox.checked);\n        // Put the rest in a separate function\n        let hasEnabled = false;\n        let hasDisabled = false;\n        for (const other of this.#breakpoints.keys()) {\n            if (other.category() === breakpoint.category()) {\n                if (other.enabled()) {\n                    hasEnabled = true;\n                }\n                else {\n                    hasDisabled = true;\n                }\n            }\n        }\n        const category = this.#categories.get(breakpoint.category());\n        if (!category) {\n            return;\n        }\n        category.checkbox.checked = hasEnabled;\n        category.checkbox.indeterminate = hasEnabled && hasDisabled;\n        if (category.checkbox.indeterminate) {\n            UI.ARIAUtils.setCheckboxAsIndeterminate(category.element.listItemElement);\n        }\n        else {\n            UI.ARIAUtils.setChecked(category.element.listItemElement, hasEnabled);\n        }\n    }\n    wasShown() {\n        super.wasShown();\n        this.#categoriesTreeOutline.registerCSSFiles([categorizedBreakpointsSidebarPaneStyles]);\n    }\n}\nconst LOCALIZED_CATEGORIES = {\n    [\"animation\" /* SDK.CategorizedBreakpoint.Category.ANIMATION */]: i18nLazyString(UIStrings.animation),\n    [\"auction-worklet\" /* SDK.CategorizedBreakpoint.Category.AUCTION_WORKLET */]: i18nLazyString(UIStrings.auctionWorklet),\n    [\"canvas\" /* SDK.CategorizedBreakpoint.Category.CANVAS */]: i18nLazyString(UIStrings.canvas),\n    [\"clipboard\" /* SDK.CategorizedBreakpoint.Category.CLIPBOARD */]: i18nLazyString(UIStrings.clipboard),\n    [\"control\" /* SDK.CategorizedBreakpoint.Category.CONTROL */]: i18nLazyString(UIStrings.control),\n    [\"device\" /* SDK.CategorizedBreakpoint.Category.DEVICE */]: i18nLazyString(UIStrings.device),\n    [\"dom-mutation\" /* SDK.CategorizedBreakpoint.Category.DOM_MUTATION */]: i18nLazyString(UIStrings.domMutation),\n    [\"drag-drop\" /* SDK.CategorizedBreakpoint.Category.DRAG_DROP */]: i18nLazyString(UIStrings.dragDrop),\n    [\"geolocation\" /* SDK.CategorizedBreakpoint.Category.GEOLOCATION */]: i18nLazyString(UIStrings.geolocation),\n    [\"keyboard\" /* SDK.CategorizedBreakpoint.Category.KEYBOARD */]: i18nLazyString(UIStrings.keyboard),\n    [\"load\" /* SDK.CategorizedBreakpoint.Category.LOAD */]: i18nLazyString(UIStrings.load),\n    [\"media\" /* SDK.CategorizedBreakpoint.Category.MEDIA */]: i18nLazyString(UIStrings.media),\n    [\"mouse\" /* SDK.CategorizedBreakpoint.Category.MOUSE */]: i18nLazyString(UIStrings.mouse),\n    [\"notification\" /* SDK.CategorizedBreakpoint.Category.NOTIFICATION */]: i18nLazyString(UIStrings.notification),\n    [\"parse\" /* SDK.CategorizedBreakpoint.Category.PARSE */]: i18nLazyString(UIStrings.parse),\n    [\"picture-in-picture\" /* SDK.CategorizedBreakpoint.Category.PICTURE_IN_PICTURE */]: i18nLazyString(UIStrings.pictureinpicture),\n    [\"pointer\" /* SDK.CategorizedBreakpoint.Category.POINTER */]: i18nLazyString(UIStrings.pointer),\n    [\"script\" /* SDK.CategorizedBreakpoint.Category.SCRIPT */]: i18nLazyString(UIStrings.script),\n    [\"shared-storage-worklet\" /* SDK.CategorizedBreakpoint.Category.SHARED_STORAGE_WORKLET */]: i18nLazyString(UIStrings.sharedStorageWorklet),\n    [\"timer\" /* SDK.CategorizedBreakpoint.Category.TIMER */]: i18nLazyString(UIStrings.timer),\n    [\"touch\" /* SDK.CategorizedBreakpoint.Category.TOUCH */]: i18nLazyString(UIStrings.touch),\n    [\"trusted-type-violation\" /* SDK.CategorizedBreakpoint.Category.TRUSTED_TYPE_VIOLATION */]: i18nLazyString(UIStrings.trustedTypeViolations),\n    [\"web-audio\" /* SDK.CategorizedBreakpoint.Category.WEB_AUDIO */]: i18nLazyString(UIStrings.webaudio),\n    [\"window\" /* SDK.CategorizedBreakpoint.Category.WINDOW */]: i18nLazyString(UIStrings.window),\n    [\"worker\" /* SDK.CategorizedBreakpoint.Category.WORKER */]: i18nLazyString(UIStrings.worker),\n    [\"xhr\" /* SDK.CategorizedBreakpoint.Category.XHR */]: i18nLazyString(UIStrings.xhr),\n};\nfunction getLocalizedCategory(category) {\n    return LOCALIZED_CATEGORIES[category]();\n}\n//# sourceMappingURL=CategorizedBreakpointsSidebarPane.js.map","// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport { CategorizedBreakpointsSidebarPane } from './CategorizedBreakpointsSidebarPane.js';\nexport class CSPViolationBreakpointsSidebarPane extends CategorizedBreakpointsSidebarPane {\n    constructor() {\n        const breakpoints = SDK.DOMDebuggerModel.DOMDebuggerManager.instance().cspViolationBreakpoints();\n        super(breakpoints, 'sources.csp-violation-breakpoints', \"CSPViolation\" /* Protocol.Debugger.PausedEventReason.CSPViolation */);\n        this.contentElement.setAttribute('jslog', `${VisualLogging.section('sources.csp-violation-breakpoints')}`);\n    }\n    getBreakpointFromPausedDetails(details) {\n        const breakpointType = details.auxData && details.auxData['violationType'] ? details.auxData['violationType'] : '';\n        const breakpoints = SDK.DOMDebuggerModel.DOMDebuggerManager.instance().cspViolationBreakpoints();\n        const breakpoint = breakpoints.find(x => x.type() === breakpointType);\n        return breakpoint ? breakpoint : null;\n    }\n    toggleBreakpoint(breakpoint, enabled) {\n        breakpoint.setEnabled(enabled);\n        SDK.DOMDebuggerModel.DOMDebuggerManager.instance().updateCSPViolationBreakpoints();\n    }\n}\n//# sourceMappingURL=CSPViolationBreakpointsSidebarPane.js.map","// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(\n`/*\n * Copyright 2017 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.breakpoint-list {\n  padding-bottom: 3px;\n}\n\n.breakpoint-list .dom-breakpoint > div {\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.breakpoint-entry {\n  display: flex;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  padding: 2px 0;\n}\n\n.breakpoint-entry:focus-visible {\n  background-color: var(--sys-color-tonal-container);\n}\n\n.breakpoint-hit {\n  background-color: var(--sys-color-neutral-container);\n  color: var(--sys-color-on-surface);\n}\n\n@media (forced-colors: active) {\n  .breakpoint-entry:focus-visible,\n  .breakpoint-list .breakpoint-entry:hover {\n    forced-color-adjust: none;\n    background-color: Highlight;\n  }\n\n  .breakpoint-entry:focus-visible *,\n  .breakpoint-list .breakpoint-entry:hover * {\n    color: HighlightText;\n  }\n}\n\n/*# sourceURL=domBreakpointsSidebarPane.css */\n`);\n\nexport default styles;\n","/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport * as Sources from '../sources/sources.js';\nimport domBreakpointsSidebarPaneStyles from './domBreakpointsSidebarPane.css.js';\nconst UIStrings = {\n    /**\n     *@description Text to indicate there are no breakpoints\n     */\n    noBreakpoints: 'No breakpoints',\n    /**\n     *@description Accessibility label for the DOM breakpoints list in the Sources panel\n     */\n    domBreakpointsList: 'DOM Breakpoints list',\n    /**\n     *@description Text with two placeholders separated by a colon\n     *@example {Node removed} PH1\n     *@example {div#id1} PH2\n     */\n    sS: '{PH1}: {PH2}',\n    /**\n     *@description Text with three placeholders separated by a colon and a comma\n     *@example {Node removed} PH1\n     *@example {div#id1} PH2\n     *@example {checked} PH3\n     */\n    sSS: '{PH1}: {PH2}, {PH3}',\n    /**\n     *@description Text exposed to screen readers on checked items.\n     */\n    checked: 'checked',\n    /**\n     *@description Accessible text exposed to screen readers when the screen reader encounters an unchecked checkbox.\n     */\n    unchecked: 'unchecked',\n    /**\n     *@description Accessibility label for hit breakpoints in the Sources panel.\n     *@example {checked} PH1\n     */\n    sBreakpointHit: '{PH1} breakpoint hit',\n    /**\n     *@description Screen reader description of a hit breakpoint in the Sources panel\n     */\n    breakpointHit: 'breakpoint hit',\n    /**\n     *@description A context menu item in the DOM Breakpoints sidebar that reveals the node on which the current breakpoint is set.\n     */\n    revealDomNodeInElementsPanel: 'Reveal DOM node in Elements panel',\n    /**\n     *@description Text to remove a breakpoint\n     */\n    removeBreakpoint: 'Remove breakpoint',\n    /**\n     *@description A context menu item in the DOMBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n     */\n    removeAllDomBreakpoints: 'Remove all DOM breakpoints',\n    /**\n     *@description Text in DOMBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n     */\n    subtreeModified: 'Subtree modified',\n    /**\n     *@description Text in DOMBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n     */\n    attributeModified: 'Attribute modified',\n    /**\n     *@description Text in DOMBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n     */\n    nodeRemoved: 'Node removed',\n    /**\n     *@description Entry in context menu of the elements pane, allowing developers to select a DOM\n     * breakpoint for the element that they have right-clicked on. Short for the action 'set a\n     * breakpoint on this DOM Element'. A breakpoint pauses the website when the code reaches a\n     * specified line, or when a specific action happen (in this case, when the DOM Element is\n     * modified).\n     */\n    breakOn: 'Break on',\n    /**\n     *@description Screen reader description for removing a DOM breakpoint.\n     */\n    breakpointRemoved: 'Breakpoint removed',\n    /**\n     *@description Screen reader description for setting a DOM breakpoint.\n     */\n    breakpointSet: 'Breakpoint set',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/browser_debugger/DOMBreakpointsSidebarPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\nlet domBreakpointsSidebarPaneInstance;\nexport class DOMBreakpointsSidebarPane extends UI.Widget.VBox {\n    elementToCheckboxes;\n    #emptyElement;\n    #breakpoints;\n    #list;\n    #highlightedBreakpoint;\n    constructor() {\n        super(true);\n        this.elementToCheckboxes = new WeakMap();\n        this.contentElement.setAttribute('jslog', `${VisualLogging.section('sources.dom-breakpoints').track({ resize: true })}`);\n        this.#emptyElement = this.contentElement.createChild('div', 'gray-info-message');\n        this.#emptyElement.textContent = i18nString(UIStrings.noBreakpoints);\n        this.#breakpoints = new UI.ListModel.ListModel();\n        this.#list = new UI.ListControl.ListControl(this.#breakpoints, this, UI.ListControl.ListMode.NonViewport);\n        this.contentElement.appendChild(this.#list.element);\n        this.#list.element.classList.add('breakpoint-list', 'hidden');\n        UI.ARIAUtils.markAsList(this.#list.element);\n        UI.ARIAUtils.setLabel(this.#list.element, i18nString(UIStrings.domBreakpointsList));\n        this.#emptyElement.tabIndex = -1;\n        SDK.TargetManager.TargetManager.instance().addModelListener(SDK.DOMDebuggerModel.DOMDebuggerModel, \"DOMBreakpointAdded\" /* SDK.DOMDebuggerModel.Events.DOM_BREAKPOINT_ADDED */, this.breakpointAdded, this);\n        SDK.TargetManager.TargetManager.instance().addModelListener(SDK.DOMDebuggerModel.DOMDebuggerModel, \"DOMBreakpointToggled\" /* SDK.DOMDebuggerModel.Events.DOM_BREAKPOINT_TOGGLED */, this.breakpointToggled, this);\n        SDK.TargetManager.TargetManager.instance().addModelListener(SDK.DOMDebuggerModel.DOMDebuggerModel, \"DOMBreakpointsRemoved\" /* SDK.DOMDebuggerModel.Events.DOM_BREAKPOINTS_REMOVED */, this.breakpointsRemoved, this);\n        for (const domDebuggerModel of SDK.TargetManager.TargetManager.instance().models(SDK.DOMDebuggerModel.DOMDebuggerModel)) {\n            domDebuggerModel.retrieveDOMBreakpoints();\n            for (const breakpoint of domDebuggerModel.domBreakpoints()) {\n                this.addBreakpoint(breakpoint);\n            }\n        }\n        this.#highlightedBreakpoint = null;\n        this.update();\n    }\n    static instance() {\n        if (!domBreakpointsSidebarPaneInstance) {\n            domBreakpointsSidebarPaneInstance = new DOMBreakpointsSidebarPane();\n        }\n        return domBreakpointsSidebarPaneInstance;\n    }\n    createElementForItem(item) {\n        const element = document.createElement('div');\n        element.classList.add('breakpoint-entry');\n        element.setAttribute('jslog', `${VisualLogging.domBreakpoint().context(item.type).track({ keydown: 'ArrowUp|ArrowDown|PageUp|PageDown' })}`);\n        element.addEventListener('contextmenu', this.contextMenu.bind(this, item), true);\n        UI.ARIAUtils.markAsListitem(element);\n        element.tabIndex = -1;\n        const checkboxLabel = UI.UIUtils.CheckboxLabel.create(/* title */ undefined, item.enabled);\n        const checkboxElement = checkboxLabel.checkboxElement;\n        checkboxElement.addEventListener('click', this.checkboxClicked.bind(this, item), false);\n        checkboxElement.tabIndex = -1;\n        this.elementToCheckboxes.set(element, checkboxElement);\n        element.appendChild(checkboxLabel);\n        element.addEventListener('keydown', event => {\n            if (event.key === ' ') {\n                checkboxLabel.checkboxElement.click();\n                event.consume(true);\n            }\n        });\n        const labelElement = document.createElement('div');\n        labelElement.classList.add('dom-breakpoint');\n        element.appendChild(labelElement);\n        const description = document.createElement('div');\n        const breakpointTypeLabel = BreakpointTypeLabels.get(item.type);\n        description.textContent = breakpointTypeLabel ? breakpointTypeLabel() : null;\n        const breakpointTypeText = breakpointTypeLabel ? breakpointTypeLabel() : '';\n        UI.ARIAUtils.setLabel(checkboxElement, breakpointTypeText);\n        checkboxElement.setAttribute('jslog', `${VisualLogging.toggle().track({ click: true })}`);\n        const checkedStateText = item.enabled ? i18nString(UIStrings.checked) : i18nString(UIStrings.unchecked);\n        const linkifiedNode = document.createElement('monospace');\n        linkifiedNode.style.display = 'block';\n        labelElement.appendChild(linkifiedNode);\n        void Common.Linkifier.Linkifier.linkify(item.node, { preventKeyboardFocus: true, tooltip: undefined })\n            .then(linkified => {\n            linkifiedNode.appendChild(linkified);\n            // Give the checkbox an aria-label as it is required for all form element\n            UI.ARIAUtils.setLabel(checkboxElement, i18nString(UIStrings.sS, { PH1: breakpointTypeText, PH2: linkified.deepTextContent() }));\n            // The parent list element is the one that actually gets focused.\n            // Assign it an aria-label with complete information for the screen reader to read out properly\n            UI.ARIAUtils.setLabel(element, i18nString(UIStrings.sSS, { PH1: breakpointTypeText, PH2: linkified.deepTextContent(), PH3: checkedStateText }));\n        });\n        labelElement.appendChild(description);\n        if (item === this.#highlightedBreakpoint) {\n            element.classList.add('breakpoint-hit');\n            UI.ARIAUtils.setDescription(element, i18nString(UIStrings.sBreakpointHit, { PH1: checkedStateText }));\n            UI.ARIAUtils.setDescription(checkboxElement, i18nString(UIStrings.breakpointHit));\n        }\n        else {\n            UI.ARIAUtils.setDescription(element, checkedStateText);\n        }\n        this.#emptyElement.classList.add('hidden');\n        this.#list.element.classList.remove('hidden');\n        return element;\n    }\n    heightForItem(_item) {\n        return 0;\n    }\n    isItemSelectable(_item) {\n        return true;\n    }\n    updateSelectedItemARIA(_fromElement, _toElement) {\n        return true;\n    }\n    selectedItemChanged(from, to, fromElement, toElement) {\n        if (fromElement) {\n            fromElement.tabIndex = -1;\n        }\n        if (toElement) {\n            this.setDefaultFocusedElement(toElement);\n            toElement.tabIndex = 0;\n            if (this.hasFocus()) {\n                toElement.focus();\n            }\n        }\n    }\n    breakpointAdded(event) {\n        this.addBreakpoint(event.data);\n    }\n    breakpointToggled(event) {\n        const hadFocus = this.hasFocus();\n        const breakpoint = event.data;\n        this.#list.refreshItem(breakpoint);\n        if (hadFocus) {\n            this.focus();\n        }\n    }\n    breakpointsRemoved(event) {\n        const hadFocus = this.hasFocus();\n        const breakpoints = event.data;\n        let lastIndex = -1;\n        for (const breakpoint of breakpoints) {\n            const index = this.#breakpoints.indexOf(breakpoint);\n            if (index >= 0) {\n                this.#breakpoints.remove(index);\n                lastIndex = index;\n            }\n        }\n        if (this.#breakpoints.length === 0) {\n            this.#emptyElement.classList.remove('hidden');\n            this.setDefaultFocusedElement(this.#emptyElement);\n            this.#list.element.classList.add('hidden');\n        }\n        else if (lastIndex >= 0) {\n            const breakpointToSelect = this.#breakpoints.at(lastIndex);\n            if (breakpointToSelect) {\n                this.#list.selectItem(breakpointToSelect);\n            }\n        }\n        if (hadFocus) {\n            this.focus();\n        }\n    }\n    addBreakpoint(breakpoint) {\n        this.#breakpoints.insertWithComparator(breakpoint, (breakpointA, breakpointB) => {\n            if (breakpointA.type > breakpointB.type) {\n                return -1;\n            }\n            if (breakpointA.type < breakpointB.type) {\n                return 1;\n            }\n            return 0;\n        });\n        if (!this.#list.selectedItem() || !this.hasFocus()) {\n            this.#list.selectItem(this.#breakpoints.at(0));\n        }\n    }\n    contextMenu(breakpoint, event) {\n        const contextMenu = new UI.ContextMenu.ContextMenu(event);\n        contextMenu.defaultSection().appendItem(i18nString(UIStrings.revealDomNodeInElementsPanel), () => Common.Revealer.reveal(breakpoint.node), { jslogContext: 'reveal-in-elements' });\n        contextMenu.defaultSection().appendItem(i18nString(UIStrings.removeBreakpoint), () => {\n            breakpoint.domDebuggerModel.removeDOMBreakpoint(breakpoint.node, breakpoint.type);\n        }, { jslogContext: 'remove-breakpoint' });\n        contextMenu.defaultSection().appendItem(i18nString(UIStrings.removeAllDomBreakpoints), () => {\n            breakpoint.domDebuggerModel.removeAllDOMBreakpoints();\n        }, { jslogContext: 'remove-all-dom-breakpoints' });\n        void contextMenu.show();\n    }\n    checkboxClicked(breakpoint, event) {\n        breakpoint.domDebuggerModel.toggleDOMBreakpoint(breakpoint, event.target ? event.target.checked : false);\n    }\n    flavorChanged(_object) {\n        this.update();\n    }\n    update() {\n        const details = UI.Context.Context.instance().flavor(SDK.DebuggerModel.DebuggerPausedDetails);\n        if (this.#highlightedBreakpoint) {\n            const oldHighlightedBreakpoint = this.#highlightedBreakpoint;\n            this.#highlightedBreakpoint = null;\n            this.#list.refreshItem(oldHighlightedBreakpoint);\n        }\n        if (!details || !details.auxData || details.reason !== \"DOM\" /* Protocol.Debugger.PausedEventReason.DOM */) {\n            return;\n        }\n        const domDebuggerModel = details.debuggerModel.target().model(SDK.DOMDebuggerModel.DOMDebuggerModel);\n        if (!domDebuggerModel) {\n            return;\n        }\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const data = domDebuggerModel.resolveDOMBreakpointData(details.auxData);\n        if (!data) {\n            return;\n        }\n        for (const breakpoint of this.#breakpoints) {\n            if (breakpoint.node === data.node && breakpoint.type === data.type) {\n                this.#highlightedBreakpoint = breakpoint;\n            }\n        }\n        if (this.#highlightedBreakpoint) {\n            this.#list.refreshItem(this.#highlightedBreakpoint);\n        }\n        void UI.ViewManager.ViewManager.instance().showView('sources.dom-breakpoints');\n    }\n    wasShown() {\n        super.wasShown();\n        this.registerCSSFiles([domBreakpointsSidebarPaneStyles]);\n    }\n}\nconst BreakpointTypeLabels = new Map([\n    [\"subtree-modified\" /* Protocol.DOMDebugger.DOMBreakpointType.SubtreeModified */, i18nLazyString(UIStrings.subtreeModified)],\n    [\"attribute-modified\" /* Protocol.DOMDebugger.DOMBreakpointType.AttributeModified */, i18nLazyString(UIStrings.attributeModified)],\n    [\"node-removed\" /* Protocol.DOMDebugger.DOMBreakpointType.NodeRemoved */, i18nLazyString(UIStrings.nodeRemoved)],\n]);\nexport class ContextMenuProvider {\n    appendApplicableItems(event, contextMenu, node) {\n        if (node.pseudoType()) {\n            return;\n        }\n        const domDebuggerModel = node.domModel().target().model(SDK.DOMDebuggerModel.DOMDebuggerModel);\n        if (!domDebuggerModel) {\n            return;\n        }\n        function toggleBreakpoint(type) {\n            if (!domDebuggerModel) {\n                return;\n            }\n            const label = Sources.DebuggerPausedMessage.BreakpointTypeNouns.get(type);\n            const labelString = label ? label() : '';\n            if (domDebuggerModel.hasDOMBreakpoint(node, type)) {\n                domDebuggerModel.removeDOMBreakpoint(node, type);\n                UI.ARIAUtils.alert(`${i18nString(UIStrings.breakpointRemoved)}: ${labelString}`);\n            }\n            else {\n                domDebuggerModel.setDOMBreakpoint(node, type);\n                UI.ARIAUtils.alert(`${i18nString(UIStrings.breakpointSet)}: ${labelString}`);\n            }\n        }\n        const breakpointsMenu = contextMenu.debugSection().appendSubMenuItem(i18nString(UIStrings.breakOn), false, 'break-on');\n        const allBreakpointTypes = {\n            SubtreeModified: \"subtree-modified\" /* Protocol.DOMDebugger.DOMBreakpointType.SubtreeModified */,\n            AttributeModified: \"attribute-modified\" /* Protocol.DOMDebugger.DOMBreakpointType.AttributeModified */,\n            NodeRemoved: \"node-removed\" /* Protocol.DOMDebugger.DOMBreakpointType.NodeRemoved */,\n        };\n        for (const type of Object.values(allBreakpointTypes)) {\n            const label = Sources.DebuggerPausedMessage.BreakpointTypeNouns.get(type);\n            if (label) {\n                breakpointsMenu.defaultSection().appendCheckboxItem(label(), toggleBreakpoint.bind(null, type), { checked: domDebuggerModel.hasDOMBreakpoint(node, type), jslogContext: type });\n            }\n        }\n    }\n}\n//# sourceMappingURL=DOMBreakpointsSidebarPane.js.map","// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport { CategorizedBreakpointsSidebarPane } from './CategorizedBreakpointsSidebarPane.js';\nlet eventListenerBreakpointsSidebarPaneInstance;\nexport class EventListenerBreakpointsSidebarPane extends CategorizedBreakpointsSidebarPane {\n    constructor() {\n        let breakpoints = SDK.DOMDebuggerModel.DOMDebuggerManager.instance().eventListenerBreakpoints();\n        const nonDomBreakpoints = SDK.EventBreakpointsModel.EventBreakpointsManager.instance().eventListenerBreakpoints();\n        breakpoints = breakpoints.concat(nonDomBreakpoints);\n        super(breakpoints, 'sources.event-listener-breakpoints', \"EventListener\" /* Protocol.Debugger.PausedEventReason.EventListener */);\n        this.contentElement.setAttribute('jslog', `${VisualLogging.section('sources.event-listener-breakpoints')}`);\n    }\n    static instance() {\n        if (!eventListenerBreakpointsSidebarPaneInstance) {\n            eventListenerBreakpointsSidebarPaneInstance = new EventListenerBreakpointsSidebarPane();\n        }\n        return eventListenerBreakpointsSidebarPaneInstance;\n    }\n    getBreakpointFromPausedDetails(details) {\n        const auxData = details.auxData;\n        const domBreakpoint = SDK.DOMDebuggerModel.DOMDebuggerManager.instance().resolveEventListenerBreakpoint(auxData);\n        if (domBreakpoint) {\n            return domBreakpoint;\n        }\n        return SDK.EventBreakpointsModel.EventBreakpointsManager.instance().resolveEventListenerBreakpoint(auxData);\n    }\n}\n//# sourceMappingURL=EventListenerBreakpointsSidebarPane.js.map","// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport * as EventListeners from '../event_listeners/event_listeners.js';\nexport class ObjectEventListenersSidebarPane extends UI.ThrottledWidget.ThrottledWidget {\n    #lastRequestedContext;\n    // TODO(bmeurer): This is only public for web tests.\n    eventListenersView;\n    constructor() {\n        super();\n        this.contentElement.setAttribute('jslog', `${VisualLogging.section('sources.global-listeners')}`);\n        this.eventListenersView = new EventListeners.EventListenersView.EventListenersView(this.update.bind(this), /* enableDefaultTreeFocus */ true);\n        this.eventListenersView.show(this.element);\n        this.setDefaultFocusedChild(this.eventListenersView);\n        this.update();\n    }\n    toolbarItems() {\n        const refreshButton = UI.Toolbar.Toolbar.createActionButtonForId('browser-debugger.refresh-global-event-listeners');\n        refreshButton.setSize(\"SMALL\" /* Buttons.Button.Size.SMALL */);\n        return [refreshButton];\n    }\n    async doUpdate() {\n        if (this.#lastRequestedContext) {\n            this.#lastRequestedContext.runtimeModel.releaseObjectGroup(objectGroupName);\n            this.#lastRequestedContext = undefined;\n        }\n        const windowObjects = [];\n        const executionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n        if (executionContext) {\n            this.#lastRequestedContext = executionContext;\n            const result = await executionContext.evaluate({\n                expression: 'self',\n                objectGroup: objectGroupName,\n                includeCommandLineAPI: false,\n                silent: true,\n                returnByValue: false,\n                generatePreview: false,\n            }, \n            /* userGesture */ false, \n            /* awaitPromise */ false);\n            if (!('error' in result) && !result.exceptionDetails) {\n                windowObjects.push(result.object);\n            }\n        }\n        await this.eventListenersView.addObjects(windowObjects);\n    }\n    wasShown() {\n        super.wasShown();\n        UI.Context.Context.instance().addFlavorChangeListener(SDK.RuntimeModel.ExecutionContext, this.update, this);\n        UI.Context.Context.instance().setFlavor(ObjectEventListenersSidebarPane, this);\n    }\n    willHide() {\n        UI.Context.Context.instance().setFlavor(ObjectEventListenersSidebarPane, null);\n        UI.Context.Context.instance().removeFlavorChangeListener(SDK.RuntimeModel.ExecutionContext, this.update, this);\n        super.willHide();\n        if (this.#lastRequestedContext) {\n            this.#lastRequestedContext.runtimeModel.releaseObjectGroup(objectGroupName);\n            this.#lastRequestedContext = undefined;\n        }\n    }\n}\nexport class ActionDelegate {\n    handleAction(context, actionId) {\n        switch (actionId) {\n            case 'browser-debugger.refresh-global-event-listeners': {\n                const eventListenersSidebarPane = context.flavor(ObjectEventListenersSidebarPane);\n                if (eventListenersSidebarPane) {\n                    eventListenersSidebarPane.update();\n                    return true;\n                }\n                return false;\n            }\n        }\n        return false;\n    }\n}\nexport const objectGroupName = 'object-event-listeners-sidebar-pane';\n//# sourceMappingURL=ObjectEventListenersSidebarPane.js.map","// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(\n`/*\n * Copyright 2017 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.breakpoint-list {\n  padding-bottom: 3px;\n}\n\n.breakpoint-list .editing.being-edited {\n  overflow: hidden;\n  white-space: nowrap;\n}\n\n.breakpoint-condition {\n  display: block;\n  margin: 4px 8px 4px 23px;\n}\n\n.breakpoint-condition-input {\n  display: block;\n  margin-left: 0;\n  margin-right: 0;\n  border: 1px solid var(--sys-color-neutral-outline);\n  border-radius: 4px;\n\n  &:focus {\n    outline: 5px auto var(--sys-color-tonal-outline);\n    box-shadow: none;\n  }\n}\n\n.breakpoint-entry {\n  white-space: nowrap;\n  padding: 2px 0;\n}\n\n.breakpoint-list .breakpoint-entry:focus-visible {\n  background-color: var(--sys-color-tonal-container);\n}\n\n.breakpoint-entry [is=\"dt-checkbox\"] {\n  max-width: 100%;\n}\n\n.breakpoint-hit {\n  background-color: var(--sys-color-yellow-container);\n  border-right: 3px solid var(--sys-color-yellow-outline);\n  color: var(--sys-color-on-yellow-container);\n}\n\n@media (forced-colors: active) {\n  .breakpoint-list .breakpoint-entry:hover,\n  .breakpoint-list .breakpoint-entry:focus-visible {\n    forced-color-adjust: none;\n    background-color: Highlight;\n  }\n\n  .breakpoint-list .breakpoint-entry:hover *,\n  .breakpoint-list .breakpoint-entry:focus-visible * {\n    color: HighlightText;\n  }\n}\n\n/*# sourceURL=xhrBreakpointsSidebarPane.css */\n`);\n\nexport default styles;\n","// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport xhrBreakpointsSidebarPaneStyles from './xhrBreakpointsSidebarPane.css.js';\nconst UIStrings = {\n    /**\n     *@description Title of the 'XHR/fetch Breakpoints' tool in the bottom sidebar of the Sources tool\n     */\n    xhrfetchBreakpoints: 'XHR/fetch Breakpoints',\n    /**\n     *@description Text to indicate there are no breakpoints\n     */\n    noBreakpoints: 'No breakpoints',\n    /**\n     *@description Label for a button in the Sources panel that opens the input field to create a new XHR/fetch breakpoint.\n     */\n    addXhrfetchBreakpoint: 'Add XHR/fetch breakpoint',\n    /**\n     *@description Text to add a breakpoint\n     */\n    addBreakpoint: 'Add breakpoint',\n    /**\n     *@description Input element container text content in XHRBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n     */\n    breakWhenUrlContains: 'Break when URL contains:',\n    /**\n     *@description Accessible label for XHR/fetch breakpoint text input\n     */\n    urlBreakpoint: 'URL Breakpoint',\n    /**\n     *@description Text in XHRBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n     *@example {example.com} PH1\n     */\n    urlContainsS: 'URL contains \"{PH1}\"',\n    /**\n     *@description Text in XHRBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n     */\n    anyXhrOrFetch: 'Any XHR or fetch',\n    /**\n     *@description Screen reader description of a hit breakpoint in the Sources panel\n     */\n    breakpointHit: 'breakpoint hit',\n    /**\n     *@description Text to remove all breakpoints\n     */\n    removeAllBreakpoints: 'Remove all breakpoints',\n    /**\n     *@description Text to remove a breakpoint\n     */\n    removeBreakpoint: 'Remove breakpoint',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/browser_debugger/XHRBreakpointsSidebarPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst containerToBreakpointEntry = new WeakMap();\nconst breakpointEntryToCheckbox = new WeakMap();\nlet xhrBreakpointsSidebarPaneInstance;\nexport class XHRBreakpointsSidebarPane extends UI.Widget.VBox {\n    #breakpoints;\n    #list;\n    #emptyElement;\n    #breakpointElements;\n    #addButton;\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    #hitBreakpoint;\n    constructor() {\n        super(true);\n        this.#breakpoints = new UI.ListModel.ListModel();\n        this.#list = new UI.ListControl.ListControl(this.#breakpoints, this, UI.ListControl.ListMode.NonViewport);\n        this.contentElement.setAttribute('jslog', `${VisualLogging.section('source.xhr-breakpoints')}`);\n        this.contentElement.appendChild(this.#list.element);\n        this.#list.element.classList.add('breakpoint-list', 'hidden');\n        UI.ARIAUtils.markAsList(this.#list.element);\n        UI.ARIAUtils.setLabel(this.#list.element, i18nString(UIStrings.xhrfetchBreakpoints));\n        this.#emptyElement = this.contentElement.createChild('div', 'gray-info-message');\n        this.#emptyElement.textContent = i18nString(UIStrings.noBreakpoints);\n        this.#breakpointElements = new Map();\n        this.#addButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.addXhrfetchBreakpoint), 'plus', undefined, 'sources.add-xhr-fetch-breakpoint');\n        this.#addButton.setSize(\"SMALL\" /* Buttons.Button.Size.SMALL */);\n        this.#addButton.addEventListener(\"Click\" /* UI.Toolbar.ToolbarButton.Events.CLICK */, () => {\n            void this.addButtonClicked();\n        });\n        this.#emptyElement.addEventListener('contextmenu', this.emptyElementContextMenu.bind(this), true);\n        this.#emptyElement.tabIndex = -1;\n        this.restoreBreakpoints();\n        this.update();\n    }\n    static instance() {\n        if (!xhrBreakpointsSidebarPaneInstance) {\n            xhrBreakpointsSidebarPaneInstance = new XHRBreakpointsSidebarPane();\n        }\n        return xhrBreakpointsSidebarPaneInstance;\n    }\n    toolbarItems() {\n        return [this.#addButton];\n    }\n    emptyElementContextMenu(event) {\n        const contextMenu = new UI.ContextMenu.ContextMenu(event);\n        contextMenu.defaultSection().appendItem(i18nString(UIStrings.addBreakpoint), this.addButtonClicked.bind(this), { jslogContext: 'sources.add-xhr-fetch-breakpoint' });\n        void contextMenu.show();\n    }\n    async addButtonClicked() {\n        await UI.ViewManager.ViewManager.instance().showView('sources.xhr-breakpoints');\n        const inputElementContainer = document.createElement('p');\n        inputElementContainer.classList.add('breakpoint-condition');\n        inputElementContainer.textContent = i18nString(UIStrings.breakWhenUrlContains);\n        inputElementContainer.setAttribute('jslog', `${VisualLogging.value('condition').track({ change: true })}`);\n        const inputElement = inputElementContainer.createChild('span', 'breakpoint-condition-input');\n        UI.ARIAUtils.setLabel(inputElement, i18nString(UIStrings.urlBreakpoint));\n        this.addListElement(inputElementContainer, this.#list.element.firstChild);\n        function finishEditing(accept, e, text) {\n            this.removeListElement(inputElementContainer);\n            if (accept) {\n                SDK.DOMDebuggerModel.DOMDebuggerManager.instance().addXHRBreakpoint(text, true);\n                this.setBreakpoint(text);\n            }\n            this.update();\n        }\n        const config = new UI.InplaceEditor.Config(finishEditing.bind(this, true), finishEditing.bind(this, false));\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        UI.InplaceEditor.InplaceEditor.startEditing(inputElement, config);\n    }\n    heightForItem(_item) {\n        return 0;\n    }\n    isItemSelectable(_item) {\n        return true;\n    }\n    setBreakpoint(breakKeyword) {\n        if (this.#breakpoints.indexOf(breakKeyword) !== -1) {\n            this.#list.refreshItem(breakKeyword);\n        }\n        else {\n            this.#breakpoints.insertWithComparator(breakKeyword, (a, b) => {\n                if (a > b) {\n                    return 1;\n                }\n                if (a < b) {\n                    return -1;\n                }\n                return 0;\n            });\n        }\n        if (!this.#list.selectedItem() || !this.hasFocus()) {\n            this.#list.selectItem(this.#breakpoints.at(0));\n        }\n    }\n    createElementForItem(item) {\n        const listItemElement = document.createElement('div');\n        UI.ARIAUtils.markAsListitem(listItemElement);\n        const element = listItemElement.createChild('div', 'breakpoint-entry');\n        containerToBreakpointEntry.set(listItemElement, element);\n        const enabled = SDK.DOMDebuggerModel.DOMDebuggerManager.instance().xhrBreakpoints().get(item) || false;\n        UI.ARIAUtils.markAsCheckbox(element);\n        UI.ARIAUtils.setChecked(element, enabled);\n        element.addEventListener('contextmenu', this.contextMenu.bind(this, item), true);\n        const title = item ? i18nString(UIStrings.urlContainsS, { PH1: item }) : i18nString(UIStrings.anyXhrOrFetch);\n        const label = UI.UIUtils.CheckboxLabel.create(title, enabled, undefined, undefined, /* small */ true);\n        UI.ARIAUtils.markAsHidden(label);\n        UI.ARIAUtils.setLabel(element, title);\n        element.appendChild(label);\n        label.checkboxElement.addEventListener('click', this.checkboxClicked.bind(this, item, enabled), false);\n        element.addEventListener('click', event => {\n            if (event.target === element) {\n                this.checkboxClicked(item, enabled);\n            }\n        }, false);\n        breakpointEntryToCheckbox.set(element, label.checkboxElement);\n        label.checkboxElement.tabIndex = -1;\n        element.tabIndex = -1;\n        if (item === this.#list.selectedItem()) {\n            element.tabIndex = 0;\n            this.setDefaultFocusedElement(element);\n        }\n        element.addEventListener('keydown', event => {\n            let handled = false;\n            if (event.key === ' ') {\n                this.checkboxClicked(item, enabled);\n                handled = true;\n            }\n            else if (event.key === 'Enter') {\n                this.labelClicked(item);\n                handled = true;\n            }\n            if (handled) {\n                event.consume(true);\n            }\n        });\n        if (item === this.#hitBreakpoint) {\n            element.classList.add('breakpoint-hit');\n            UI.ARIAUtils.setDescription(element, i18nString(UIStrings.breakpointHit));\n        }\n        label.classList.add('cursor-auto');\n        label.textElement.addEventListener('dblclick', this.labelClicked.bind(this, item), false);\n        this.#breakpointElements.set(item, listItemElement);\n        listItemElement.setAttribute('jslog', `${VisualLogging.item().track({\n            click: true,\n            dblclick: true,\n            keydown: 'ArrowUp|ArrowDown|PageUp|PageDown|Enter|Space',\n        })}`);\n        return listItemElement;\n    }\n    selectedItemChanged(from, to, fromElement, toElement) {\n        if (fromElement) {\n            const breakpointEntryElement = containerToBreakpointEntry.get(fromElement);\n            if (!breakpointEntryElement) {\n                throw new Error('Expected breakpoint entry to be found for an element');\n            }\n            breakpointEntryElement.tabIndex = -1;\n        }\n        if (toElement) {\n            const breakpointEntryElement = containerToBreakpointEntry.get(toElement);\n            if (!breakpointEntryElement) {\n                throw new Error('Expected breakpoint entry to be found for an element');\n            }\n            this.setDefaultFocusedElement(breakpointEntryElement);\n            breakpointEntryElement.tabIndex = 0;\n            if (this.hasFocus()) {\n                breakpointEntryElement.focus();\n            }\n        }\n    }\n    updateSelectedItemARIA(_fromElement, _toElement) {\n        return true;\n    }\n    removeBreakpoint(breakKeyword) {\n        const index = this.#breakpoints.indexOf(breakKeyword);\n        if (index >= 0) {\n            this.#breakpoints.remove(index);\n        }\n        this.#breakpointElements.delete(breakKeyword);\n        this.update();\n    }\n    addListElement(element, beforeNode) {\n        this.#list.element.insertBefore(element, beforeNode);\n        this.#emptyElement.classList.add('hidden');\n        this.#list.element.classList.remove('hidden');\n    }\n    removeListElement(element) {\n        this.#list.element.removeChild(element);\n        if (!this.#list.element.firstElementChild) {\n            this.#emptyElement.classList.remove('hidden');\n            this.#list.element.classList.add('hidden');\n        }\n    }\n    contextMenu(breakKeyword, event) {\n        const contextMenu = new UI.ContextMenu.ContextMenu(event);\n        function removeBreakpoint() {\n            SDK.DOMDebuggerModel.DOMDebuggerManager.instance().removeXHRBreakpoint(breakKeyword);\n            this.removeBreakpoint(breakKeyword);\n        }\n        function removeAllBreakpoints() {\n            for (const url of this.#breakpointElements.keys()) {\n                SDK.DOMDebuggerModel.DOMDebuggerManager.instance().removeXHRBreakpoint(url);\n                this.removeBreakpoint(url);\n            }\n            this.update();\n        }\n        const removeAllTitle = i18nString(UIStrings.removeAllBreakpoints);\n        contextMenu.defaultSection().appendItem(i18nString(UIStrings.addBreakpoint), this.addButtonClicked.bind(this), { jslogContext: 'sources.add-xhr-fetch-breakpoint' });\n        contextMenu.defaultSection().appendItem(i18nString(UIStrings.removeBreakpoint), removeBreakpoint.bind(this), { jslogContext: 'sources.remove-xhr-fetch-breakpoint' });\n        contextMenu.defaultSection().appendItem(removeAllTitle, removeAllBreakpoints.bind(this), { jslogContext: 'sources.remove-all-xhr-fetch-breakpoints' });\n        void contextMenu.show();\n    }\n    checkboxClicked(breakKeyword, checked) {\n        const hadFocus = this.hasFocus();\n        SDK.DOMDebuggerModel.DOMDebuggerManager.instance().toggleXHRBreakpoint(breakKeyword, !checked);\n        this.#list.refreshItem(breakKeyword);\n        this.#list.selectItem(breakKeyword);\n        if (hadFocus) {\n            this.focus();\n        }\n    }\n    labelClicked(breakKeyword) {\n        const element = this.#breakpointElements.get(breakKeyword);\n        const inputElement = document.createElement('span');\n        inputElement.classList.add('breakpoint-condition');\n        inputElement.textContent = breakKeyword;\n        inputElement.setAttribute('jslog', `${VisualLogging.value('condition').track({ change: true })}`);\n        if (element) {\n            this.#list.element.insertBefore(inputElement, element);\n            element.classList.add('hidden');\n        }\n        function finishEditing(accept, e, text) {\n            this.removeListElement(inputElement);\n            if (accept) {\n                SDK.DOMDebuggerModel.DOMDebuggerManager.instance().removeXHRBreakpoint(breakKeyword);\n                this.removeBreakpoint(breakKeyword);\n                let enabled = true;\n                if (element) {\n                    const breakpointEntryElement = containerToBreakpointEntry.get(element);\n                    const checkboxElement = breakpointEntryElement ? breakpointEntryToCheckbox.get(breakpointEntryElement) : undefined;\n                    if (checkboxElement) {\n                        enabled = checkboxElement.checked;\n                    }\n                }\n                SDK.DOMDebuggerModel.DOMDebuggerManager.instance().addXHRBreakpoint(text, enabled);\n                this.setBreakpoint(text);\n                this.#list.selectItem(text);\n            }\n            else if (element) {\n                element.classList.remove('hidden');\n            }\n            this.focus();\n        }\n        const config = new UI.InplaceEditor.Config(finishEditing.bind(this, true), finishEditing.bind(this, false));\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        UI.InplaceEditor.InplaceEditor.startEditing(inputElement, config);\n    }\n    flavorChanged(_object) {\n        this.update();\n    }\n    update() {\n        const isEmpty = this.#breakpoints.length === 0;\n        this.#list.element.classList.toggle('hidden', isEmpty);\n        this.#emptyElement.classList.toggle('hidden', !isEmpty);\n        const details = UI.Context.Context.instance().flavor(SDK.DebuggerModel.DebuggerPausedDetails);\n        if (!details || details.reason !== \"XHR\" /* Protocol.Debugger.PausedEventReason.XHR */) {\n            if (this.#hitBreakpoint) {\n                const oldHitBreakpoint = this.#hitBreakpoint;\n                this.#hitBreakpoint = undefined;\n                if (this.#breakpoints.indexOf(oldHitBreakpoint) >= 0) {\n                    this.#list.refreshItem(oldHitBreakpoint);\n                }\n            }\n            return;\n        }\n        const url = details.auxData && details.auxData['breakpointURL'];\n        this.#hitBreakpoint = url;\n        if (this.#breakpoints.indexOf(url) < 0) {\n            return;\n        }\n        this.#list.refreshItem(url);\n        void UI.ViewManager.ViewManager.instance().showView('sources.xhr-breakpoints');\n    }\n    restoreBreakpoints() {\n        const breakpoints = SDK.DOMDebuggerModel.DOMDebuggerManager.instance().xhrBreakpoints();\n        for (const url of breakpoints.keys()) {\n            this.setBreakpoint(url);\n        }\n    }\n    wasShown() {\n        super.wasShown();\n        this.registerCSSFiles([xhrBreakpointsSidebarPaneStyles]);\n    }\n}\n//# sourceMappingURL=XHRBreakpointsSidebarPane.js.map"],"names":["styles","UIStrings","str_","i18n.i18n.registerUIStrings","i18nString","i18n.i18n.getLocalizedString","i18nLazyString","i18n.i18n.getLazilyComputedLocalizedString","CategorizedBreakpointsSidebarPane","UI.Widget.VBox","#categoriesTreeOutline","#viewId","#detailsPausedReason","#categories","#breakpoints","#highlightedElement","breakpoints","viewId","detailsPausedReason","UI.TreeOutline.TreeOutlineInShadow","sortedCategories","bp","a","b","categoryA","getLocalizedCategory","categoryB","i18n.DevToolsLocale.DevToolsLocale","category","firstCategory","breakpoint","SDK.TargetManager.TargetManager","SDK.DebuggerModel.DebuggerModel","SDK.DebuggerModel.Events","UI.Context.Context","SDK.Target.Target","event","name","labelNode","UI.UIUtils.CheckboxLabel","treeElement","UI.TreeOutline.TreeElement","UI.ARIAUtils.setChecked","Sources.CategorizedBreakpointL10n.getLocalizedBreakpointName","Platform.StringUtilities.toKebabCase","_details","target","debuggerModel","details","UI.ARIAUtils.setDescription","UI.ViewManager.ViewManager","matchingBreakpoint","item","enabled","treeItem","hasEnabled","hasDisabled","other","UI.ARIAUtils.setCheckboxAsIndeterminate","categorizedBreakpointsSidebarPaneStyles","LOCALIZED_CATEGORIES","CSPViolationBreakpointsSidebarPane","SDK.DOMDebuggerModel.DOMDebuggerManager","VisualLogging.section","breakpointType","x","domBreakpointsSidebarPaneInstance","DOMBreakpointsSidebarPane","#emptyElement","#list","#highlightedBreakpoint","UI.ListModel.ListModel","UI.ListControl.ListControl","UI.ListControl.ListMode","UI.ARIAUtils.markAsList","UI.ARIAUtils.setLabel","SDK.DOMDebuggerModel.DOMDebuggerModel","domDebuggerModel","element","VisualLogging.domBreakpoint","UI.ARIAUtils.markAsListitem","checkboxLabel","checkboxElement","labelElement","description","breakpointTypeLabel","BreakpointTypeLabels","breakpointTypeText","VisualLogging.toggle","checkedStateText","linkifiedNode","Common.Linkifier.Linkifier","linkified","_item","_fromElement","_toElement","from","to","fromElement","toElement","hadFocus","lastIndex","index","breakpointToSelect","breakpointA","breakpointB","contextMenu","UI.ContextMenu.ContextMenu","Common.Revealer.reveal","_object","SDK.DebuggerModel.DebuggerPausedDetails","oldHighlightedBreakpoint","data","domBreakpointsSidebarPaneStyles","ContextMenuProvider","node","toggleBreakpoint","type","label","Sources.DebuggerPausedMessage.BreakpointTypeNouns","labelString","UI.ARIAUtils.alert","breakpointsMenu","allBreakpointTypes","eventListenerBreakpointsSidebarPaneInstance","EventListenerBreakpointsSidebarPane","nonDomBreakpoints","SDK.EventBreakpointsModel.EventBreakpointsManager","auxData","domBreakpoint","ObjectEventListenersSidebarPane","UI.ThrottledWidget.ThrottledWidget","#lastRequestedContext","EventListeners.EventListenersView.EventListenersView","refreshButton","UI.Toolbar.Toolbar","objectGroupName","windowObjects","executionContext","SDK.RuntimeModel.ExecutionContext","result","ActionDelegate","context","actionId","eventListenersSidebarPane","containerToBreakpointEntry","breakpointEntryToCheckbox","xhrBreakpointsSidebarPaneInstance","XHRBreakpointsSidebarPane","#breakpointElements","#addButton","#hitBreakpoint","UI.Toolbar.ToolbarButton","inputElementContainer","VisualLogging.value","inputElement","finishEditing","accept","e","text","config","UI.InplaceEditor.Config","UI.InplaceEditor.InplaceEditor","breakKeyword","listItemElement","UI.ARIAUtils.markAsCheckbox","title","UI.ARIAUtils.markAsHidden","handled","VisualLogging.item","breakpointEntryElement","beforeNode","removeBreakpoint","removeAllBreakpoints","url","removeAllTitle","checked","isEmpty","oldHitBreakpoint","xhrBreakpointsSidebarPaneStyles"],"mappings":"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"}