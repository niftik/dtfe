{"version":3,"file":"performance_monitor-GbHpRDBK.js","sources":["../../panels/performance_monitor/performanceMonitor.css.js","../../panels/performance_monitor/PerformanceMonitor.js"],"sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(\n`/*\n * Copyright 2017 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.perfmon-pane {\n  overflow: hidden;\n\n  --override-color-perf-monitor-cpu: var(--sys-color-yellow-bright);\n  --override-color-perf-monitor-cpu-task-duration: var(--sys-color-neutral-bright);\n  --override-color-perf-monitor-cpu-script-duration: var(--sys-color-yellow-bright);\n  --override-color-perf-monitor-cpu-layout-duration: var(--sys-color-purple);\n  --override-color-perf-monitor-cpu-recalc-style-duration: var(--sys-color-purple-bright);\n  --override-color-perf-monitor-jsheap: var(--sys-color-purple-bright);\n  --override-color-perf-monitor-jsheap-total-size: var(--ref-palette-purple70);\n  --override-color-perf-monitor-jsheap-used-size: var(--sys-color-purple-bright);\n  --override-color-perf-monitor-dom-nodes: var(--sys-color-green);\n  --override-color-perf-monitor-js-event-listeners: var(--ref-palette-green80);\n  --override-color-perf-monitor-documents: var(--sys-color-blue);\n  --override-color-perf-monitor-document-frames: var(--sys-color-cyan-bright);\n  --override-color-perf-monitor-layout-count: var(--sys-color-pink-bright);\n  --override-color-perf-monitor-recalc-style-count: var(--sys-color-pink);\n}\n\n:host-context(.theme-with-dark-background) .perfmon-pane {\n  --override-color-perf-monitor-jsheap-total-size: var(--ref-palette-purple50);\n  --override-color-perf-monitor-js-event-listeners: var(--ref-palette-green50);\n}\n\n.perfmon-pane.suspended {\n  opacity: 40%;\n  pointer-events: none;\n}\n\n.perfmon-pane .perfmon-chart-suspend-overlay {\n  display: none;\n  font-size: 26px;\n  align-items: center;\n  justify-content: center;\n}\n\n.perfmon-pane.suspended .perfmon-chart-suspend-overlay {\n  display: flex;\n}\n\n.perfmon-control-pane {\n  display: flex;\n  flex-direction: column;\n  padding: 6px 0;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\n.perfmon-chart-container {\n  display: flex;\n  flex: 1 1;\n  border-left: 1px solid var(--sys-color-divider);\n  overflow-y: auto;\n}\n\n.perfmon-chart-container canvas {\n  width: 100%;\n}\n\n.perfmon-indicator {\n  padding: 3px 9px;\n  margin: -1px 0;\n  display: flex;\n  flex-shrink: 0;\n  width: 210px;\n}\n\n.perfmon-indicator span {\n  flex: 0 0 135px;\n}\n\n.perfmon-indicator-value {\n  flex: 0 0 55px;\n  text-align: right;\n  overflow: visible;\n}\n\n.perfmon-indicator:not(.active) .perfmon-indicator-value {\n  opacity: 0%;\n}\n\n/*# sourceURL=performanceMonitor.css */\n`);\n\nexport default styles;\n","// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport performanceMonitorStyles from './performanceMonitor.css.js';\nconst UIStrings = {\n    /**\n     *@description Aria accessible name in Performance Monitor of the Performance monitor tab\n     */\n    graphsDisplayingARealtimeViewOf: 'Graphs displaying a real-time view of performance metrics',\n    /**\n     *@description Text in Performance Monitor of the Performance monitor tab\n     */\n    paused: 'Paused',\n    /**\n     *@description Text in Performance Monitor of the Performance monitor tab\n     */\n    cpuUsage: 'CPU usage',\n    /**\n     *@description Text in Performance Monitor of the Performance monitor tab\n     */\n    jsHeapSize: 'JS heap size',\n    /**\n     *@description Text in Performance Monitor of the Performance monitor tab\n     */\n    domNodes: 'DOM Nodes',\n    /**\n     *@description Text in Performance Monitor of the Performance monitor tab\n     */\n    jsEventListeners: 'JS event listeners',\n    /**\n     *@description Text for documents, a type of resources\n     */\n    documents: 'Documents',\n    /**\n     *@description Text in Performance Monitor of the Performance monitor tab\n     */\n    documentFrames: 'Document Frames',\n    /**\n     *@description Text in Performance Monitor of the Performance monitor tab\n     */\n    layoutsSec: 'Layouts / sec',\n    /**\n     *@description Text in Performance Monitor of the Performance monitor tab\n     */\n    styleRecalcsSec: 'Style recalcs / sec',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/performance_monitor/PerformanceMonitor.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class PerformanceMonitorImpl extends UI.Widget.HBox {\n    metricsBuffer;\n    pixelsPerMs;\n    pollIntervalMs;\n    scaleHeight;\n    graphHeight;\n    gridColor;\n    controlPane;\n    canvas;\n    animationId;\n    width;\n    height;\n    model;\n    startTimestamp;\n    pollTimer;\n    constructor(pollIntervalMs = 500) {\n        super(true);\n        this.element.setAttribute('jslog', `${VisualLogging.panel('performance.monitor').track({ resize: true })}`);\n        this.contentElement.classList.add('perfmon-pane');\n        this.metricsBuffer = [];\n        /** @const */\n        this.pixelsPerMs = 10 / 1000;\n        /** @const */\n        this.pollIntervalMs = pollIntervalMs;\n        /** @const */\n        this.scaleHeight = 16;\n        /** @const */\n        this.graphHeight = 90;\n        this.gridColor = ThemeSupport.ThemeSupport.instance().getComputedValue('--divider-line');\n        this.controlPane = new ControlPane(this.contentElement);\n        const chartContainer = this.contentElement.createChild('div', 'perfmon-chart-container');\n        this.canvas = chartContainer.createChild('canvas');\n        this.canvas.tabIndex = -1;\n        UI.ARIAUtils.setLabel(this.canvas, i18nString(UIStrings.graphsDisplayingARealtimeViewOf));\n        this.contentElement.createChild('div', 'perfmon-chart-suspend-overlay fill').createChild('div').textContent =\n            i18nString(UIStrings.paused);\n        this.controlPane.addEventListener(\"MetricChanged\" /* Events.METRIC_CHANGED */, this.recalcChartHeight, this);\n        SDK.TargetManager.TargetManager.instance().observeModels(SDK.PerformanceMetricsModel.PerformanceMetricsModel, this);\n    }\n    wasShown() {\n        if (!this.model) {\n            return;\n        }\n        this.registerCSSFiles([performanceMonitorStyles]);\n        this.controlPane.instantiateMetricData();\n        const themeSupport = ThemeSupport.ThemeSupport.instance();\n        themeSupport.addEventListener(ThemeSupport.ThemeChangeEvent.eventName, () => {\n            // instantiateMetricData sets the colors for the metrics, which we need\n            // to re-evaluate when the theme changes before re-drawing the canvas.\n            this.controlPane.instantiateMetricData();\n            this.draw();\n        });\n        SDK.TargetManager.TargetManager.instance().addEventListener(\"SuspendStateChanged\" /* SDK.TargetManager.Events.SUSPEND_STATE_CHANGED */, this.suspendStateChanged, this);\n        void this.model.enable();\n        this.suspendStateChanged();\n    }\n    willHide() {\n        if (!this.model) {\n            return;\n        }\n        SDK.TargetManager.TargetManager.instance().removeEventListener(\"SuspendStateChanged\" /* SDK.TargetManager.Events.SUSPEND_STATE_CHANGED */, this.suspendStateChanged, this);\n        this.stopPolling();\n        void this.model.disable();\n    }\n    modelAdded(model) {\n        if (model.target() !== SDK.TargetManager.TargetManager.instance().primaryPageTarget()) {\n            return;\n        }\n        this.model = model;\n        if (this.isShowing()) {\n            this.wasShown();\n        }\n    }\n    modelRemoved(model) {\n        if (this.model !== model) {\n            return;\n        }\n        if (this.isShowing()) {\n            this.willHide();\n        }\n        this.model = null;\n    }\n    suspendStateChanged() {\n        const suspended = SDK.TargetManager.TargetManager.instance().allTargetsSuspended();\n        if (suspended) {\n            this.stopPolling();\n        }\n        else {\n            this.startPolling();\n        }\n        this.contentElement.classList.toggle('suspended', suspended);\n    }\n    startPolling() {\n        this.startTimestamp = 0;\n        this.pollTimer = window.setInterval(() => this.poll(), this.pollIntervalMs);\n        this.onResize();\n        const animate = () => {\n            this.draw();\n            this.animationId = this.contentElement.window().requestAnimationFrame(() => {\n                animate();\n            });\n        };\n        animate();\n    }\n    stopPolling() {\n        window.clearInterval(this.pollTimer);\n        this.contentElement.window().cancelAnimationFrame(this.animationId);\n        this.metricsBuffer = [];\n    }\n    async poll() {\n        if (!this.model) {\n            return;\n        }\n        const data = await this.model.requestMetrics();\n        const timestamp = data.timestamp;\n        const metrics = data.metrics;\n        this.metricsBuffer.push({ timestamp, metrics });\n        const millisPerWidth = this.width / this.pixelsPerMs;\n        // Multiply by 2 as the pollInterval has some jitter and to have some extra samples if window is resized.\n        const maxCount = Math.ceil(millisPerWidth / this.pollIntervalMs * 2);\n        if (this.metricsBuffer.length > maxCount * 2) // Multiply by 2 to have a hysteresis.\n         {\n            this.metricsBuffer.splice(0, this.metricsBuffer.length - maxCount);\n        }\n        this.controlPane.updateMetrics(metrics);\n    }\n    draw() {\n        const ctx = this.canvas.getContext('2d');\n        ctx.save();\n        ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n        ctx.clearRect(0, 0, this.width, this.height);\n        ctx.save();\n        ctx.translate(0, this.scaleHeight); // Reserve space for the scale bar.\n        for (const chartInfo of this.controlPane.charts()) {\n            if (!this.controlPane.isActive(chartInfo.metrics[0].name)) {\n                continue;\n            }\n            this.drawChart(ctx, chartInfo, this.graphHeight);\n            ctx.translate(0, this.graphHeight);\n        }\n        ctx.restore();\n        this.drawHorizontalGrid(ctx);\n        ctx.restore();\n    }\n    drawHorizontalGrid(ctx) {\n        const labelDistanceSeconds = 10;\n        const lightGray = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-inverted-opacity-2');\n        ctx.font = '10px ' + Host.Platform.fontFamily();\n        ctx.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-inverted-opacity-50');\n        const currentTime = Date.now() / 1000;\n        for (let sec = Math.ceil(currentTime);; --sec) {\n            const x = this.width - ((currentTime - sec) * 1000 - this.pollIntervalMs) * this.pixelsPerMs;\n            if (x < -50) {\n                break;\n            }\n            ctx.beginPath();\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, this.height);\n            if (sec >= 0 && sec % labelDistanceSeconds === 0) {\n                ctx.fillText(new Date(sec * 1000).toLocaleTimeString(), x + 4, 12);\n            }\n            ctx.strokeStyle = sec % labelDistanceSeconds ? lightGray : this.gridColor;\n            ctx.stroke();\n        }\n    }\n    drawChart(ctx, chartInfo, height) {\n        ctx.save();\n        ctx.rect(0, 0, this.width, height);\n        ctx.clip();\n        const bottomPadding = 8;\n        const extraSpace = 1.05;\n        const max = this.calcMax(chartInfo) * extraSpace;\n        const stackedChartBaseLandscape = chartInfo.stacked ? new Map() : null;\n        const paths = [];\n        for (let i = chartInfo.metrics.length - 1; i >= 0; --i) {\n            const metricInfo = chartInfo.metrics[i];\n            paths.push({\n                path: this.buildMetricPath(chartInfo, metricInfo, height - bottomPadding, max, i ? stackedChartBaseLandscape : null),\n                color: metricInfo.color,\n            });\n        }\n        const backgroundColor = Common.Color.parse(ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-cdt-base-container'))\n            ?.asLegacyColor();\n        if (backgroundColor) {\n            for (const path of paths.reverse()) {\n                const color = path.color;\n                ctx.save();\n                const parsedColor = Common.Color.parse(color);\n                if (!parsedColor) {\n                    continue;\n                }\n                ctx.fillStyle = backgroundColor.blendWith(parsedColor.setAlpha(0.2).asLegacyColor()).asString() || '';\n                ctx.fill(path.path);\n                ctx.strokeStyle = color;\n                ctx.lineWidth = 0.5;\n                ctx.stroke(path.path);\n                ctx.restore();\n            }\n        }\n        ctx.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-inverted-opacity-50');\n        ctx.font = `10px  ${Host.Platform.fontFamily()}`;\n        ctx.fillText(chartInfo.title, 8, 10);\n        this.drawVerticalGrid(ctx, height - bottomPadding, max, chartInfo);\n        ctx.restore();\n    }\n    calcMax(chartInfo) {\n        if (chartInfo.max) {\n            return chartInfo.max;\n        }\n        const width = this.width;\n        const startTime = performance.now() - this.pollIntervalMs - width / this.pixelsPerMs;\n        let max = -Infinity;\n        for (const metricInfo of chartInfo.metrics) {\n            for (let i = this.metricsBuffer.length - 1; i >= 0; --i) {\n                const metrics = this.metricsBuffer[i];\n                const value = metrics.metrics.get(metricInfo.name);\n                if (value !== undefined) {\n                    max = Math.max(max, value);\n                }\n                if (metrics.timestamp < startTime) {\n                    break;\n                }\n            }\n        }\n        if (!this.metricsBuffer.length) {\n            return 10;\n        }\n        const base10 = Math.pow(10, Math.floor(Math.log10(max)));\n        max = Math.ceil(max / base10 / 2) * base10 * 2;\n        const alpha = 0.2;\n        chartInfo.currentMax = max * alpha + (chartInfo.currentMax || max) * (1 - alpha);\n        return chartInfo.currentMax;\n    }\n    drawVerticalGrid(ctx, height, max, info) {\n        let base = Math.pow(10, Math.floor(Math.log10(max)));\n        const firstDigit = Math.floor(max / base);\n        if (firstDigit !== 1 && firstDigit % 2 === 1) {\n            base *= 2;\n        }\n        let scaleValue = Math.floor(max / base) * base;\n        const span = max;\n        const topPadding = 18;\n        const visibleHeight = height - topPadding;\n        ctx.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-inverted-opacity-50');\n        ctx.strokeStyle = this.gridColor;\n        ctx.beginPath();\n        for (let i = 0; i < 2; ++i) {\n            const y = calcY(scaleValue);\n            const labelText = MetricIndicator.formatNumber(scaleValue, info);\n            ctx.moveTo(0, y);\n            ctx.lineTo(4, y);\n            ctx.moveTo(ctx.measureText(labelText).width + 12, y);\n            ctx.lineTo(this.width, y);\n            ctx.fillText(labelText, 8, calcY(scaleValue) + 3);\n            scaleValue /= 2;\n        }\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.moveTo(0, height + 0.5);\n        ctx.lineTo(this.width, height + 0.5);\n        ctx.strokeStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-inverted-opacity-2');\n        ctx.stroke();\n        function calcY(value) {\n            return Math.round(height - visibleHeight * value / span) + 0.5;\n        }\n    }\n    buildMetricPath(chartInfo, metricInfo, height, scaleMax, stackedChartBaseLandscape) {\n        const path = new Path2D();\n        const topPadding = 18;\n        const visibleHeight = height - topPadding;\n        if (visibleHeight < 1) {\n            return path;\n        }\n        const span = scaleMax;\n        const metricName = metricInfo.name;\n        const pixelsPerMs = this.pixelsPerMs;\n        const startTime = performance.now() - this.pollIntervalMs - this.width / pixelsPerMs;\n        const smooth = chartInfo.smooth;\n        let x = 0;\n        let lastY = 0;\n        let lastX = 0;\n        if (this.metricsBuffer.length) {\n            x = (this.metricsBuffer[0].timestamp - startTime) * pixelsPerMs;\n            path.moveTo(x, calcY(0));\n            path.lineTo(this.width + 5, calcY(0));\n            lastY = calcY(this.metricsBuffer[this.metricsBuffer.length - 1].metrics.get(metricName) ||\n                0);\n            lastX = this.width + 5;\n            path.lineTo(lastX, lastY);\n        }\n        for (let i = this.metricsBuffer.length - 1; i >= 0; --i) {\n            const metrics = this.metricsBuffer[i];\n            const timestamp = metrics.timestamp;\n            let value = metrics.metrics.get(metricName) || 0;\n            if (stackedChartBaseLandscape) {\n                value += stackedChartBaseLandscape.get(timestamp) || 0;\n                value = Platform.NumberUtilities.clamp(value, 0, 1);\n                stackedChartBaseLandscape.set(timestamp, value);\n            }\n            const y = calcY(value);\n            x = (timestamp - startTime) * pixelsPerMs;\n            if (smooth) {\n                const midX = (lastX + x) / 2;\n                path.bezierCurveTo(midX, lastY, midX, y, x, y);\n            }\n            else {\n                path.lineTo(x, lastY);\n                path.lineTo(x, y);\n            }\n            lastX = x;\n            lastY = y;\n            if (timestamp < startTime) {\n                break;\n            }\n        }\n        return path;\n        function calcY(value) {\n            return Math.round(height - visibleHeight * value / span) + 0.5;\n        }\n    }\n    onResize() {\n        super.onResize();\n        this.width = this.canvas.offsetWidth;\n        this.canvas.width = Math.round(this.width * window.devicePixelRatio);\n        this.recalcChartHeight();\n    }\n    recalcChartHeight() {\n        let height = this.scaleHeight;\n        for (const chartInfo of this.controlPane.charts()) {\n            if (this.controlPane.isActive(chartInfo.metrics[0].name)) {\n                height += this.graphHeight;\n            }\n        }\n        this.height = Math.ceil(height * window.devicePixelRatio);\n        this.canvas.height = this.height;\n        this.canvas.style.height = `${this.height / window.devicePixelRatio}px`;\n    }\n}\nexport class ControlPane extends Common.ObjectWrapper.ObjectWrapper {\n    element;\n    enabledChartsSetting;\n    enabledCharts;\n    chartsInfo = [];\n    indicators = new Map();\n    constructor(parent) {\n        super();\n        this.element = parent.createChild('div', 'perfmon-control-pane');\n        this.enabledChartsSetting = Common.Settings.Settings.instance().createSetting('perfmon-active-indicators2', ['TaskDuration', 'JSHeapTotalSize', 'Nodes']);\n        this.enabledCharts = new Set(this.enabledChartsSetting.get());\n    }\n    instantiateMetricData() {\n        const defaults = {\n            color: undefined,\n            format: undefined,\n            currentMax: undefined,\n            max: undefined,\n            smooth: undefined,\n            stacked: undefined,\n        };\n        // Get ThemeSupport instance here just to make things a little less verbose.\n        const themeSupport = ThemeSupport.ThemeSupport.instance();\n        this.chartsInfo = [\n            {\n                ...defaults,\n                title: i18nString(UIStrings.cpuUsage),\n                metrics: [\n                    {\n                        name: 'TaskDuration',\n                        color: themeSupport.getComputedValue('--override-color-perf-monitor-cpu-task-duration', this.element),\n                    },\n                    {\n                        name: 'ScriptDuration',\n                        color: themeSupport.getComputedValue('--override-color-perf-monitor-cpu-script-duration', this.element),\n                    },\n                    {\n                        name: 'LayoutDuration',\n                        color: themeSupport.getComputedValue('--override-color-perf-monitor-cpu-layout-duration', this.element),\n                    },\n                    {\n                        name: 'RecalcStyleDuration',\n                        color: themeSupport.getComputedValue('--override-color-perf-monitor-cpu-recalc-style-duration', this.element),\n                    },\n                ],\n                format: \"Percent\" /* Format.PERCENT */,\n                smooth: true,\n                stacked: true,\n                color: themeSupport.getComputedValue('--override-color-perf-monitor-cpu', this.element),\n                max: 1,\n                currentMax: undefined,\n            },\n            {\n                ...defaults,\n                title: i18nString(UIStrings.jsHeapSize),\n                metrics: [\n                    {\n                        name: 'JSHeapTotalSize',\n                        color: themeSupport.getComputedValue('--override-color-perf-monitor-jsheap-total-size', this.element),\n                    },\n                    {\n                        name: 'JSHeapUsedSize',\n                        color: themeSupport.getComputedValue('--override-color-perf-monitor-jsheap-used-size', this.element),\n                    },\n                ],\n                format: \"Bytes\" /* Format.BYTES */,\n                color: themeSupport.getComputedValue('--override-color-perf-monitor-jsheap'),\n            },\n            {\n                ...defaults,\n                title: i18nString(UIStrings.domNodes),\n                metrics: [\n                    {\n                        name: 'Nodes',\n                        color: themeSupport.getComputedValue('--override-color-perf-monitor-dom-nodes', this.element),\n                    },\n                ],\n            },\n            {\n                ...defaults,\n                title: i18nString(UIStrings.jsEventListeners),\n                metrics: [\n                    {\n                        name: 'JSEventListeners',\n                        color: themeSupport.getComputedValue('--override-color-perf-monitor-js-event-listeners', this.element),\n                    },\n                ],\n            },\n            {\n                ...defaults,\n                title: i18nString(UIStrings.documents),\n                metrics: [{\n                        name: 'Documents',\n                        color: themeSupport.getComputedValue('--override-color-perf-monitor-documents', this.element),\n                    }],\n            },\n            {\n                ...defaults,\n                title: i18nString(UIStrings.documentFrames),\n                metrics: [{\n                        name: 'Frames',\n                        color: themeSupport.getComputedValue('--override-color-perf-monitor-document-frames', this.element),\n                    }],\n            },\n            {\n                ...defaults,\n                title: i18nString(UIStrings.layoutsSec),\n                metrics: [{\n                        name: 'LayoutCount',\n                        color: themeSupport.getComputedValue('--override-color-perf-monitor-layout-count', this.element),\n                    }],\n            },\n            {\n                ...defaults,\n                title: i18nString(UIStrings.styleRecalcsSec),\n                metrics: [\n                    {\n                        name: 'RecalcStyleCount',\n                        color: themeSupport.getComputedValue('--override-color-perf-monitor-recalc-style-count', this.element),\n                    },\n                ],\n            },\n        ];\n        // Clear any existing child elements.\n        this.element.removeChildren();\n        this.indicators = new Map();\n        for (const chartInfo of this.chartsInfo) {\n            const chartName = chartInfo.metrics[0].name;\n            const active = this.enabledCharts.has(chartName);\n            const indicator = new MetricIndicator(this.element, chartInfo, active, this.onToggle.bind(this, chartName));\n            indicator.element.setAttribute('jslog', `${VisualLogging.toggle()\n                .track({ click: true, keydown: 'Enter' })\n                .context(Platform.StringUtilities.toKebabCase(chartName))}`);\n            this.indicators.set(chartName, indicator);\n        }\n    }\n    onToggle(chartName, active) {\n        if (active) {\n            this.enabledCharts.add(chartName);\n        }\n        else {\n            this.enabledCharts.delete(chartName);\n        }\n        this.enabledChartsSetting.set(Array.from(this.enabledCharts));\n        this.dispatchEventToListeners(\"MetricChanged\" /* Events.METRIC_CHANGED */);\n    }\n    charts() {\n        return this.chartsInfo;\n    }\n    isActive(metricName) {\n        return this.enabledCharts.has(metricName);\n    }\n    updateMetrics(metrics) {\n        for (const name of this.indicators.keys()) {\n            const metric = metrics.get(name);\n            if (metric !== undefined) {\n                const indicator = this.indicators.get(name);\n                if (indicator) {\n                    indicator.setValue(metric);\n                }\n            }\n        }\n    }\n}\nlet numberFormatter;\nlet percentFormatter;\nexport class MetricIndicator {\n    info;\n    element;\n    swatchElement;\n    valueElement;\n    color;\n    constructor(parent, info, active, onToggle) {\n        this.color = info.color || info.metrics[0].color;\n        this.info = info;\n        this.element = parent.createChild('div', 'perfmon-indicator');\n        const chartName = info.metrics[0].name;\n        this.swatchElement = UI.UIUtils.CheckboxLabel.create(info.title, active, undefined, chartName);\n        this.element.appendChild(this.swatchElement);\n        this.swatchElement.checkboxElement.addEventListener('change', () => {\n            onToggle(this.swatchElement.checkboxElement.checked);\n            this.element.classList.toggle('active');\n        });\n        this.valueElement = this.element.createChild('div', 'perfmon-indicator-value');\n        this.valueElement.style.color = this.color;\n        this.element.classList.toggle('active', active);\n    }\n    static formatNumber(value, info) {\n        if (!numberFormatter) {\n            numberFormatter = new Intl.NumberFormat('en-US', { maximumFractionDigits: 1 });\n            percentFormatter = new Intl.NumberFormat('en-US', { maximumFractionDigits: 1, style: 'percent' });\n        }\n        switch (info.format) {\n            case \"Percent\" /* Format.PERCENT */:\n                return percentFormatter.format(value);\n            case \"Bytes\" /* Format.BYTES */:\n                return Platform.NumberUtilities.bytesToString(value);\n            default:\n                return numberFormatter.format(value);\n        }\n    }\n    setValue(value) {\n        this.valueElement.textContent = MetricIndicator.formatNumber(value, this.info);\n    }\n}\nexport const format = new Intl.NumberFormat('en-US', { maximumFractionDigits: 1 });\n//# sourceMappingURL=PerformanceMonitor.js.map"],"names":["styles","UIStrings","str_","i18n.i18n.registerUIStrings","i18nString","i18n.i18n.getLocalizedString","PerformanceMonitorImpl","UI.Widget.HBox","pollIntervalMs","VisualLogging.panel","ThemeSupport.ThemeSupport","ControlPane","chartContainer","UI.ARIAUtils.setLabel","SDK.TargetManager.TargetManager","SDK.PerformanceMetricsModel.PerformanceMetricsModel","performanceMonitorStyles","ThemeSupport.ThemeChangeEvent","model","suspended","animate","data","timestamp","metrics","millisPerWidth","maxCount","ctx","chartInfo","lightGray","Host.Platform.fontFamily","currentTime","sec","x","height","bottomPadding","max","stackedChartBaseLandscape","paths","i","metricInfo","backgroundColor","Common.Color.parse","path","color","parsedColor","width","startTime","value","base10","alpha","info","base","firstDigit","scaleValue","span","visibleHeight","y","calcY","labelText","MetricIndicator","scaleMax","metricName","pixelsPerMs","smooth","lastY","lastX","Platform.NumberUtilities.clamp","midX","Common.ObjectWrapper.ObjectWrapper","parent","Common.Settings.Settings","defaults","themeSupport","chartName","active","indicator","VisualLogging.toggle","Platform.StringUtilities.toKebabCase","name","metric","numberFormatter","percentFormatter","onToggle","UI.UIUtils.CheckboxLabel","Platform.NumberUtilities.bytesToString","format"],"mappings":"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"}