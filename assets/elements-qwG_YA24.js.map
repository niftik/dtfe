{"version":3,"file":"elements-qwG_YA24.js","sources":["../../panels/elements/InspectElementModeController.js"],"sourcesContent":["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nimport * as Common from '../../core/common/common.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport { ElementsPanel } from './ElementsPanel.js';\nlet inspectElementModeController;\nexport class InspectElementModeController {\n    toggleSearchAction;\n    mode;\n    showDetailedInspectTooltipSetting;\n    constructor() {\n        this.toggleSearchAction = UI.ActionRegistry.ActionRegistry.instance().getAction('elements.toggle-element-search');\n        this.mode = \"none\" /* Protocol.Overlay.InspectMode.None */;\n        SDK.TargetManager.TargetManager.instance().addEventListener(\"SuspendStateChanged\" /* SDK.TargetManager.Events.SUSPEND_STATE_CHANGED */, this.suspendStateChanged, this);\n        SDK.TargetManager.TargetManager.instance().addModelListener(SDK.OverlayModel.OverlayModel, \"InspectModeExited\" /* SDK.OverlayModel.Events.EXITED_INSPECT_MODE */, () => this.setMode(\"none\" /* Protocol.Overlay.InspectMode.None */), undefined, { scoped: true });\n        SDK.OverlayModel.OverlayModel.setInspectNodeHandler(this.inspectNode.bind(this));\n        SDK.TargetManager.TargetManager.instance().observeModels(SDK.OverlayModel.OverlayModel, this, { scoped: true });\n        this.showDetailedInspectTooltipSetting =\n            Common.Settings.Settings.instance().moduleSetting('show-detailed-inspect-tooltip');\n        this.showDetailedInspectTooltipSetting.addChangeListener(this.showDetailedInspectTooltipChanged.bind(this));\n        document.addEventListener('keydown', event => {\n            if (event.keyCode !== UI.KeyboardShortcut.Keys.Esc.code) {\n                return;\n            }\n            if (!this.isInInspectElementMode()) {\n                return;\n            }\n            this.setMode(\"none\" /* Protocol.Overlay.InspectMode.None */);\n            event.consume(true);\n            void VisualLogging.logKeyDown(null, event, 'cancel-inspect-mode');\n        }, true);\n    }\n    static instance({ forceNew } = { forceNew: false }) {\n        if (!inspectElementModeController || forceNew) {\n            inspectElementModeController = new InspectElementModeController();\n        }\n        return inspectElementModeController;\n    }\n    modelAdded(overlayModel) {\n        // When DevTools are opening in the inspect element mode, the first target comes in\n        // much later than the InspectorFrontendAPI.enterInspectElementMode event.\n        if (this.mode === \"none\" /* Protocol.Overlay.InspectMode.None */) {\n            return;\n        }\n        void overlayModel.setInspectMode(this.mode, this.showDetailedInspectTooltipSetting.get());\n    }\n    modelRemoved(_overlayModel) {\n    }\n    isInInspectElementMode() {\n        return this.mode !== \"none\" /* Protocol.Overlay.InspectMode.None */;\n    }\n    toggleInspectMode() {\n        let mode;\n        if (this.isInInspectElementMode()) {\n            mode = \"none\" /* Protocol.Overlay.InspectMode.None */;\n        }\n        else {\n            mode = Common.Settings.Settings.instance().moduleSetting('show-ua-shadow-dom').get() ?\n                \"searchForUAShadowDOM\" /* Protocol.Overlay.InspectMode.SearchForUAShadowDOM */ :\n                \"searchForNode\" /* Protocol.Overlay.InspectMode.SearchForNode */;\n        }\n        this.setMode(mode);\n    }\n    captureScreenshotMode() {\n        this.setMode(\"captureAreaScreenshot\" /* Protocol.Overlay.InspectMode.CaptureAreaScreenshot */);\n    }\n    setMode(mode) {\n        if (SDK.TargetManager.TargetManager.instance().allTargetsSuspended()) {\n            return;\n        }\n        this.mode = mode;\n        for (const overlayModel of SDK.TargetManager.TargetManager.instance().models(SDK.OverlayModel.OverlayModel, { scoped: true })) {\n            void overlayModel.setInspectMode(mode, this.showDetailedInspectTooltipSetting.get());\n        }\n        this.toggleSearchAction.setToggled(this.isInInspectElementMode());\n    }\n    suspendStateChanged() {\n        if (!SDK.TargetManager.TargetManager.instance().allTargetsSuspended()) {\n            return;\n        }\n        this.mode = \"none\" /* Protocol.Overlay.InspectMode.None */;\n        this.toggleSearchAction.setToggled(false);\n    }\n    inspectNode(node) {\n        void ElementsPanel.instance().revealAndSelectNode(node, true, true);\n    }\n    showDetailedInspectTooltipChanged() {\n        this.setMode(this.mode);\n    }\n}\nexport class ToggleSearchActionDelegate {\n    handleAction(_context, actionId) {\n        if (Root.Runtime.Runtime.queryParam('isSharedWorker')) {\n            return false;\n        }\n        inspectElementModeController = InspectElementModeController.instance();\n        if (!inspectElementModeController) {\n            return false;\n        }\n        if (actionId === 'elements.toggle-element-search') {\n            inspectElementModeController.toggleInspectMode();\n        }\n        else if (actionId === 'elements.capture-area-screenshot') {\n            inspectElementModeController.captureScreenshotMode();\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=InspectElementModeController.js.map"],"names":["inspectElementModeController","InspectElementModeController","UI.ActionRegistry.ActionRegistry","SDK.TargetManager.TargetManager","SDK.OverlayModel.OverlayModel","Common.Settings.Settings","event","UI.KeyboardShortcut.Keys","VisualLogging.logKeyDown","forceNew","overlayModel","_overlayModel","mode","node","ElementsPanel","ToggleSearchActionDelegate","_context","actionId","Root.Runtime.Runtime"],"mappings":"wtCAmCA,IAAIA,EACG,MAAMC,CAA6B,CACtC,mBACA,KACA,kCACA,aAAc,CACV,KAAK,mBAAqBC,EAAiC,SAAQ,EAAG,UAAU,gCAAgC,EAChH,KAAK,KAAO,OACZC,EAAgC,SAAQ,EAAG,iBAAiB,sBAA4E,KAAK,oBAAqB,IAAI,EACtKA,EAAgC,SAAU,EAAC,iBAAiBC,EAA+B,oBAAuE,IAAM,KAAK,QAAQ,MAA+C,EAAE,OAAW,CAAE,OAAQ,EAAM,CAAA,EACjQA,EAA8B,sBAAsB,KAAK,YAAY,KAAK,IAAI,CAAC,EAC/ED,EAAgC,SAAU,EAAC,cAAcC,EAA+B,KAAM,CAAE,OAAQ,EAAI,CAAE,EAC9G,KAAK,kCACDC,EAAyB,SAAQ,EAAG,cAAc,+BAA+B,EACrF,KAAK,kCAAkC,kBAAkB,KAAK,kCAAkC,KAAK,IAAI,CAAC,EAC1G,SAAS,iBAAiB,UAAWC,GAAS,CACtCA,EAAM,UAAYC,EAAyB,IAAI,MAG9C,KAAK,2BAGV,KAAK,QAAQ,QACbD,EAAM,QAAQ,EAAI,EACbE,EAAyB,KAAMF,EAAO,qBAAqB,EACnE,EAAE,EAAI,CACV,CACD,OAAO,SAAS,CAAE,SAAAG,CAAQ,EAAK,CAAE,SAAU,EAAK,EAAI,CAChD,OAAI,CAACT,GAAgCS,KACjCT,EAA+B,IAAIC,GAEhCD,CACV,CACD,WAAWU,EAAc,CAGjB,KAAK,OAAS,QAGbA,EAAa,eAAe,KAAK,KAAM,KAAK,kCAAkC,IAAG,CAAE,CAC3F,CACD,aAAaC,EAAe,CAC3B,CACD,wBAAyB,CACrB,OAAO,KAAK,OAAS,MACxB,CACD,mBAAoB,CAChB,IAAIC,EACA,KAAK,yBACLA,EAAO,OAGPA,EAAOP,EAAyB,SAAQ,EAAG,cAAc,oBAAoB,EAAE,IAAK,EAChF,uBACA,gBAER,KAAK,QAAQO,CAAI,CACpB,CACD,uBAAwB,CACpB,KAAK,QAAQ,wBAChB,CACD,QAAQA,EAAM,CACV,GAAIT,CAAAA,EAAgC,WAAW,sBAG/C,MAAK,KAAOS,EACZ,UAAWF,KAAgBP,EAAgC,SAAU,EAAC,OAAOC,EAA+B,CAAE,OAAQ,EAAI,CAAE,EACnHM,EAAa,eAAeE,EAAM,KAAK,kCAAkC,IAAG,CAAE,EAEvF,KAAK,mBAAmB,WAAW,KAAK,uBAAwB,CAAA,EACnE,CACD,qBAAsB,CACbT,EAAgC,SAAU,EAAC,oBAAmB,IAGnE,KAAK,KAAO,OACZ,KAAK,mBAAmB,WAAW,EAAK,EAC3C,CACD,YAAYU,EAAM,CACTC,EAAc,WAAW,oBAAoBD,EAAM,GAAM,EAAI,CACrE,CACD,mCAAoC,CAChC,KAAK,QAAQ,KAAK,IAAI,CACzB,CACL,CACO,MAAME,CAA2B,CACpC,aAAaC,EAAUC,EAAU,CAK7B,OAJIC,EAAqB,WAAW,gBAAgB,IAGpDlB,EAA+BC,EAA6B,WACxD,CAACD,GACM,IAEPiB,IAAa,iCACbjB,EAA6B,kBAAiB,EAEzCiB,IAAa,oCAClBjB,EAA6B,sBAAqB,EAE/C,GACV,CACL"}