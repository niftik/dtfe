{"version":3,"file":"WorkspaceDiff-_8IW6Oi2.js","sources":["../../models/workspace_diff/WorkspaceDiff.js"],"sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Diff from '../../third_party/diff/diff.js';\nimport * as FormatterModule from '../formatter/formatter.js';\nimport * as Persistence from '../persistence/persistence.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\nexport class WorkspaceDiffImpl extends Common.ObjectWrapper.ObjectWrapper {\n    uiSourceCodeDiffs;\n    loadingUISourceCodes;\n    modifiedUISourceCodesInternal;\n    constructor(workspace) {\n        super();\n        this.uiSourceCodeDiffs = new WeakMap();\n        this.loadingUISourceCodes = new Map();\n        this.modifiedUISourceCodesInternal = new Set();\n        workspace.addEventListener(Workspace.Workspace.Events.WorkingCopyChanged, this.uiSourceCodeChanged, this);\n        workspace.addEventListener(Workspace.Workspace.Events.WorkingCopyCommitted, this.uiSourceCodeChanged, this);\n        workspace.addEventListener(Workspace.Workspace.Events.UISourceCodeAdded, this.uiSourceCodeAdded, this);\n        workspace.addEventListener(Workspace.Workspace.Events.UISourceCodeRemoved, this.uiSourceCodeRemoved, this);\n        workspace.addEventListener(Workspace.Workspace.Events.ProjectRemoved, this.projectRemoved, this);\n        workspace.uiSourceCodes().forEach(this.updateModifiedState.bind(this));\n    }\n    requestDiff(uiSourceCode, diffRequestOptions) {\n        return this.uiSourceCodeDiff(uiSourceCode).requestDiff(diffRequestOptions);\n    }\n    subscribeToDiffChange(uiSourceCode, callback, thisObj) {\n        this.uiSourceCodeDiff(uiSourceCode).addEventListener(\"DiffChanged\" /* UISourceCodeDiffEvents.DIFF_CHANGED */, callback, thisObj);\n    }\n    unsubscribeFromDiffChange(uiSourceCode, callback, thisObj) {\n        this.uiSourceCodeDiff(uiSourceCode).removeEventListener(\"DiffChanged\" /* UISourceCodeDiffEvents.DIFF_CHANGED */, callback, thisObj);\n    }\n    modifiedUISourceCodes() {\n        return Array.from(this.modifiedUISourceCodesInternal);\n    }\n    isUISourceCodeModified(uiSourceCode) {\n        return this.modifiedUISourceCodesInternal.has(uiSourceCode) || this.loadingUISourceCodes.has(uiSourceCode);\n    }\n    uiSourceCodeDiff(uiSourceCode) {\n        let diff = this.uiSourceCodeDiffs.get(uiSourceCode);\n        if (!diff) {\n            diff = new UISourceCodeDiff(uiSourceCode);\n            this.uiSourceCodeDiffs.set(uiSourceCode, diff);\n        }\n        return diff;\n    }\n    uiSourceCodeChanged(event) {\n        const uiSourceCode = event.data.uiSourceCode;\n        void this.updateModifiedState(uiSourceCode);\n    }\n    uiSourceCodeAdded(event) {\n        const uiSourceCode = event.data;\n        void this.updateModifiedState(uiSourceCode);\n    }\n    uiSourceCodeRemoved(event) {\n        const uiSourceCode = event.data;\n        this.removeUISourceCode(uiSourceCode);\n    }\n    projectRemoved(event) {\n        const project = event.data;\n        for (const uiSourceCode of project.uiSourceCodes()) {\n            this.removeUISourceCode(uiSourceCode);\n        }\n    }\n    removeUISourceCode(uiSourceCode) {\n        this.loadingUISourceCodes.delete(uiSourceCode);\n        const uiSourceCodeDiff = this.uiSourceCodeDiffs.get(uiSourceCode);\n        if (uiSourceCodeDiff) {\n            uiSourceCodeDiff.dispose = true;\n        }\n        this.markAsUnmodified(uiSourceCode);\n    }\n    markAsUnmodified(uiSourceCode) {\n        this.uiSourceCodeProcessedForTest();\n        if (this.modifiedUISourceCodesInternal.delete(uiSourceCode)) {\n            this.dispatchEventToListeners(\"ModifiedStatusChanged\" /* Events.MODIFIED_STATUS_CHANGED */, { uiSourceCode, isModified: false });\n        }\n    }\n    markAsModified(uiSourceCode) {\n        this.uiSourceCodeProcessedForTest();\n        if (this.modifiedUISourceCodesInternal.has(uiSourceCode)) {\n            return;\n        }\n        this.modifiedUISourceCodesInternal.add(uiSourceCode);\n        this.dispatchEventToListeners(\"ModifiedStatusChanged\" /* Events.MODIFIED_STATUS_CHANGED */, { uiSourceCode, isModified: true });\n    }\n    uiSourceCodeProcessedForTest() {\n    }\n    async updateModifiedState(uiSourceCode) {\n        this.loadingUISourceCodes.delete(uiSourceCode);\n        if (uiSourceCode.project().type() !== Workspace.Workspace.projectTypes.Network) {\n            this.markAsUnmodified(uiSourceCode);\n            return;\n        }\n        if (uiSourceCode.isDirty()) {\n            this.markAsModified(uiSourceCode);\n            return;\n        }\n        if (!uiSourceCode.hasCommits()) {\n            this.markAsUnmodified(uiSourceCode);\n            return;\n        }\n        const contentsPromise = Promise.all([\n            this.requestOriginalContentForUISourceCode(uiSourceCode),\n            uiSourceCode.requestContent().then(deferredContent => deferredContent.content),\n        ]);\n        this.loadingUISourceCodes.set(uiSourceCode, contentsPromise);\n        const contents = await contentsPromise;\n        if (this.loadingUISourceCodes.get(uiSourceCode) !== contentsPromise) {\n            return;\n        }\n        this.loadingUISourceCodes.delete(uiSourceCode);\n        if (contents[0] !== null && contents[1] !== null && contents[0] !== contents[1]) {\n            this.markAsModified(uiSourceCode);\n        }\n        else {\n            this.markAsUnmodified(uiSourceCode);\n        }\n    }\n    requestOriginalContentForUISourceCode(uiSourceCode) {\n        return this.uiSourceCodeDiff(uiSourceCode).originalContent();\n    }\n    revertToOriginal(uiSourceCode) {\n        function callback(content) {\n            if (typeof content !== 'string') {\n                return;\n            }\n            uiSourceCode.addRevision(content);\n        }\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.RevisionApplied);\n        return this.requestOriginalContentForUISourceCode(uiSourceCode).then(callback);\n    }\n}\nexport class UISourceCodeDiff extends Common.ObjectWrapper.ObjectWrapper {\n    uiSourceCode;\n    requestDiffPromise;\n    pendingChanges;\n    dispose;\n    constructor(uiSourceCode) {\n        super();\n        this.uiSourceCode = uiSourceCode;\n        uiSourceCode.addEventListener(Workspace.UISourceCode.Events.WorkingCopyChanged, this.uiSourceCodeChanged, this);\n        uiSourceCode.addEventListener(Workspace.UISourceCode.Events.WorkingCopyCommitted, this.uiSourceCodeChanged, this);\n        this.requestDiffPromise = null;\n        this.pendingChanges = null;\n        this.dispose = false;\n    }\n    uiSourceCodeChanged() {\n        if (this.pendingChanges) {\n            clearTimeout(this.pendingChanges);\n            this.pendingChanges = null;\n        }\n        this.requestDiffPromise = null;\n        const content = this.uiSourceCode.content();\n        const delay = (!content || content.length < 65536) ? 0 : UpdateTimeout;\n        this.pendingChanges = window.setTimeout(emitDiffChanged.bind(this), delay);\n        function emitDiffChanged() {\n            if (this.dispose) {\n                return;\n            }\n            this.dispatchEventToListeners(\"DiffChanged\" /* UISourceCodeDiffEvents.DIFF_CHANGED */);\n            this.pendingChanges = null;\n        }\n    }\n    requestDiff(diffRequestOptions) {\n        if (!this.requestDiffPromise) {\n            this.requestDiffPromise = this.innerRequestDiff(diffRequestOptions);\n        }\n        return this.requestDiffPromise;\n    }\n    async originalContent() {\n        const originalNetworkContent = Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance().originalContentForUISourceCode(this.uiSourceCode);\n        if (originalNetworkContent) {\n            return originalNetworkContent;\n        }\n        const content = await this.uiSourceCode.project().requestFileContent(this.uiSourceCode);\n        if (TextUtils.ContentData.ContentData.isError(content)) {\n            return content.error;\n        }\n        return content.asDeferedContent().content;\n    }\n    async innerRequestDiff({ shouldFormatDiff }) {\n        if (this.dispose) {\n            return null;\n        }\n        let baseline = await this.originalContent();\n        if (baseline === null) {\n            return null;\n        }\n        if (baseline.length > 1024 * 1024) {\n            return null;\n        }\n        // ------------ ASYNC ------------\n        if (this.dispose) {\n            return null;\n        }\n        let current = this.uiSourceCode.workingCopy();\n        if (!current && !this.uiSourceCode.contentLoaded()) {\n            current = (await this.uiSourceCode.requestContent()).content;\n        }\n        if (current.length > 1024 * 1024) {\n            return null;\n        }\n        if (this.dispose) {\n            return null;\n        }\n        if (current === null || baseline === null) {\n            return null;\n        }\n        let formattedCurrentMapping;\n        if (shouldFormatDiff) {\n            baseline = (await FormatterModule.ScriptFormatter.format(this.uiSourceCode.contentType(), this.uiSourceCode.mimeType(), baseline))\n                .formattedContent;\n            const formatCurrentResult = await FormatterModule.ScriptFormatter.format(this.uiSourceCode.contentType(), this.uiSourceCode.mimeType(), current);\n            current = formatCurrentResult.formattedContent;\n            formattedCurrentMapping = formatCurrentResult.formattedMapping;\n        }\n        const reNewline = /\\r\\n?|\\n/;\n        const diff = Diff.Diff.DiffWrapper.lineDiff(baseline.split(reNewline), current.split(reNewline));\n        return {\n            diff,\n            formattedCurrentMapping,\n        };\n    }\n}\nlet workspaceDiffImplInstance = null;\nexport function workspaceDiff() {\n    if (!workspaceDiffImplInstance) {\n        workspaceDiffImplInstance = new WorkspaceDiffImpl(Workspace.Workspace.WorkspaceImpl.instance());\n    }\n    return workspaceDiffImplInstance;\n}\nexport const UpdateTimeout = 200;\n//# sourceMappingURL=WorkspaceDiff.js.map"],"names":["WorkspaceDiffImpl","Common.ObjectWrapper.ObjectWrapper","workspace","Workspace.Workspace.Events","uiSourceCode","diffRequestOptions","callback","thisObj","diff","UISourceCodeDiff","event","project","uiSourceCodeDiff","Workspace.Workspace.projectTypes","contentsPromise","deferredContent","contents","content","Host.userMetrics","Host.UserMetrics.Action","Workspace.UISourceCode.Events","delay","UpdateTimeout","emitDiffChanged","originalNetworkContent","Persistence.NetworkPersistenceManager.NetworkPersistenceManager","TextUtils.ContentData.ContentData","shouldFormatDiff","baseline","current","formattedCurrentMapping","FormatterModule.ScriptFormatter.format","formatCurrentResult","reNewline","Diff.Diff.DiffWrapper","workspaceDiffImplInstance","workspaceDiff","Workspace.Workspace.WorkspaceImpl"],"mappings":"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"}