{"version":3,"file":"profiler-DsaRy7yO.js","sources":["../../models/bindings/TempFile.js","../../panels/profiler/ProfileDataGrid.js","../../panels/profiler/BottomUpProfileDataGrid.js","../../panels/profiler/heapProfiler.css.js","../../panels/profiler/ProfileHeader.js","../../panels/profiler/IsolateSelector.js","../../panels/profiler/profileLauncherView.css.js","../../panels/profiler/ProfileLauncherView.js","../../panels/profiler/ProfileSidebarTreeElement.js","../../panels/profiler/profilesPanel.css.js","../../panels/profiler/profilesSidebarTree.css.js","../../panels/profiler/ProfilesPanel.js","../../panels/profiler/HeapDetachedElementsDataGrid.js","../../panels/profiler/ProfileFlameChartDataProvider.js","../../panels/profiler/TopDownProfileDataGrid.js","../../panels/profiler/ProfileView.js","../../panels/profiler/HeapDetachedElementsView.js","../../panels/profiler/HeapTimelineOverview.js","../../panels/profiler/HeapProfileView.js","../../models/heap_snapshot_model/HeapSnapshotModel.js","../../panels/profiler/HeapSnapshotGridNodes.js","../../panels/profiler/HeapSnapshotDataGrids.js","../../panels/profiler/HeapSnapshotProxy.js","../../panels/profiler/ModuleUIStrings.js","../../panels/profiler/HeapSnapshotView.js","../../panels/profiler/ProfileTypeRegistry.js","../../panels/profiler/HeapProfilerPanel.js","../../panels/profiler/liveHeapProfile.css.js","../../panels/profiler/LiveHeapProfileView.js"],"sourcesContent":["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nimport * as Common from '../../core/common/common.js';\nimport { ChunkedFileReader } from './FileUtils.js';\nexport class TempFile {\n    #lastBlob;\n    constructor() {\n        this.#lastBlob = null;\n    }\n    write(pieces) {\n        if (this.#lastBlob) {\n            pieces.unshift(this.#lastBlob);\n        }\n        this.#lastBlob = new Blob(pieces, { type: 'text/plain' });\n    }\n    read() {\n        return this.readRange();\n    }\n    size() {\n        return this.#lastBlob ? this.#lastBlob.size : 0;\n    }\n    async readRange(startOffset, endOffset) {\n        if (!this.#lastBlob) {\n            Common.Console.Console.instance().error('Attempt to read a temp file that was never written');\n            return '';\n        }\n        const blob = typeof startOffset === 'number' || typeof endOffset === 'number' ?\n            this.#lastBlob.slice(startOffset, endOffset) :\n            this.#lastBlob;\n        const reader = new FileReader();\n        try {\n            await new Promise((resolve, reject) => {\n                reader.onloadend = resolve;\n                reader.onerror = reject;\n                reader.readAsText(blob);\n            });\n        }\n        catch (error) {\n            Common.Console.Console.instance().error('Failed to read from temp file: ' + error.message);\n        }\n        return reader.result;\n    }\n    async copyToOutputStream(outputStream, progress) {\n        if (!this.#lastBlob) {\n            void outputStream.close();\n            return null;\n        }\n        const reader = new ChunkedFileReader(this.#lastBlob, 10 * 1000 * 1000, progress);\n        return reader.read(outputStream).then(success => success ? null : reader.error());\n    }\n    remove() {\n        this.#lastBlob = null;\n    }\n}\n//# sourceMappingURL=TempFile.js.map","// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/*\n * Copyright (C) 2009 280 North Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nconst UIStrings = {\n    /**\n     * @description This message is presented as a tooltip when developers investigate the performance\n     * of a page. The tooltip alerts developers that some parts of code in execution were not optimized\n     * (made to run faster) and that associated timing information must be considered with this in\n     * mind. The placeholder text is the reason the code was not optimized.\n     * @example {Optimized too many times} PH1\n     */\n    notOptimizedS: 'Not optimized: {PH1}',\n    /**\n     *@description Generic text with two placeholders separated by a comma\n     *@example {1 613 680} PH1\n     *@example {44 %} PH2\n     */\n    genericTextTwoPlaceholders: '{PH1}, {PH2}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/ProfileDataGrid.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ProfileDataGridNode extends DataGrid.DataGrid.DataGridNode {\n    searchMatchedSelfColumn;\n    searchMatchedTotalColumn;\n    searchMatchedFunctionColumn;\n    profileNode;\n    tree;\n    childrenByCallUID;\n    lastComparator;\n    callUID;\n    self;\n    total;\n    functionName;\n    deoptReason;\n    url;\n    linkElement;\n    populated;\n    savedSelf;\n    savedTotal;\n    savedChildren;\n    constructor(profileNode, owningTree, hasChildren) {\n        super(null, hasChildren);\n        this.searchMatchedSelfColumn = false;\n        this.searchMatchedTotalColumn = false;\n        this.searchMatchedFunctionColumn = false;\n        this.profileNode = profileNode;\n        this.tree = owningTree;\n        this.childrenByCallUID = new Map();\n        this.lastComparator = null;\n        this.callUID = profileNode.callUID;\n        this.self = profileNode.self;\n        this.total = profileNode.total;\n        this.functionName = UI.UIUtils.beautifyFunctionName(profileNode.functionName);\n        this.deoptReason = profileNode.deoptReason || '';\n        this.url = profileNode.url;\n        this.linkElement = null;\n        this.populated = false;\n    }\n    static sort(gridNodeGroups, comparator, force) {\n        for (let gridNodeGroupIndex = 0; gridNodeGroupIndex < gridNodeGroups.length; ++gridNodeGroupIndex) {\n            const gridNodes = gridNodeGroups[gridNodeGroupIndex];\n            const count = gridNodes.length;\n            for (let index = 0; index < count; ++index) {\n                const gridNode = gridNodes[index];\n                // If the grid node is collapsed, then don't sort children (save operation for later).\n                // If the grid node has the same sorting as previously, then there is no point in sorting it again.\n                if (!force && (!gridNode.expanded || gridNode.lastComparator === comparator)) {\n                    if (gridNode.children.length) {\n                        gridNode.shouldRefreshChildren = true;\n                    }\n                    continue;\n                }\n                gridNode.lastComparator = comparator;\n                const children = gridNode.children;\n                const childCount = children.length;\n                if (childCount) {\n                    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n                    // @ts-expect-error\n                    children.sort(comparator);\n                    for (let childIndex = 0; childIndex < childCount; ++childIndex) {\n                        children[childIndex].recalculateSiblings(childIndex);\n                    }\n                    gridNodeGroups.push(children);\n                }\n            }\n        }\n    }\n    static merge(container, child, shouldAbsorb) {\n        container.self += child.self;\n        if (!shouldAbsorb) {\n            container.total += child.total;\n        }\n        let children = container.children.slice();\n        container.removeChildren();\n        let count = children.length;\n        for (let index = 0; index < count; ++index) {\n            if (!shouldAbsorb || children[index] !== child) {\n                container.appendChild(children[index]);\n            }\n        }\n        children = child.children.slice();\n        count = children.length;\n        for (let index = 0; index < count; ++index) {\n            const orphanedChild = children[index];\n            const existingChild = container.childrenByCallUID.get(orphanedChild.callUID);\n            if (existingChild) {\n                existingChild.merge(orphanedChild, false);\n            }\n            else {\n                container.appendChild(orphanedChild);\n            }\n        }\n    }\n    static populate(container) {\n        if (container.populated) {\n            return;\n        }\n        container.populated = true;\n        container.populateChildren();\n        const currentComparator = container.tree.lastComparator;\n        if (currentComparator) {\n            container.sort(currentComparator, true);\n        }\n    }\n    createCell(columnId) {\n        switch (columnId) {\n            case 'self': {\n                const cell = this.createValueCell(this.self, this.selfPercent, columnId);\n                cell.classList.toggle('highlight', this.searchMatchedSelfColumn);\n                return cell;\n            }\n            case 'total': {\n                const cell = this.createValueCell(this.total, this.totalPercent, columnId);\n                cell.classList.toggle('highlight', this.searchMatchedTotalColumn);\n                return cell;\n            }\n            case 'function': {\n                const cell = this.createTD(columnId);\n                cell.classList.toggle('highlight', this.searchMatchedFunctionColumn);\n                if (this.deoptReason) {\n                    cell.classList.add('not-optimized');\n                    const warningIcon = new IconButton.Icon.Icon();\n                    warningIcon.data = { iconName: 'warning-filled', color: 'var(--icon-warning)', width: '14px', height: '14px' };\n                    warningIcon.classList.add('profile-warn-marker');\n                    UI.Tooltip.Tooltip.install(warningIcon, i18nString(UIStrings.notOptimizedS, { PH1: this.deoptReason }));\n                    cell.appendChild(warningIcon);\n                }\n                UI.UIUtils.createTextChild(cell, this.functionName);\n                if (this.profileNode.scriptId === '0') {\n                    return cell;\n                }\n                const urlElement = this.tree.formatter.linkifyNode(this);\n                if (!urlElement) {\n                    return cell;\n                }\n                urlElement.style.maxWidth = '75%';\n                cell.appendChild(urlElement);\n                this.linkElement = urlElement;\n                return cell;\n            }\n        }\n        return super.createCell(columnId);\n    }\n    createValueCell(value, percent, columnId) {\n        const cell = document.createElement('td');\n        cell.classList.add('numeric-column');\n        const div = cell.createChild('div', 'profile-multiple-values');\n        const valueSpan = div.createChild('span');\n        const valueText = this.tree.formatter.formatValue(value, this);\n        valueSpan.textContent = valueText;\n        const percentSpan = div.createChild('span', 'percent-column');\n        const percentText = this.tree.formatter.formatPercent(percent, this);\n        percentSpan.textContent = percentText;\n        const valueAccessibleText = this.tree.formatter.formatValueAccessibleText(value, this);\n        this.setCellAccessibleName(i18nString(UIStrings.genericTextTwoPlaceholders, { PH1: valueAccessibleText, PH2: percentText }), cell, columnId);\n        return cell;\n    }\n    sort(comparator, force) {\n        const sortComparator = comparator;\n        return ProfileDataGridNode.sort([[this]], sortComparator, force);\n    }\n    insertChild(child, index) {\n        const profileDataGridNode = child;\n        super.insertChild(profileDataGridNode, index);\n        this.childrenByCallUID.set(profileDataGridNode.callUID, profileDataGridNode);\n    }\n    removeChild(profileDataGridNode) {\n        super.removeChild(profileDataGridNode);\n        this.childrenByCallUID.delete(profileDataGridNode.callUID);\n    }\n    removeChildren() {\n        super.removeChildren();\n        this.childrenByCallUID.clear();\n    }\n    findChild(node) {\n        if (!node) {\n            return null;\n        }\n        return this.childrenByCallUID.get(node.callUID) || null;\n    }\n    get selfPercent() {\n        return this.self / this.tree.total * 100.0;\n    }\n    get totalPercent() {\n        return this.total / this.tree.total * 100.0;\n    }\n    populate() {\n        ProfileDataGridNode.populate(this);\n    }\n    populateChildren() {\n        // Not implemented.\n    }\n    // When focusing and collapsing we modify lots of nodes in the tree.\n    // This allows us to restore them all to their original state when we revert.\n    save() {\n        if (this.savedChildren) {\n            return;\n        }\n        this.savedSelf = this.self;\n        this.savedTotal = this.total;\n        this.savedChildren = this.children.slice();\n    }\n    /**\n     * When focusing and collapsing we modify lots of nodes in the tree.\n     * This allows us to restore them all to their original state when we revert.\n     */\n    restore() {\n        if (!this.savedChildren) {\n            return;\n        }\n        if (this.savedSelf && this.savedTotal) {\n            this.self = this.savedSelf;\n            this.total = this.savedTotal;\n        }\n        this.removeChildren();\n        const children = this.savedChildren;\n        const count = children.length;\n        for (let index = 0; index < count; ++index) {\n            children[index].restore();\n            this.appendChild(children[index]);\n        }\n    }\n    merge(child, shouldAbsorb) {\n        ProfileDataGridNode.merge(this, child, shouldAbsorb);\n    }\n}\nexport class ProfileDataGridTree {\n    tree;\n    self;\n    children;\n    formatter;\n    searchableView;\n    total;\n    lastComparator;\n    childrenByCallUID;\n    deepSearch;\n    populated;\n    searchResults;\n    savedTotal;\n    savedChildren;\n    searchResultIndex = -1;\n    constructor(formatter, searchableView, total) {\n        this.tree = this;\n        this.self = 0;\n        this.children = [];\n        this.formatter = formatter;\n        this.searchableView = searchableView;\n        this.total = total;\n        this.lastComparator = null;\n        this.childrenByCallUID = new Map();\n        this.deepSearch = true;\n        this.populated = false;\n    }\n    static propertyComparator(property, isAscending) {\n        let comparator = propertyComparators[(isAscending ? 1 : 0)][property];\n        if (!comparator) {\n            if (isAscending) {\n                comparator = function (lhs, rhs) {\n                    if (lhs[property] < rhs[property]) {\n                        return -1;\n                    }\n                    if (lhs[property] > rhs[property]) {\n                        return 1;\n                    }\n                    return 0;\n                };\n            }\n            else {\n                comparator = function (lhs, rhs) {\n                    if (lhs[property] > rhs[property]) {\n                        return -1;\n                    }\n                    if (lhs[property] < rhs[property]) {\n                        return 1;\n                    }\n                    return 0;\n                };\n            }\n            propertyComparators[(isAscending ? 1 : 0)][property] = comparator;\n        }\n        return comparator;\n    }\n    get expanded() {\n        return true;\n    }\n    appendChild(child) {\n        this.insertChild(child, this.children.length);\n    }\n    focus(_profileDataGridNode) {\n    }\n    exclude(_profileDataGridNode) {\n    }\n    insertChild(child, index) {\n        const childToInsert = child;\n        this.children.splice(index, 0, childToInsert);\n        this.childrenByCallUID.set(childToInsert.callUID, child);\n    }\n    removeChildren() {\n        this.children = [];\n        this.childrenByCallUID.clear();\n    }\n    populateChildren() {\n        // Not implemented.\n    }\n    findChild(node) {\n        if (!node) {\n            return null;\n        }\n        return this.childrenByCallUID.get(node.callUID) || null;\n    }\n    sort(comparator, force) {\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n        // @ts-expect-error\n        return ProfileDataGridNode.sort([[this]], comparator, force);\n    }\n    save() {\n        if (this.savedChildren) {\n            return;\n        }\n        this.savedTotal = this.total;\n        this.savedChildren = this.children.slice();\n    }\n    restore() {\n        if (!this.savedChildren) {\n            return;\n        }\n        this.children = this.savedChildren;\n        if (this.savedTotal) {\n            this.total = this.savedTotal;\n        }\n        const children = this.children;\n        const count = children.length;\n        for (let index = 0; index < count; ++index) {\n            children[index].restore();\n        }\n        this.savedChildren = null;\n    }\n    matchFunction(searchConfig) {\n        const query = searchConfig.query.trim();\n        if (!query.length) {\n            return null;\n        }\n        const greaterThan = (query.startsWith('>'));\n        const lessThan = (query.startsWith('<'));\n        let equalTo = (query.startsWith('=') || ((greaterThan || lessThan) && query.indexOf('=') === 1));\n        const percentUnits = (query.endsWith('%'));\n        const millisecondsUnits = (query.length > 2 && query.endsWith('ms'));\n        const secondsUnits = (!millisecondsUnits && query.endsWith('s'));\n        let queryNumber = parseFloat(query);\n        if (greaterThan || lessThan || equalTo) {\n            if (equalTo && (greaterThan || lessThan)) {\n                queryNumber = parseFloat(query.substring(2));\n            }\n            else {\n                queryNumber = parseFloat(query.substring(1));\n            }\n        }\n        const queryNumberMilliseconds = (secondsUnits ? (queryNumber * 1000) : queryNumber);\n        // Make equalTo implicitly true if it wasn't specified there is no other operator.\n        if (!isNaN(queryNumber) && !(greaterThan || lessThan)) {\n            equalTo = true;\n        }\n        const matcher = Platform.StringUtilities.createPlainTextSearchRegex(query, 'i');\n        function matchesQuery(profileDataGridNode) {\n            profileDataGridNode.searchMatchedSelfColumn = false;\n            profileDataGridNode.searchMatchedTotalColumn = false;\n            profileDataGridNode.searchMatchedFunctionColumn = false;\n            if (percentUnits) {\n                if (lessThan) {\n                    if (profileDataGridNode.selfPercent < queryNumber) {\n                        profileDataGridNode.searchMatchedSelfColumn = true;\n                    }\n                    if (profileDataGridNode.totalPercent < queryNumber) {\n                        profileDataGridNode.searchMatchedTotalColumn = true;\n                    }\n                }\n                else if (greaterThan) {\n                    if (profileDataGridNode.selfPercent > queryNumber) {\n                        profileDataGridNode.searchMatchedSelfColumn = true;\n                    }\n                    if (profileDataGridNode.totalPercent > queryNumber) {\n                        profileDataGridNode.searchMatchedTotalColumn = true;\n                    }\n                }\n                if (equalTo) {\n                    if (profileDataGridNode.selfPercent === queryNumber) {\n                        profileDataGridNode.searchMatchedSelfColumn = true;\n                    }\n                    if (profileDataGridNode.totalPercent === queryNumber) {\n                        profileDataGridNode.searchMatchedTotalColumn = true;\n                    }\n                }\n            }\n            else if (millisecondsUnits || secondsUnits) {\n                if (lessThan) {\n                    if (profileDataGridNode.self < queryNumberMilliseconds) {\n                        profileDataGridNode.searchMatchedSelfColumn = true;\n                    }\n                    if (profileDataGridNode.total < queryNumberMilliseconds) {\n                        profileDataGridNode.searchMatchedTotalColumn = true;\n                    }\n                }\n                else if (greaterThan) {\n                    if (profileDataGridNode.self > queryNumberMilliseconds) {\n                        profileDataGridNode.searchMatchedSelfColumn = true;\n                    }\n                    if (profileDataGridNode.total > queryNumberMilliseconds) {\n                        profileDataGridNode.searchMatchedTotalColumn = true;\n                    }\n                }\n                if (equalTo) {\n                    if (profileDataGridNode.self === queryNumberMilliseconds) {\n                        profileDataGridNode.searchMatchedSelfColumn = true;\n                    }\n                    if (profileDataGridNode.total === queryNumberMilliseconds) {\n                        profileDataGridNode.searchMatchedTotalColumn = true;\n                    }\n                }\n            }\n            if (profileDataGridNode.functionName.match(matcher) ||\n                (profileDataGridNode.url && profileDataGridNode.url.match(matcher))) {\n                profileDataGridNode.searchMatchedFunctionColumn = true;\n            }\n            if (profileDataGridNode.searchMatchedSelfColumn || profileDataGridNode.searchMatchedTotalColumn ||\n                profileDataGridNode.searchMatchedFunctionColumn) {\n                profileDataGridNode.refresh();\n                return true;\n            }\n            return false;\n        }\n        return matchesQuery;\n    }\n    performSearch(searchConfig, shouldJump, jumpBackwards) {\n        this.onSearchCanceled();\n        const matchesQuery = this.matchFunction(searchConfig);\n        if (!matchesQuery) {\n            return;\n        }\n        this.searchResults = [];\n        const deepSearch = this.deepSearch;\n        let current;\n        for (current = this.children[0]; current; current = current.traverseNextNode(!deepSearch, null, !deepSearch)) {\n            const item = current;\n            if (!item) {\n                break;\n            }\n            if (matchesQuery(item)) {\n                this.searchResults.push({ profileNode: item });\n            }\n        }\n        this.searchResultIndex = jumpBackwards ? 0 : this.searchResults.length - 1;\n        this.searchableView.updateSearchMatchesCount(this.searchResults.length);\n        this.searchableView.updateCurrentMatchIndex(this.searchResultIndex);\n    }\n    onSearchCanceled() {\n        if (this.searchResults) {\n            for (let i = 0; i < this.searchResults.length; ++i) {\n                const profileNode = this.searchResults[i].profileNode;\n                profileNode.searchMatchedSelfColumn = false;\n                profileNode.searchMatchedTotalColumn = false;\n                profileNode.searchMatchedFunctionColumn = false;\n                profileNode.refresh();\n            }\n        }\n        this.searchResults = [];\n        this.searchResultIndex = -1;\n    }\n    jumpToNextSearchResult() {\n        if (!this.searchResults || !this.searchResults.length) {\n            return;\n        }\n        this.searchResultIndex = (this.searchResultIndex + 1) % this.searchResults.length;\n        this.jumpToSearchResult(this.searchResultIndex);\n    }\n    jumpToPreviousSearchResult() {\n        if (!this.searchResults || !this.searchResults.length) {\n            return;\n        }\n        this.searchResultIndex = (this.searchResultIndex - 1 + this.searchResults.length) % this.searchResults.length;\n        this.jumpToSearchResult(this.searchResultIndex);\n    }\n    supportsCaseSensitiveSearch() {\n        return true;\n    }\n    supportsRegexSearch() {\n        return false;\n    }\n    jumpToSearchResult(index) {\n        const searchResult = this.searchResults[index];\n        if (!searchResult) {\n            return;\n        }\n        const profileNode = searchResult.profileNode;\n        profileNode.revealAndSelect();\n        this.searchableView.updateCurrentMatchIndex(index);\n    }\n}\nconst propertyComparators = [{}, {}];\n//# sourceMappingURL=ProfileDataGrid.js.map","// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/*\n * Copyright (C) 2009 280 North Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n// Bottom Up Profiling shows the entire callstack backwards:\n// The root node is a representation of each individual function called, and each child of that node represents\n// a reverse-callstack showing how many of those calls came from it. So, unlike top-down, the statistics in\n// each child still represent the root node. We have to be particularly careful of recursion with this mode\n// because a root node can represent itself AND an ancestor.\nimport * as Platform from '../../core/platform/platform.js';\nimport { ProfileDataGridNode, ProfileDataGridTree } from './ProfileDataGrid.js';\nexport class BottomUpProfileDataGridNode extends ProfileDataGridNode {\n    remainingNodeInfos;\n    constructor(profileNode, owningTree) {\n        super(profileNode, owningTree, profileNode.parent !== null && Boolean(profileNode.parent.parent));\n        this.remainingNodeInfos = [];\n    }\n    static sharedPopulate(container) {\n        if (container.remainingNodeInfos === undefined) {\n            return;\n        }\n        const remainingNodeInfos = container.remainingNodeInfos;\n        const count = remainingNodeInfos.length;\n        for (let index = 0; index < count; ++index) {\n            const nodeInfo = remainingNodeInfos[index];\n            const ancestor = nodeInfo.ancestor;\n            const focusNode = nodeInfo.focusNode;\n            let child = container.findChild(ancestor);\n            // If we already have this child, then merge the data together.\n            if (child) {\n                const totalAccountedFor = nodeInfo.totalAccountedFor;\n                child.self += focusNode.self;\n                if (!totalAccountedFor) {\n                    child.total += focusNode.total;\n                }\n            }\n            else {\n                child = new BottomUpProfileDataGridNode(ancestor, container.tree);\n                if (ancestor !== focusNode) {\n                    // But the actual statistics from the \"root\" node (bottom of the callstack).\n                    child.self = focusNode.self;\n                    child.total = focusNode.total;\n                }\n                container.appendChild(child);\n            }\n            const parent = ancestor.parent;\n            if (parent && parent.parent) {\n                nodeInfo.ancestor = parent;\n                if (!child.remainingNodeInfos) {\n                    child.remainingNodeInfos = [];\n                }\n                child.remainingNodeInfos.push(nodeInfo);\n            }\n        }\n        delete container.remainingNodeInfos;\n    }\n    takePropertiesFromProfileDataGridNode(profileDataGridNode) {\n        this.save();\n        this.self = profileDataGridNode.self;\n        this.total = profileDataGridNode.total;\n    }\n    /**\n     * When focusing, we keep just the members of the callstack.\n     */\n    keepOnlyChild(child) {\n        this.save();\n        this.removeChildren();\n        this.appendChild(child);\n    }\n    exclude(aCallUID) {\n        if (this.remainingNodeInfos) {\n            this.populate();\n        }\n        this.save();\n        const children = this.children;\n        let index = this.children.length;\n        while (index--) {\n            children[index].exclude(aCallUID);\n        }\n        const child = this.childrenByCallUID.get(aCallUID);\n        if (child) {\n            this.merge(child, true);\n        }\n    }\n    restore() {\n        super.restore();\n        if (!this.children.length) {\n            this.setHasChildren(this.willHaveChildren(this.profileNode));\n        }\n    }\n    merge(child, shouldAbsorb) {\n        this.self -= child.self;\n        super.merge(child, shouldAbsorb);\n    }\n    populateChildren() {\n        BottomUpProfileDataGridNode.sharedPopulate(this);\n    }\n    willHaveChildren(profileNode) {\n        // In bottom up mode, our parents are our children since we display an inverted tree.\n        // However, we don't want to show the very top parent since it is redundant.\n        return Boolean(profileNode.parent && profileNode.parent.parent);\n    }\n}\nexport class BottomUpProfileDataGridTree extends ProfileDataGridTree {\n    deepSearch;\n    remainingNodeInfos;\n    constructor(formatter, searchableView, rootProfileNode, total) {\n        super(formatter, searchableView, total);\n        this.deepSearch = false;\n        // Iterate each node in pre-order.\n        let profileNodeUIDs = 0;\n        const profileNodeGroups = [[], [rootProfileNode]];\n        const visitedProfileNodesForCallUID = new Map();\n        this.remainingNodeInfos = [];\n        for (let profileNodeGroupIndex = 0; profileNodeGroupIndex < profileNodeGroups.length; ++profileNodeGroupIndex) {\n            const parentProfileNodes = profileNodeGroups[profileNodeGroupIndex];\n            const profileNodes = profileNodeGroups[++profileNodeGroupIndex];\n            const count = profileNodes.length;\n            const profileNodeUIDValues = new WeakMap();\n            for (let index = 0; index < count; ++index) {\n                const profileNode = profileNodes[index];\n                if (!profileNodeUIDValues.get(profileNode)) {\n                    profileNodeUIDValues.set(profileNode, ++profileNodeUIDs);\n                }\n                if (profileNode.parent) {\n                    // The total time of this ancestor is accounted for if we're in any form of recursive cycle.\n                    let visitedNodes = visitedProfileNodesForCallUID.get(profileNode.callUID);\n                    let totalAccountedFor = false;\n                    if (!visitedNodes) {\n                        visitedNodes = new Set();\n                        visitedProfileNodesForCallUID.set(profileNode.callUID, visitedNodes);\n                    }\n                    else {\n                        // The total time for this node has already been accounted for iff one of it's parents has already been visited.\n                        // We can do this check in this style because we are traversing the tree in pre-order.\n                        const parentCount = parentProfileNodes.length;\n                        for (let parentIndex = 0; parentIndex < parentCount; ++parentIndex) {\n                            const parentUID = profileNodeUIDValues.get(parentProfileNodes[parentIndex]);\n                            if (parentUID && visitedNodes.has(parentUID)) {\n                                totalAccountedFor = true;\n                                break;\n                            }\n                        }\n                    }\n                    const uid = profileNodeUIDValues.get(profileNode);\n                    if (uid) {\n                        visitedNodes.add(uid);\n                    }\n                    this.remainingNodeInfos.push({ ancestor: profileNode, focusNode: profileNode, totalAccountedFor });\n                }\n                const children = profileNode.children;\n                if (children.length) {\n                    profileNodeGroups.push(parentProfileNodes.concat([profileNode]));\n                    profileNodeGroups.push(children);\n                }\n            }\n        }\n        // Populate the top level nodes.\n        ProfileDataGridNode.populate(this);\n        return this;\n    }\n    /**\n     * When focusing, we keep the entire callstack up to this ancestor.\n     */\n    focus(profileDataGridNode) {\n        if (!profileDataGridNode) {\n            return;\n        }\n        this.save();\n        let currentNode = profileDataGridNode;\n        let focusNode = profileDataGridNode;\n        while (currentNode.parent && (currentNode instanceof BottomUpProfileDataGridNode)) {\n            currentNode.takePropertiesFromProfileDataGridNode(profileDataGridNode);\n            focusNode = currentNode;\n            currentNode = currentNode.parent;\n            if (currentNode instanceof BottomUpProfileDataGridNode) {\n                currentNode.keepOnlyChild(focusNode);\n            }\n        }\n        this.children = [focusNode];\n        this.total = profileDataGridNode.total;\n    }\n    exclude(profileDataGridNode) {\n        if (!profileDataGridNode) {\n            return;\n        }\n        this.save();\n        const excludedCallUID = profileDataGridNode.callUID;\n        const excludedTopLevelChild = this.childrenByCallUID.get(excludedCallUID);\n        // If we have a top level node that is excluded, get rid of it completely (not keeping children),\n        // since bottom up data relies entirely on the root node.\n        if (excludedTopLevelChild) {\n            Platform.ArrayUtilities.removeElement(this.children, excludedTopLevelChild);\n        }\n        const children = this.children;\n        const count = children.length;\n        for (let index = 0; index < count; ++index) {\n            children[index].exclude(excludedCallUID);\n        }\n        if (this.lastComparator) {\n            this.sort(this.lastComparator, true);\n        }\n    }\n    populateChildren() {\n        BottomUpProfileDataGridNode.sharedPopulate(this);\n    }\n}\n//# sourceMappingURL=BottomUpProfileDataGrid.js.map","// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(\n`/*\n * Copyright (C) 2009 Google Inc. All rights reserved.\n * Copyright (C) 2010 Apple Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n.heap-snapshot-view {\n  overflow: hidden;\n}\n\n.heap-snapshot-view .data-grid {\n  border: none;\n  flex: auto;\n}\n\n.heap-snapshot-view .data-grid tr:empty {\n  height: 16px;\n  visibility: hidden;\n}\n\n.heap-snapshot-view .data-grid span.percent-column {\n  width: 35px !important; /* stylelint-disable-line declaration-no-important */\n}\n\n.heap-snapshot-view .object-value-object,\n.object-value-node {\n  display: inline;\n  position: static;\n}\n\n.heap-snapshot-view .object-value-string {\n  white-space: nowrap;\n}\n\n.heap-snapshot-view td.object-column .objects-count {\n  margin-left: 10px;\n  font-size: 11px;\n  color: var(--sys-color-token-subtle);\n}\n\n.heap-snapshot-view tr:not(.selected) .object-value-id {\n  color: var(--sys-color-token-subtle);\n}\n\n.profile-view .heap-tracking-overview {\n  flex: 0 0 80px;\n  height: 80px;\n}\n\n.heap-snapshot-view .retaining-paths-view {\n  overflow: hidden;\n}\n\n.heap-snapshot-view .heap-snapshot-view-resizer {\n  background-color: var(--sys-color-surface1);\n  display: flex;\n  flex: 0 0 21px;\n}\n\n.heap-snapshot-view td.object-column > div > span {\n  margin-right: 6px;\n}\n\n.heap-snapshot-view .heap-snapshot-view-resizer .title {\n  flex: 0 1 auto;\n  overflow: hidden;\n  white-space: nowrap;\n}\n\n.heap-snapshot-view .heap-snapshot-view-resizer .verticalResizerIcon {\n  background-image: var(--image-file-toolbarResizerVertical);\n  background-repeat: no-repeat;\n  background-position: center;\n  flex: 0 0 28px;\n  margin-left: auto;\n}\n\n.heap-snapshot-view .heap-snapshot-view-resizer .title > span {\n  display: inline-block;\n  padding-top: 3px;\n  vertical-align: middle;\n  margin-left: 4px;\n  margin-right: 8px;\n}\n\n.heap-snapshot-view .heap-snapshot-view-resizer * {\n  pointer-events: none;\n}\n\n.heap-snapshot-view tr:not(.selected) td.object-column span.highlight {\n  background-color: inherit;\n}\n\n.heap-snapshot-view td.object-column span.heap-object-source-link {\n  float: right;\n}\n\n.heap-snapshot-view td.object-column span.heap-object-source-link:empty {\n  animation: fadeInOut 2s infinite;\n}\n\n.heap-snapshot-view td.object-column span.heap-object-source-link:empty::before {\n  content: \"\\\\b7\\\\b7\";\n  font-weight: bold;\n}\n\n@keyframes fadeInOut {\n  0% {\n    transform: rotate(0);\n  }\n\n  50% {\n    transform: rotate(0.5turn);\n  }\n\n  100% {\n    transform: rotate(1turn);\n  }\n}\n\n.heap-object-tag {\n  height: 14px;\n  width: 14px;\n}\n\n.heap-snapshot-view tr:not(.selected) td.object-column span.heap-object-tag,\n.heap-snapshot-view tr:not(.selected) td.object-column span.grayed {\n  color: var(--sys-color-token-subtle);\n}\n\n.heap-snapshot-view tr:not(.selected) .cycled-ancestor-node,\n.heap-snapshot-view tr:not(.selected) .unreachable-ancestor-node {\n  opacity: 60%;\n}\n\n#heap-recording-view .profile-view {\n  top: 80px;\n}\n\n.heap-overview-container {\n  overflow: hidden;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 80px;\n}\n\n#heap-recording-overview-grid .resources-dividers-label-bar {\n  pointer-events: auto;\n}\n\n.heap-recording-overview-canvas {\n  position: absolute;\n  top: 20px;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n.heap-snapshot-statistics-view {\n  overflow: auto;\n}\n\n.heap-snapshot-stats-pie-chart {\n  margin: 12px 30px;\n  flex-shrink: 0;\n}\n\n.heap-allocation-stack .stack-frame {\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid var(--sys-color-divider);\n  padding: 2px;\n}\n\n.heap-allocation-stack .stack-frame:focus {\n  background-color: var(--sys-color-tonal-container);\n  color: var(--sys-color-on-tonal-container);\n}\n\n.heap-allocation-stack .stack-frame:hover:not(:focus) {\n  background-color: var(--sys-color-state-hover-on-subtle);\n}\n\n.heap-allocation-stack .stack-frame .devtools-link {\n  color: var(--sys-color-primary);\n}\n\n.no-heap-allocation-stack {\n  padding: 5px;\n}\n\n@media (forced-colors: active) {\n  .cycled-ancestor-node {\n    opacity: 100%;\n  }\n\n  .heap-snapshot-view td.object-column .objects-count,\n  .heap-snapshot-view tr:not(.selected) td.object-column span.heap-object-tag,\n  .heap-snapshot-view tr:not(.selected) .object-value-id {\n    color: ButtonText;\n  }\n}\n\n.detached-elements-view {\n  overflow: auto;\n}\n\n/*# sourceURL=heapProfiler.css */\n`);\n\nexport default styles;\n","// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nexport class ProfileHeader extends Common.ObjectWrapper.ObjectWrapper {\n    profileTypeInternal;\n    title;\n    uid;\n    fromFileInternal;\n    tempFile;\n    constructor(profileType, title) {\n        super();\n        this.profileTypeInternal = profileType;\n        this.title = title;\n        this.uid = profileType.incrementProfileUid();\n        this.fromFileInternal = false;\n        this.tempFile = null;\n    }\n    setTitle(title) {\n        this.title = title;\n        this.dispatchEventToListeners(\"ProfileTitleChanged\" /* Events.PROFILE_TITLE_CHANGED */, this);\n    }\n    profileType() {\n        return this.profileTypeInternal;\n    }\n    updateStatus(subtitle, wait) {\n        this.dispatchEventToListeners(\"UpdateStatus\" /* Events.UPDATE_STATUS */, new StatusUpdate(subtitle, wait));\n    }\n    /**\n     * Must be implemented by subclasses.\n     */\n    createSidebarTreeElement(_dataDisplayDelegate) {\n        throw new Error('Not implemented.');\n    }\n    createView(_dataDisplayDelegate) {\n        throw new Error('Not implemented.');\n    }\n    removeTempFile() {\n        if (this.tempFile) {\n            this.tempFile.remove();\n        }\n    }\n    dispose() {\n    }\n    canSaveToFile() {\n        return false;\n    }\n    saveToFile() {\n        throw new Error('Not implemented.');\n    }\n    loadFromFile(_file) {\n        throw new Error('Not implemented.');\n    }\n    fromFile() {\n        return this.fromFileInternal;\n    }\n    setFromFile() {\n        this.fromFileInternal = true;\n    }\n    setProfile(_profile) {\n    }\n}\nexport class StatusUpdate {\n    subtitle;\n    wait;\n    constructor(subtitle, wait) {\n        this.subtitle = subtitle;\n        this.wait = wait;\n    }\n}\nexport class ProfileType extends Common.ObjectWrapper.ObjectWrapper {\n    idInternal;\n    nameInternal;\n    profiles;\n    profileBeingRecordedInternal;\n    nextProfileUidInternal;\n    constructor(id, name) {\n        super();\n        this.idInternal = id;\n        this.nameInternal = name;\n        this.profiles = [];\n        this.profileBeingRecordedInternal = null;\n        this.nextProfileUidInternal = 1;\n        if (!window.opener) {\n            window.addEventListener('pagehide', this.clearTempStorage.bind(this), false);\n        }\n    }\n    typeName() {\n        return '';\n    }\n    nextProfileUid() {\n        return this.nextProfileUidInternal;\n    }\n    incrementProfileUid() {\n        return this.nextProfileUidInternal++;\n    }\n    hasTemporaryView() {\n        return false;\n    }\n    fileExtension() {\n        return null;\n    }\n    get buttonTooltip() {\n        return '';\n    }\n    get id() {\n        return this.idInternal;\n    }\n    get treeItemTitle() {\n        return this.nameInternal;\n    }\n    get name() {\n        return this.nameInternal;\n    }\n    buttonClicked() {\n        return false;\n    }\n    get description() {\n        return '';\n    }\n    isInstantProfile() {\n        return false;\n    }\n    isEnabled() {\n        return true;\n    }\n    getProfiles() {\n        function isFinished(profile) {\n            return this.profileBeingRecordedInternal !== profile;\n        }\n        return this.profiles.filter(isFinished.bind(this));\n    }\n    customContent() {\n        return null;\n    }\n    setCustomContentEnabled(_enable) {\n    }\n    getProfile(uid) {\n        for (let i = 0; i < this.profiles.length; ++i) {\n            if (this.profiles[i].uid === uid) {\n                return this.profiles[i];\n            }\n        }\n        return null;\n    }\n    loadFromFile(file) {\n        let name = file.name;\n        const fileExtension = this.fileExtension();\n        if (fileExtension && name.endsWith(fileExtension)) {\n            name = name.substr(0, name.length - fileExtension.length);\n        }\n        const profile = this.createProfileLoadedFromFile(name);\n        profile.setFromFile();\n        this.setProfileBeingRecorded(profile);\n        this.addProfile(profile);\n        return profile.loadFromFile(file);\n    }\n    createProfileLoadedFromFile(_title) {\n        throw new Error('Not implemented');\n    }\n    addProfile(profile) {\n        this.profiles.push(profile);\n        this.dispatchEventToListeners(\"add-profile-header\" /* ProfileEvents.ADD_PROFILE_HEADER */, profile);\n    }\n    removeProfile(profile) {\n        const index = this.profiles.indexOf(profile);\n        if (index === -1) {\n            return;\n        }\n        this.profiles.splice(index, 1);\n        this.disposeProfile(profile);\n    }\n    clearTempStorage() {\n        for (let i = 0; i < this.profiles.length; ++i) {\n            this.profiles[i].removeTempFile();\n        }\n    }\n    profileBeingRecorded() {\n        return this.profileBeingRecordedInternal;\n    }\n    setProfileBeingRecorded(profile) {\n        this.profileBeingRecordedInternal = profile;\n    }\n    profileBeingRecordedRemoved() {\n    }\n    reset() {\n        for (const profile of this.profiles.slice()) {\n            this.disposeProfile(profile);\n        }\n        this.profiles = [];\n        this.nextProfileUidInternal = 1;\n    }\n    disposeProfile(profile) {\n        this.dispatchEventToListeners(\"remove-profile-header\" /* ProfileEvents.REMOVE_PROFILE_HEADER */, profile);\n        profile.dispose();\n        if (this.profileBeingRecordedInternal === profile) {\n            this.profileBeingRecordedRemoved();\n            this.setProfileBeingRecorded(null);\n        }\n    }\n}\n//# sourceMappingURL=ProfileHeader.js.map","// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nconst UIStrings = {\n    /**\n     *@description aria label for javascript VM instances target list in heap profiler\n     */\n    javascriptVmInstances: 'JavaScript VM instances',\n    /**\n     *@description Text in Isolate Selector of a profiler tool\n     */\n    totalJsHeapSize: 'Total JS heap size',\n    /**\n     *@description Total trend div title in Isolate Selector of a profiler tool\n     *@example {3} PH1\n     */\n    totalPageJsHeapSizeChangeTrend: 'Total page JS heap size change trend over the last {PH1} minutes.',\n    /**\n     *@description Total value div title in Isolate Selector of a profiler tool\n     */\n    totalPageJsHeapSizeAcrossAllVm: 'Total page JS heap size across all VM instances.',\n    /**\n     *@description Heap size change trend measured in kB/s\n     *@example {2 kB} PH1\n     */\n    changeRate: '{PH1}/s',\n    /**\n     *@description Text for isolate selector list items with positive change rate\n     *@example {1.0 kB} PH1\n     */\n    increasingBySPerSecond: 'increasing by {PH1} per second',\n    /**\n     *@description Text for isolate selector list items with negative change rate\n     *@example {1.0 kB} PH1\n     */\n    decreasingBySPerSecond: 'decreasing by {PH1} per second',\n    /**\n     *@description Heap div title in Isolate Selector of a profiler tool\n     */\n    heapSizeInUseByLiveJsObjects: 'Heap size in use by live JS objects.',\n    /**\n     *@description Trend div title in Isolate Selector of a profiler tool\n     *@example {3} PH1\n     */\n    heapSizeChangeTrendOverTheLastS: 'Heap size change trend over the last {PH1} minutes.',\n    /**\n     *@description Text to show an item is empty\n     */\n    empty: '(empty)',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/IsolateSelector.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class IsolateSelector extends UI.Widget.VBox {\n    items;\n    list;\n    itemByIsolate;\n    totalElement;\n    totalValueDiv;\n    totalTrendDiv;\n    constructor() {\n        super(false);\n        this.items = new UI.ListModel.ListModel();\n        this.list = new UI.ListControl.ListControl(this.items, this, UI.ListControl.ListMode.NonViewport);\n        this.list.element.classList.add('javascript-vm-instances-list');\n        UI.ARIAUtils.setLabel(this.list.element, i18nString(UIStrings.javascriptVmInstances));\n        this.contentElement.appendChild(this.list.element);\n        this.itemByIsolate = new Map();\n        this.totalElement = document.createElement('div');\n        this.totalElement.classList.add('profile-memory-usage-item');\n        this.totalElement.classList.add('hbox');\n        this.totalValueDiv = this.totalElement.createChild('div', 'profile-memory-usage-item-size');\n        this.totalTrendDiv = this.totalElement.createChild('div', 'profile-memory-usage-item-trend');\n        this.totalElement.createChild('div').textContent = i18nString(UIStrings.totalJsHeapSize);\n        const trendIntervalMinutes = Math.round(SDK.IsolateManager.MemoryTrendWindowMs / 60e3);\n        UI.Tooltip.Tooltip.install(this.totalTrendDiv, i18nString(UIStrings.totalPageJsHeapSizeChangeTrend, { PH1: trendIntervalMinutes }));\n        UI.Tooltip.Tooltip.install(this.totalValueDiv, i18nString(UIStrings.totalPageJsHeapSizeAcrossAllVm));\n        SDK.IsolateManager.IsolateManager.instance().observeIsolates(this);\n        SDK.TargetManager.TargetManager.instance().addEventListener(\"NameChanged\" /* SDK.TargetManager.Events.NAME_CHANGED */, this.targetChanged, this);\n        SDK.TargetManager.TargetManager.instance().addEventListener(\"InspectedURLChanged\" /* SDK.TargetManager.Events.INSPECTED_URL_CHANGED */, this.targetChanged, this);\n    }\n    wasShown() {\n        super.wasShown();\n        SDK.IsolateManager.IsolateManager.instance().addEventListener(\"MemoryChanged\" /* SDK.IsolateManager.Events.MEMORY_CHANGED */, this.heapStatsChanged, this);\n    }\n    willHide() {\n        SDK.IsolateManager.IsolateManager.instance().removeEventListener(\"MemoryChanged\" /* SDK.IsolateManager.Events.MEMORY_CHANGED */, this.heapStatsChanged, this);\n    }\n    isolateAdded(isolate) {\n        this.list.element.tabIndex = 0;\n        const item = new ListItem(isolate);\n        // Insert the primary page target at the top of the list.\n        const index = item.model().target() ===\n            SDK.TargetManager.TargetManager.instance().primaryPageTarget() ?\n            0 :\n            this.items.length;\n        this.items.insert(index, item);\n        this.itemByIsolate.set(isolate, item);\n        // Select the first item by default.\n        if (index === 0) {\n            this.list.selectItem(item);\n        }\n        this.update();\n    }\n    isolateChanged(isolate) {\n        const item = this.itemByIsolate.get(isolate);\n        if (item) {\n            item.updateTitle();\n        }\n        this.update();\n    }\n    isolateRemoved(isolate) {\n        const item = this.itemByIsolate.get(isolate);\n        if (item) {\n            this.items.remove(this.items.indexOf(item));\n        }\n        this.itemByIsolate.delete(isolate);\n        if (this.items.length === 0) {\n            this.list.element.tabIndex = -1;\n        }\n        this.update();\n    }\n    targetChanged(event) {\n        const target = event.data;\n        const model = target.model(SDK.RuntimeModel.RuntimeModel);\n        if (!model) {\n            return;\n        }\n        const isolate = SDK.IsolateManager.IsolateManager.instance().isolateByModel(model);\n        const item = isolate && this.itemByIsolate.get(isolate);\n        if (item) {\n            item.updateTitle();\n        }\n    }\n    heapStatsChanged(event) {\n        const isolate = event.data;\n        const listItem = this.itemByIsolate.get(isolate);\n        if (listItem) {\n            listItem.updateStats();\n        }\n        this.updateTotal();\n    }\n    updateTotal() {\n        let total = 0;\n        let trend = 0;\n        for (const isolate of SDK.IsolateManager.IsolateManager.instance().isolates()) {\n            total += isolate.usedHeapSize();\n            trend += isolate.usedHeapSizeGrowRate();\n        }\n        this.totalValueDiv.textContent = Platform.NumberUtilities.bytesToString(total);\n        IsolateSelector.formatTrendElement(trend, this.totalTrendDiv);\n    }\n    static formatTrendElement(trendValueMs, element) {\n        const changeRateBytesPerSecond = trendValueMs * 1e3;\n        const changeRateThresholdBytesPerSecond = 1000;\n        if (Math.abs(changeRateBytesPerSecond) < changeRateThresholdBytesPerSecond) {\n            return;\n        }\n        const changeRateText = Platform.NumberUtilities.bytesToString(Math.abs(changeRateBytesPerSecond));\n        let changeText, changeLabel;\n        if (changeRateBytesPerSecond > 0) {\n            changeText = '\\u2B06' + i18nString(UIStrings.changeRate, { PH1: changeRateText });\n            element.classList.toggle('increasing', true);\n            changeLabel = i18nString(UIStrings.increasingBySPerSecond, { PH1: changeRateText });\n        }\n        else {\n            changeText = '\\u2B07' + i18nString(UIStrings.changeRate, { PH1: changeRateText });\n            element.classList.toggle('increasing', false);\n            changeLabel = i18nString(UIStrings.decreasingBySPerSecond, { PH1: changeRateText });\n        }\n        element.textContent = changeText;\n        UI.ARIAUtils.setLabel(element, changeLabel);\n    }\n    totalMemoryElement() {\n        return this.totalElement;\n    }\n    createElementForItem(item) {\n        return item.element;\n    }\n    heightForItem(_item) {\n        console.assert(false, 'should not be called');\n        return 0;\n    }\n    updateSelectedItemARIA(_fromElement, _toElement) {\n        return false;\n    }\n    isItemSelectable(_item) {\n        return true;\n    }\n    selectedItemChanged(_from, to, fromElement, toElement) {\n        if (fromElement) {\n            fromElement.classList.remove('selected');\n        }\n        if (toElement) {\n            toElement.classList.add('selected');\n        }\n        const model = to && to.model();\n        UI.Context.Context.instance().setFlavor(SDK.HeapProfilerModel.HeapProfilerModel, model && model.heapProfilerModel());\n        UI.Context.Context.instance().setFlavor(SDK.CPUProfilerModel.CPUProfilerModel, model && model.target().model(SDK.CPUProfilerModel.CPUProfilerModel));\n    }\n    update() {\n        this.updateTotal();\n        this.list.invalidateRange(0, this.items.length);\n    }\n}\nexport class ListItem {\n    isolate;\n    element;\n    heapDiv;\n    trendDiv;\n    nameDiv;\n    constructor(isolate) {\n        this.isolate = isolate;\n        const trendIntervalMinutes = Math.round(SDK.IsolateManager.MemoryTrendWindowMs / 60e3);\n        this.element = document.createElement('div');\n        this.element.classList.add('profile-memory-usage-item');\n        this.element.classList.add('hbox');\n        UI.ARIAUtils.markAsOption(this.element);\n        this.heapDiv = this.element.createChild('div', 'profile-memory-usage-item-size');\n        UI.Tooltip.Tooltip.install(this.heapDiv, i18nString(UIStrings.heapSizeInUseByLiveJsObjects));\n        this.trendDiv = this.element.createChild('div', 'profile-memory-usage-item-trend');\n        UI.Tooltip.Tooltip.install(this.trendDiv, i18nString(UIStrings.heapSizeChangeTrendOverTheLastS, { PH1: trendIntervalMinutes }));\n        this.nameDiv = this.element.createChild('div', 'profile-memory-usage-item-name');\n        this.updateTitle();\n    }\n    model() {\n        return this.isolate.runtimeModel();\n    }\n    updateStats() {\n        this.heapDiv.textContent = Platform.NumberUtilities.bytesToString(this.isolate.usedHeapSize());\n        IsolateSelector.formatTrendElement(this.isolate.usedHeapSizeGrowRate(), this.trendDiv);\n    }\n    updateTitle() {\n        const modelCountByName = new Map();\n        for (const model of this.isolate.models()) {\n            const target = model.target();\n            const name = SDK.TargetManager.TargetManager.instance().primaryPageTarget() !== target ? target.name() : '';\n            const parsedURL = new Common.ParsedURL.ParsedURL(target.inspectedURL());\n            const domain = parsedURL.isValid ? parsedURL.domain() : '';\n            const title = target.decorateLabel(domain && name ? `${domain}: ${name}` : name || domain || i18nString(UIStrings.empty));\n            modelCountByName.set(title, (modelCountByName.get(title) || 0) + 1);\n        }\n        this.nameDiv.removeChildren();\n        const titles = [];\n        for (const [name, count] of modelCountByName) {\n            const title = count > 1 ? `${name} (${count})` : name;\n            titles.push(title);\n            const titleDiv = this.nameDiv.createChild('div');\n            titleDiv.textContent = title;\n            UI.Tooltip.Tooltip.install(titleDiv, String(title));\n        }\n    }\n}\n//# sourceMappingURL=IsolateSelector.js.map","// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(\n`/*\n * Copyright 2018 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.profile-launcher-view {\n  overflow: auto;\n}\n\n.profile-launcher-view-content {\n  margin: 10px 16px;\n  flex: auto 1 0;\n}\n\n.profile-launcher-view-content h1 {\n  font-size: 15px;\n  font-weight: normal;\n  margin: 6px 0 10px;\n}\n\n.profile-launcher-view-content [is=\"dt-radio\"] {\n  font-size: 13px;\n}\n\n.profile-launcher-view-content p {\n  color: var(--sys-color-token-subtle);\n  margin-top: 1px;\n  margin-left: 22px;\n}\n\n.profile-launcher-view-content p [is=\"dt-checkbox\"] {\n  display: flex;\n}\n\n.profile-launcher-view-content button.text-button.running,\n.profile-launcher-view-content button.text-button.running:focus {\n  color: var(--sys-color-error);\n}\n\n.profile-launcher-view-content > div {\n  flex: auto 0 0;\n}\n\n.profile-launcher-view-content > .profile-isolate-selector-block {\n  flex: auto 1 0;\n  overflow: hidden;\n}\n\n.profile-isolate-selector-block button {\n  min-width: 110px;\n}\n\n.profile-launcher-target-list {\n  margin-bottom: 6px;\n  border: 1px solid var(--sys-color-divider);\n  flex: 150px 1 0;\n}\n\n.profile-launcher-target-list-container {\n  overflow: auto;\n}\n\n.profile-memory-usage-item {\n  min-width: 100%;\n  width: max-content;\n  padding: 4px;\n  line-height: 16px;\n}\n\n.profile-isolate-selector-block > .profile-memory-usage-item {\n  margin-left: 1px;\n  margin-bottom: 4px;\n  font-weight: bolder;\n}\n\n.profile-memory-usage-item.selected {\n  background-color: var(--sys-color-neutral-container);\n}\n\n.profile-memory-usage-item:focus {\n  background-color: var(--sys-color-tonal-container);\n}\n\n.profile-launcher-target-list .profile-memory-usage-item:hover:not(.selected) {\n  background-color: var(--sys-color-state-hover-on-subtle);\n}\n\n.javascript-vm-instances-list {\n  width: max-content;\n  min-width: 100%;\n}\n\n.javascript-vm-instances-list:focus .profile-memory-usage-item.selected {\n  background-color: var(--sys-color-tonal-container);\n}\n\n.profile-memory-usage-item > div {\n  flex-shrink: 0;\n  margin-right: 12px;\n}\n\n.profile-memory-usage-item-size {\n  width: 60px;\n  text-align: right;\n}\n\n.profile-memory-usage-item-trend {\n  min-width: 5em;\n  color: var(--sys-color-tertiary);\n}\n\n.profile-memory-usage-item-trend.increasing {\n  color: var(--sys-color-error);\n}\n\n.profile-launcher-buttons {\n  flex-wrap: wrap;\n  column-gap: 8px;\n}\n\n@media (forced-colors: active) {\n  .profile-memory-usage-item {\n    forced-color-adjust: none;\n    border-left-color: transparent;\n  }\n\n  .profile-memory-usage-item-trend,\n  .profile-memory-usage-item-trend.increasing,\n  .profile-launcher-view-content button.running,\n  body.inactive .profile-launcher-view-content button.running:not(.toolbar-item) {\n    color: ButtonText;\n  }\n\n  .javascript-vm-instances-list .profile-memory-usage-item:hover:not(.selected) {\n    background-color: Highlight;\n    color: HighlightText;\n  }\n\n  .javascript-vm-instances-list .profile-memory-usage-item.selected .profile-memory-usage-item-trend,\n  .javascript-vm-instances-list .profile-memory-usage-item.selected .profile-memory-usage-item-trend.increasing {\n    color: ButtonFace;\n  }\n\n  .javascript-vm-instances-list .profile-memory-usage-item:hover:not(.selected) .profile-memory-usage-item-trend,\n  .javascript-vm-instances-list .profile-memory-usage-item:hover:not(.selected) .profile-memory-usage-item-trend.increasing {\n    background-color: Highlight;\n    color: HighlightText;\n  }\n\n  .javascript-vm-instances-list .profile-memory-usage-item.selected {\n    background-color: ButtonText;\n    border-color: Highlight;\n    color: ButtonFace;\n  }\n\n  .javascript-vm-instances-list:focus .profile-memory-usage-item.selected,\n  .javascript-vm-instances-list:focus-visible .profile-memory-usage-item.selected {\n    background-color: Highlight;\n    border-color: ButtonText;\n    color: HighlightText;\n  }\n}\n\n/*# sourceURL=profileLauncherView.css */\n`);\n\nexport default styles;\n","/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport { IsolateSelector } from './IsolateSelector.js';\nimport profileLauncherViewStyles from './profileLauncherView.css.js';\nconst UIStrings = {\n    /**\n     *@description Text in Profile Launcher View of a profiler tool\n     */\n    selectJavascriptVmInstance: 'Select JavaScript VM instance',\n    /**\n     *@description Text to load something\n     */\n    load: 'Load profile',\n    /**\n     *@description Control button text content in Profile Launcher View of a profiler tool\n     */\n    takeSnapshot: 'Take snapshot',\n    /**\n     *@description Text of an item that stops the running task\n     */\n    stop: 'Stop',\n    /**\n     *@description Control button text content in Profile Launcher View of a profiler tool\n     */\n    start: 'Start',\n    /**\n     *@description Profile type header element text content in Profile Launcher View of a profiler tool\n     */\n    selectProfilingType: 'Select profiling type',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/ProfileLauncherView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ProfileLauncherView extends Common.ObjectWrapper.eventMixin(UI.Widget.VBox) {\n    panel;\n    contentElementInternal;\n    selectedProfileTypeSetting;\n    profileTypeHeaderElement;\n    profileTypeSelectorForm;\n    controlButton;\n    loadButton;\n    recordButtonEnabled;\n    typeIdToOptionElementAndProfileType;\n    isProfiling;\n    isInstantProfile;\n    isEnabled;\n    constructor(profilesPanel) {\n        super();\n        this.panel = profilesPanel;\n        this.element.classList.add('profile-launcher-view');\n        this.contentElementInternal =\n            this.element.createChild('div', 'profile-launcher-view-content vbox');\n        const profileTypeSelectorElement = this.contentElementInternal.createChild('div', 'vbox');\n        this.selectedProfileTypeSetting = Common.Settings.Settings.instance().createSetting('selected-profile-type', 'CPU');\n        this.profileTypeHeaderElement = profileTypeSelectorElement.createChild('h1');\n        this.profileTypeSelectorForm = profileTypeSelectorElement.createChild('form');\n        UI.ARIAUtils.markAsRadioGroup(this.profileTypeSelectorForm);\n        const isolateSelectorElement = this.contentElementInternal.createChild('div', 'vbox profile-isolate-selector-block');\n        isolateSelectorElement.createChild('h1').textContent = i18nString(UIStrings.selectJavascriptVmInstance);\n        const isolateSelector = new IsolateSelector();\n        const isolateSelectorElementChild = isolateSelectorElement.createChild('div', 'vbox profile-launcher-target-list');\n        isolateSelectorElementChild.classList.add('profile-launcher-target-list-container');\n        isolateSelector.show(isolateSelectorElementChild);\n        isolateSelectorElement.appendChild(isolateSelector.totalMemoryElement());\n        const buttonsDiv = this.contentElementInternal.createChild('div', 'hbox profile-launcher-buttons');\n        this.controlButton = UI.UIUtils.createTextButton('', this.controlButtonClicked.bind(this), {\n            jslogContext: 'profiler.heap-toggle-recording',\n            variant: \"primary\" /* Buttons.Button.Variant.PRIMARY */,\n        });\n        this.loadButton = new Buttons.Button.Button();\n        this.loadButton\n            .data = { iconName: 'import', variant: \"outlined\" /* Buttons.Button.Variant.OUTLINED */, jslogContext: 'profiler.load-from-file' };\n        this.loadButton.textContent = i18nString(UIStrings.load);\n        this.loadButton.addEventListener('click', this.loadButtonClicked.bind(this));\n        buttonsDiv.appendChild(this.loadButton);\n        buttonsDiv.appendChild(this.controlButton);\n        this.recordButtonEnabled = true;\n        this.typeIdToOptionElementAndProfileType = new Map();\n    }\n    loadButtonClicked() {\n        const loadFromFileAction = UI.ActionRegistry.ActionRegistry.instance().getAction('profiler.load-from-file');\n        void loadFromFileAction.execute();\n    }\n    updateControls() {\n        if (this.isEnabled && this.recordButtonEnabled) {\n            this.controlButton.removeAttribute('disabled');\n        }\n        else {\n            this.controlButton.setAttribute('disabled', '');\n        }\n        UI.Tooltip.Tooltip.install(this.controlButton, this.recordButtonEnabled ? '' : UI.UIUtils.anotherProfilerActiveLabel());\n        if (this.isInstantProfile) {\n            this.controlButton.classList.remove('running');\n            this.controlButton.textContent = i18nString(UIStrings.takeSnapshot);\n        }\n        else if (this.isProfiling) {\n            this.controlButton.classList.add('running');\n            this.controlButton.textContent = i18nString(UIStrings.stop);\n        }\n        else {\n            this.controlButton.classList.remove('running');\n            this.controlButton.textContent = i18nString(UIStrings.start);\n        }\n        for (const { optionElement } of this.typeIdToOptionElementAndProfileType.values()) {\n            optionElement.disabled = Boolean(this.isProfiling);\n        }\n    }\n    profileStarted() {\n        this.isProfiling = true;\n        this.updateControls();\n    }\n    profileFinished() {\n        this.isProfiling = false;\n        this.updateControls();\n    }\n    updateProfileType(profileType, recordButtonEnabled) {\n        this.isInstantProfile = profileType.isInstantProfile();\n        this.recordButtonEnabled = recordButtonEnabled;\n        this.isEnabled = profileType.isEnabled();\n        this.updateControls();\n    }\n    addProfileType(profileType) {\n        const labelElement = UI.UIUtils.createRadioLabel('profile-type', profileType.name, undefined, 'profiler.profile-type');\n        this.profileTypeSelectorForm.appendChild(labelElement);\n        const optionElement = labelElement.radioElement;\n        this.typeIdToOptionElementAndProfileType.set(profileType.id, { optionElement, profileType });\n        optionElement.addEventListener('change', this.profileTypeChanged.bind(this, profileType), false);\n        const descriptionElement = this.profileTypeSelectorForm.createChild('p');\n        descriptionElement.textContent = profileType.description;\n        UI.ARIAUtils.setDescription(optionElement, profileType.description);\n        const customContent = profileType.customContent();\n        if (customContent) {\n            customContent.setAttribute('role', 'group');\n            customContent.setAttribute('aria-labelledby', `${optionElement.id}`);\n            this.profileTypeSelectorForm.createChild('p').appendChild(customContent);\n            profileType.setCustomContentEnabled(false);\n        }\n        const headerText = this.typeIdToOptionElementAndProfileType.size > 1 ? i18nString(UIStrings.selectProfilingType) :\n            profileType.name;\n        this.profileTypeHeaderElement.textContent = headerText;\n        UI.ARIAUtils.setLabel(this.profileTypeSelectorForm, headerText);\n    }\n    restoreSelectedProfileType() {\n        let typeId = this.selectedProfileTypeSetting.get();\n        if (!this.typeIdToOptionElementAndProfileType.has(typeId)) {\n            typeId = this.typeIdToOptionElementAndProfileType.keys().next().value;\n            this.selectedProfileTypeSetting.set(typeId);\n        }\n        const optionElementAndProfileType = this.typeIdToOptionElementAndProfileType.get(typeId);\n        optionElementAndProfileType.optionElement.checked = true;\n        const type = optionElementAndProfileType.profileType;\n        for (const [id, { profileType }] of this.typeIdToOptionElementAndProfileType) {\n            const enabled = (id === typeId);\n            profileType.setCustomContentEnabled(enabled);\n        }\n        this.dispatchEventToListeners(\"ProfileTypeSelected\" /* Events.PROFILE_TYPE_SELECTED */, type);\n    }\n    controlButtonClicked() {\n        this.panel.toggleRecord();\n    }\n    profileTypeChanged(profileType) {\n        const typeId = this.selectedProfileTypeSetting.get();\n        const type = this.typeIdToOptionElementAndProfileType.get(typeId).profileType;\n        type.setCustomContentEnabled(false);\n        profileType.setCustomContentEnabled(true);\n        this.dispatchEventToListeners(\"ProfileTypeSelected\" /* Events.PROFILE_TYPE_SELECTED */, profileType);\n        this.isInstantProfile = profileType.isInstantProfile();\n        this.isEnabled = profileType.isEnabled();\n        this.updateControls();\n        this.selectedProfileTypeSetting.set(profileType.id);\n    }\n    wasShown() {\n        super.wasShown();\n        this.registerCSSFiles([profileLauncherViewStyles]);\n    }\n}\n//# sourceMappingURL=ProfileLauncherView.js.map","// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nconst UIStrings = {\n    /**\n     *@description Tooltip for the 3-dots menu in the Memory panel profiles list.\n     */\n    profileOptions: 'Profile options',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/ProfileSidebarTreeElement.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ProfileSidebarTreeElement extends UI.TreeOutline.TreeElement {\n    iconElement;\n    titlesElement;\n    menuElement;\n    titleContainer;\n    titleElement;\n    subtitleElement;\n    className;\n    small;\n    dataDisplayDelegate;\n    profile;\n    saveLinkElement;\n    editing;\n    constructor(dataDisplayDelegate, profile, className) {\n        super('', false);\n        this.iconElement = document.createElement('div');\n        this.iconElement.classList.add('icon');\n        this.titlesElement = document.createElement('div');\n        this.titlesElement.classList.add('titles');\n        this.titlesElement.classList.add('no-subtitle');\n        this.titlesElement.setAttribute('jslog', `${VisualLogging.value('title').track({ dblclick: true, change: true })}`);\n        this.titleContainer = this.titlesElement.createChild('span', 'title-container');\n        this.titleElement = this.titleContainer.createChild('span', 'title');\n        this.subtitleElement = this.titlesElement.createChild('span', 'subtitle');\n        this.menuElement = new Buttons.Button.Button();\n        this.menuElement.data = {\n            variant: \"icon\" /* Buttons.Button.Variant.ICON */,\n            iconName: 'dots-vertical',\n            title: i18nString(UIStrings.profileOptions),\n        };\n        this.menuElement.tabIndex = -1;\n        this.menuElement.addEventListener('click', this.handleContextMenuEvent.bind(this));\n        this.menuElement.setAttribute('jslog', `${VisualLogging.dropDown('profile-options').track({ click: true })}`);\n        UI.Tooltip.Tooltip.install(this.menuElement, i18nString(UIStrings.profileOptions));\n        this.titleElement.textContent = profile.title;\n        this.className = className;\n        this.small = false;\n        this.dataDisplayDelegate = dataDisplayDelegate;\n        this.profile = profile;\n        profile.addEventListener(\"UpdateStatus\" /* ProfileHeaderEvents.UPDATE_STATUS */, this.updateStatus, this);\n    }\n    updateStatus(event) {\n        const statusUpdate = event.data;\n        if (statusUpdate.subtitle !== null) {\n            this.subtitleElement.textContent = statusUpdate.subtitle.length > 0 ? `(${statusUpdate.subtitle})` : '';\n            this.titlesElement.classList.toggle('no-subtitle', !statusUpdate.subtitle);\n            UI.ARIAUtils.setLabel(this.listItemElement, `${this.profile.title}, ${statusUpdate.subtitle}`);\n        }\n        if (typeof statusUpdate.wait === 'boolean' && this.listItemElement) {\n            this.iconElement.classList.toggle('spinner', statusUpdate.wait);\n            this.listItemElement.classList.toggle('wait', statusUpdate.wait);\n        }\n    }\n    ondblclick(event) {\n        if (!this.editing) {\n            this.startEditing(event.target);\n        }\n        return false;\n    }\n    startEditing(eventTarget) {\n        const container = eventTarget.enclosingNodeOrSelfWithClass('title');\n        if (!container) {\n            return;\n        }\n        const config = new UI.InplaceEditor.Config(this.editingCommitted.bind(this), this.editingCancelled.bind(this));\n        this.editing = UI.InplaceEditor.InplaceEditor.startEditing(container, config);\n    }\n    editingCommitted(container, newTitle) {\n        delete this.editing;\n        this.profile.setTitle(newTitle);\n    }\n    editingCancelled() {\n        delete this.editing;\n    }\n    dispose() {\n        this.profile.removeEventListener(\"UpdateStatus\" /* ProfileHeaderEvents.UPDATE_STATUS */, this.updateStatus, this);\n    }\n    onselect() {\n        this.dataDisplayDelegate.showProfile(this.profile);\n        return true;\n    }\n    ondelete() {\n        this.profile.profileType().removeProfile(this.profile);\n        return true;\n    }\n    onattach() {\n        if (this.className) {\n            this.listItemElement.classList.add(this.className);\n        }\n        if (this.small) {\n            this.listItemElement.classList.add('small');\n        }\n        this.listItemElement.append(this.iconElement, this.titlesElement, this.menuElement);\n        this.listItemElement.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this), true);\n        UI.ARIAUtils.setDescription(this.listItemElement, this.profile.profileType().name);\n    }\n    handleContextMenuEvent(event) {\n        const contextMenu = new UI.ContextMenu.ContextMenu(event);\n        contextMenu.appendItemsAtLocation('profilerMenu');\n        void contextMenu.show();\n    }\n    setSmall(small) {\n        this.small = small;\n        if (this.listItemElement) {\n            this.listItemElement.classList.toggle('small', this.small);\n        }\n    }\n    setMainTitle(title) {\n        this.titleElement.textContent = title;\n    }\n}\n//# sourceMappingURL=ProfileSidebarTreeElement.js.map","// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(\n`/*\n * Copyright (C) 2006, 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2009 Anthony Ricaud <rik@webkit.org>\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Profiler Style */\n\n#profile-views {\n  flex: auto;\n  position: relative;\n}\n\n.profile-view .data-grid table.data {\n  background: var(--sys-color-cdt-base-container);\n}\n\n.profile-view .data-grid tr:not(.selected) .highlight {\n  background-color: var(--sys-color-tonal-container);\n}\n\n.profile-view .data-grid tr:hover td:not(.bottom-filler-td) {\n  background-color: var(--sys-color-state-hover-on-subtle);\n}\n\n.profile-view .data-grid td.numeric-column {\n  text-align: right;\n}\n\n.profile-view .data-grid div.profile-multiple-values {\n  float: right;\n}\n\n.profile-view .data-grid span.percent-column {\n  color: var(--sys-color-token-subtle);\n  width: 9ex;\n  display: inline-block;\n}\n\n.profile-view .data-grid tr.selected span {\n  color: inherit;\n}\n\n.profiles-toolbar {\n  background-color: var(--sys-color-cdt-base-container);\n  border-bottom: 1px solid var(--sys-color-divider);\n  flex-shrink: 0;\n}\n\n.profiles-tree-sidebar {\n  flex: auto;\n  overflow: hidden;\n}\n\n.profiles-sidebar-tree-box {\n  overflow-y: auto;\n}\n\n.profile-view {\n  display: flex;\n  overflow: hidden;\n}\n\n.profile-view .data-grid {\n  border: none;\n  flex: auto;\n}\n\n.profile-view .data-grid th.self-column,\n.profile-view .data-grid th.total-column {\n  text-align: center;\n}\n\n.profile-node-file {\n  float: right;\n  color: var(--sys-color-token-subtle);\n}\n\n.profile-warn-marker {\n  vertical-align: -1px;\n  margin-right: 2px;\n}\n\n.cpu-profile-flame-chart-overview-container {\n  overflow: hidden;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 80px;\n}\n\n#cpu-profile-flame-chart-overview-container {\n  border-bottom: 1px solid var(--sys-color-divider);\n  overflow: hidden;\n}\n\n.cpu-profile-flame-chart-overview-canvas {\n  position: absolute;\n  top: 20px;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n#cpu-profile-flame-chart-overview-grid .resources-dividers-label-bar {\n  pointer-events: auto;\n}\n\n.cpu-profile-flame-chart-overview-pane {\n  flex: 0 0 80px !important; /* stylelint-disable-line declaration-no-important */\n}\n\n.profile-text-view {\n  padding: 10px;\n  overflow: auto;\n  margin: 0;\n  user-select: text;\n  cursor: text;\n}\n\n.empty-landing-page {\n  position: absolute;\n  background-color: var(--sys-color-cdt-base-container);\n  justify-content: center;\n  align-items: center;\n  overflow: auto;\n  font-size: 16px;\n  color: var(--sys-color-token-subtle);\n  padding: 50px;\n}\n\n@media (forced-colors: active) {\n  .profile-view .data-grid tr:hover td:not(.bottom-filler-td) {\n    background: Highlight;\n  }\n\n  .profile-view .data-grid table.data {\n    background: transparent;\n  }\n}\n\n/*# sourceURL=profilesPanel.css */\n`);\n\nexport default styles;\n","// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(\n`/*\n * Copyright 2016 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n:host {\n  padding: var(--sys-size-3) 0;\n}\n\n.tree-outline-disclosure {\n  width: 100%;\n}\n\n/* Icon-related changes */\nli .icon {\n  width: 20px;\n  height: 20px;\n  margin-right: var(--sys-size-6);\n  flex: none;\n}\n\n/* Heap profiles and CPU profiles */\n.heap-snapshot-sidebar-tree-item .icon,\n.profile-sidebar-tree-item .icon {\n  mask-image: var(--image-file-heap-snapshot);\n  background: var(--icon-default);\n}\n\n.profile-group-sidebar-tree-item .icon {\n  mask-image: var(--image-file-heap-snapshots);\n  background: var(--icon-default);\n}\n\nli.small .icon {\n  width: 16px;\n  height: 16px;\n}\n\nli.wait .icon {\n  content: none;\n}\n\nli devtools-button {\n  min-width: var(--sys-size-12);\n  visibility: hidden;\n}\n\n/* Tree outline overrides */\n.heap-snapshot-sidebar-tree-item:not(:hover) devtools-button {\n  visibility: hidden;\n}\n\n.heap-snapshot-sidebar-tree-item.wait .icon {\n  mask-image: unset;\n  background-color: inherit;\n}\n\n.heap-snapshot-sidebar-tree-item.small .icon {\n  mask-image: var(--image-file-heap-snapshots);\n  background: var(--icon-default);\n}\n\n.profile-sidebar-tree-item.small .icon {\n  mask-image: var(--image-file-heap-snapshots);\n  background: var(--icon-default);\n}\n\n.tree-outline li:not(.parent)::before {\n  content: none;\n}\n\nol.tree-outline {\n  flex: auto;\n  padding: 0;\n}\n\n.tree-outline li {\n  height: var(--sys-size-12);\n  padding-left: var(--sys-size-7);\n  margin-right: var(--sys-size-5);\n  color: var(--sys-color-on-surface);\n\n  & .leading-icons {\n    margin-right: var(--sys-size-6);\n    flex: none;\n  }\n\n  & .selection {\n    border-radius: 0 100px 100px 0;\n  }\n}\n\n.tree-outline .profile-launcher-view-tree-item,\n.tree-outline li.profiles-tree-section + .children > li {\n  border-radius: 0 100px 100px 0;\n  position: relative;\n\n  &.selected {\n    background-color: var(--app-color-navigation-drawer-background-selected);\n    color: var(--app-color-navigation-drawer-label-selected);\n\n    & devtools-icon {\n      color: var(--app-color-navigation-drawer-label-selected);\n    }\n\n    & > .icon:not(.spinner) {\n      background-color: var(--app-color-navigation-drawer-label-selected);\n    }\n  }\n\n  &:active::before {\n    background-color: var(--sys-color-state-ripple-neutral-on-subtle);\n    mask-image: none;\n    content: \"\";\n    height: 100%;\n    width: 100%;\n    border-radius: inherit;\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n\n  &:focus-visible {\n    box-shadow: inset 0 0 0 2px var(--sys-color-state-focus-ring);\n  }\n}\n\n.tree-outline li.profiles-tree-section {\n  margin-top: var(--sys-size-6);\n  line-height: var(--sys-size-8);\n\n  &:hover:not(:has(span[is=\"dt-checkbox\"])) .selection {\n    background-color: transparent;\n  }\n}\n\n.tree-outline li.profiles-tree-section::before {\n  display: none;\n}\n\n.tree-outline ol {\n  overflow: hidden;\n  padding: 0;\n}\n\n/* Generic items styling */\n\nli.wait .spinner::before {\n  --dimension: 20px;\n\n  margin: 0;\n}\n\nli.wait.small .spinner::before {\n  --dimension: 14px;\n  --clip-size: 9px;\n  --override-spinner-size: 2px;\n\n  margin: 1px;\n}\n\nli.wait.selected .spinner::before {\n  --override-spinner-color: var(--ref-palette-neutral100);\n}\n\n@keyframes spinner-animation {\n  from {\n    transform: rotate(0);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n}\n\nli.small {\n  height: 20px;\n}\n\nli .titles {\n  display: inline-flex;\n  padding-right: var(--sys-size-5);\n}\n\nli .titles > .title-container {\n  z-index: 1;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n\nli.small .titles {\n  top: 2px;\n  line-height: normal;\n}\n\nli:not(.small) .title::after {\n  content: \"\\\\A\";\n  white-space: pre;\n}\n\nli .subtitle {\n  text-overflow: ellipsis;\n  overflow: hidden;\n  margin-left: var(--sys-size-3);\n}\n\nli.small .subtitle {\n  display: none;\n}\n\nli.selected:hover devtools-button {\n  visibility: visible;\n  margin-left: auto;\n}\n\n@media (forced-colors: active) {\n  .tree-outline li,\n  .tree-outline li.profiles-tree-section,\n  .tree-outline li:hover .tree-element-title {\n    forced-color-adjust: none;\n    color: ButtonText;\n    text-shadow: unset;\n  }\n\n  .tree-outline .profile-launcher-view-tree-item,\n  .tree-outline li.profiles-tree-section + .children > li {\n    &.selected {\n      background-color: Highlight;\n      color: HighlightText;\n\n      & devtools-icon {\n        color: HighlightText;\n      }\n\n      & > .icon:not(.spinner) {\n        background-color: HighlightText;\n      }\n    }\n  }\n}\n\n/*# sourceURL=profilesSidebarTree.css */\n`);\n\nexport default styles;\n","// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/*\n * Copyright (C) 2008 Apple Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\n// eslint-disable-next-line rulesdir/es_modules_import\nimport objectValueStyles from '../../ui/legacy/components/object_ui/objectValue.css.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport heapProfilerStyles from './heapProfiler.css.js';\nimport { ProfileHeader, } from './ProfileHeader.js';\nimport { ProfileLauncherView } from './ProfileLauncherView.js';\nimport { ProfileSidebarTreeElement } from './ProfileSidebarTreeElement.js';\nimport profilesPanelStyles from './profilesPanel.css.js';\nimport profilesSidebarTreeStyles from './profilesSidebarTree.css.js';\nconst UIStrings = {\n    /**\n     *@description Text in Profiles Panel of a profiler tool\n     *@example {'.js', '.json'} PH1\n     */\n    cantLoadFileSupportedFile: 'Can’t load file. Supported file extensions: \\'\\'{PH1}\\'\\'.',\n    /**\n     *@description Text in Profiles Panel of a profiler tool\n     */\n    cantLoadProfileWhileAnother: 'Can’t load profile while another profile is being recorded.',\n    /**\n     *@description Text in Profiles Panel of a profiler tool\n     *@example {cannot open file} PH1\n     */\n    profileLoadingFailedS: 'Profile loading failed: {PH1}.',\n    /**\n     *@description Text in Profiles Panel of a profiler tool\n     *@example {2} PH1\n     */\n    runD: 'Run {PH1}',\n    /**\n     *@description Text in Profiles Panel of a profiler tool\n     */\n    profiles: 'Profiles',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/ProfilesPanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ProfilesPanel extends UI.Panel.PanelWithSidebar {\n    profileTypes;\n    profilesItemTreeElement;\n    sidebarTree;\n    profileViews;\n    toolbarElement;\n    toggleRecordAction;\n    toggleRecordButton;\n    #saveToFileAction;\n    profileViewToolbar;\n    profileGroups;\n    launcherView;\n    visibleView;\n    profileToView;\n    typeIdToSidebarSection;\n    fileSelectorElement;\n    selectedProfileType;\n    constructor(name, profileTypes, recordingActionId) {\n        super(name);\n        this.profileTypes = profileTypes;\n        const mainContainer = new UI.Widget.VBox();\n        this.splitWidget().setMainWidget(mainContainer);\n        this.profilesItemTreeElement = new ProfilesSidebarTreeElement(this);\n        this.sidebarTree = new UI.TreeOutline.TreeOutlineInShadow();\n        this.sidebarTree.element.classList.add('profiles-sidebar-tree-box');\n        this.panelSidebarElement().appendChild(this.sidebarTree.element);\n        this.sidebarTree.appendChild(this.profilesItemTreeElement);\n        this.sidebarTree.element.addEventListener('keydown', this.onKeyDown.bind(this), false);\n        this.profileViews = document.createElement('div');\n        this.profileViews.id = 'profile-views';\n        this.profileViews.classList.add('vbox');\n        mainContainer.element.appendChild(this.profileViews);\n        this.toolbarElement = document.createElement('div');\n        this.toolbarElement.classList.add('profiles-toolbar');\n        mainContainer.element.insertBefore(this.toolbarElement, mainContainer.element.firstChild);\n        this.panelSidebarElement().classList.add('profiles-tree-sidebar');\n        const toolbarContainerLeft = document.createElement('div');\n        toolbarContainerLeft.classList.add('profiles-toolbar');\n        toolbarContainerLeft.setAttribute('jslog', `${VisualLogging.toolbar('profiles-sidebar')}`);\n        this.panelSidebarElement().insertBefore(toolbarContainerLeft, this.panelSidebarElement().firstChild);\n        const toolbar = new UI.Toolbar.Toolbar('', toolbarContainerLeft);\n        toolbar.makeWrappable(true);\n        this.toggleRecordAction = UI.ActionRegistry.ActionRegistry.instance().getAction(recordingActionId);\n        this.toggleRecordButton = UI.Toolbar.Toolbar.createActionButton(this.toggleRecordAction);\n        toolbar.appendToolbarItem(this.toggleRecordButton);\n        toolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButtonForId('profiler.clear-all'));\n        toolbar.appendSeparator();\n        toolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButtonForId('profiler.load-from-file'));\n        this.#saveToFileAction = UI.ActionRegistry.ActionRegistry.instance().getAction('profiler.save-to-file');\n        this.#saveToFileAction.setEnabled(false);\n        toolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this.#saveToFileAction));\n        toolbar.appendSeparator();\n        toolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButtonForId('components.collect-garbage'));\n        this.profileViewToolbar = new UI.Toolbar.Toolbar('', this.toolbarElement);\n        this.profileViewToolbar.makeWrappable(true);\n        this.profileViewToolbar.element.setAttribute('jslog', `${VisualLogging.toolbar('profile-view')}`);\n        this.profileGroups = {};\n        this.launcherView = new ProfileLauncherView(this);\n        this.launcherView.addEventListener(\"ProfileTypeSelected\" /* ProfileLauncherEvents.PROFILE_TYPE_SELECTED */, this.onProfileTypeSelected, this);\n        this.profileToView = [];\n        this.typeIdToSidebarSection = {};\n        const types = this.profileTypes;\n        for (let i = 0; i < types.length; i++) {\n            this.registerProfileType(types[i]);\n        }\n        this.launcherView.restoreSelectedProfileType();\n        this.profilesItemTreeElement.select();\n        this.showLauncherView();\n        this.createFileSelectorElement();\n        SDK.TargetManager.TargetManager.instance().addEventListener(\"SuspendStateChanged\" /* SDK.TargetManager.Events.SUSPEND_STATE_CHANGED */, this.onSuspendStateChanged, this);\n        UI.Context.Context.instance().addFlavorChangeListener(SDK.CPUProfilerModel.CPUProfilerModel, this.updateProfileTypeSpecificUI, this);\n        UI.Context.Context.instance().addFlavorChangeListener(SDK.HeapProfilerModel.HeapProfilerModel, this.updateProfileTypeSpecificUI, this);\n    }\n    onKeyDown(ev) {\n        const event = ev;\n        let handled = false;\n        if (event.key === 'ArrowDown' && !event.altKey) {\n            handled = this.sidebarTree.selectNext();\n        }\n        else if (event.key === 'ArrowUp' && !event.altKey) {\n            handled = this.sidebarTree.selectPrevious();\n        }\n        if (handled) {\n            event.consume(true);\n        }\n    }\n    searchableView() {\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const visibleView = this.visibleView;\n        return visibleView && visibleView.searchableView ? visibleView.searchableView() : null;\n    }\n    createFileSelectorElement() {\n        if (this.fileSelectorElement) {\n            this.element.removeChild(this.fileSelectorElement);\n        }\n        this.fileSelectorElement = UI.UIUtils.createFileSelectorElement(this.loadFromFile.bind(this));\n        this.element.appendChild(this.fileSelectorElement);\n    }\n    findProfileTypeByExtension(fileName) {\n        return this.profileTypes.find(type => Boolean(type.fileExtension()) && fileName.endsWith(type.fileExtension() || '')) ||\n            null;\n    }\n    async loadFromFile(file) {\n        this.createFileSelectorElement();\n        const profileType = this.findProfileTypeByExtension(file.name);\n        if (!profileType) {\n            const extensions = new Set(this.profileTypes.map(type => type.fileExtension()).filter(ext => ext));\n            Common.Console.Console.instance().error(i18nString(UIStrings.cantLoadFileSupportedFile, { PH1: Array.from(extensions).join('\\', \\'') }));\n            return;\n        }\n        if (Boolean(profileType.profileBeingRecorded())) {\n            Common.Console.Console.instance().error(i18nString(UIStrings.cantLoadProfileWhileAnother));\n            return;\n        }\n        const error = await profileType.loadFromFile(file);\n        if (error && 'message' in error) {\n            void UI.UIUtils.MessageDialog.show(i18nString(UIStrings.profileLoadingFailedS, { PH1: error.message }), undefined, 'profile-loading-failed');\n        }\n    }\n    toggleRecord() {\n        if (!this.toggleRecordAction.enabled()) {\n            return true;\n        }\n        const toggleButton = Platform.DOMUtilities.deepActiveElement(this.element.ownerDocument);\n        const type = this.selectedProfileType;\n        if (!type) {\n            return true;\n        }\n        const isProfiling = type.buttonClicked();\n        this.updateToggleRecordAction(isProfiling);\n        if (isProfiling) {\n            this.launcherView.profileStarted();\n            if (type.hasTemporaryView()) {\n                this.showProfile(type.profileBeingRecorded());\n            }\n        }\n        else {\n            this.launcherView.profileFinished();\n        }\n        if (toggleButton) {\n            toggleButton.focus();\n        }\n        return true;\n    }\n    onSuspendStateChanged() {\n        this.updateToggleRecordAction(this.toggleRecordAction.toggled());\n    }\n    updateToggleRecordAction(toggled) {\n        const hasSelectedTarget = Boolean(UI.Context.Context.instance().flavor(SDK.CPUProfilerModel.CPUProfilerModel) ||\n            UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel));\n        const enable = toggled || (!SDK.TargetManager.TargetManager.instance().allTargetsSuspended() && hasSelectedTarget);\n        this.toggleRecordAction.setEnabled(enable);\n        this.toggleRecordAction.setToggled(toggled);\n        if (enable) {\n            this.toggleRecordButton.setTitle(this.selectedProfileType ? this.selectedProfileType.buttonTooltip : '');\n        }\n        else {\n            this.toggleRecordButton.setTitle(UI.UIUtils.anotherProfilerActiveLabel());\n        }\n        if (this.selectedProfileType) {\n            this.launcherView.updateProfileType(this.selectedProfileType, enable);\n        }\n    }\n    profileBeingRecordedRemoved() {\n        this.updateToggleRecordAction(false);\n        this.launcherView.profileFinished();\n    }\n    onProfileTypeSelected(event) {\n        this.selectedProfileType = event.data;\n        this.updateProfileTypeSpecificUI();\n    }\n    updateProfileTypeSpecificUI() {\n        this.updateToggleRecordAction(this.toggleRecordAction.toggled());\n    }\n    reset() {\n        this.profileTypes.forEach(type => type.reset());\n        delete this.visibleView;\n        this.profileGroups = {};\n        this.updateToggleRecordAction(false);\n        this.launcherView.profileFinished();\n        this.sidebarTree.element.classList.remove('some-expandable');\n        this.launcherView.detach();\n        this.profileViews.removeChildren();\n        this.profileViewToolbar.removeToolbarItems();\n        this.profilesItemTreeElement.select();\n        this.showLauncherView();\n    }\n    showLauncherView() {\n        this.closeVisibleView();\n        this.profileViewToolbar.removeToolbarItems();\n        this.launcherView.show(this.profileViews);\n        this.visibleView = this.launcherView;\n        this.toolbarElement.classList.add('hidden');\n        this.#saveToFileAction.setEnabled(false);\n    }\n    registerProfileType(profileType) {\n        this.launcherView.addProfileType(profileType);\n        const profileTypeSection = new ProfileTypeSidebarSection(this, profileType);\n        this.typeIdToSidebarSection[profileType.id] = profileTypeSection;\n        this.sidebarTree.appendChild(profileTypeSection);\n        function onAddProfileHeader(event) {\n            this.addProfileHeader(event.data);\n        }\n        function onRemoveProfileHeader(event) {\n            this.removeProfileHeader(event.data);\n        }\n        function profileComplete(event) {\n            this.showProfile(event.data);\n        }\n        profileType.addEventListener(\"view-updated\" /* ProfileTypeEvents.VIEW_UPDATED */, this.updateProfileTypeSpecificUI, this);\n        profileType.addEventListener(\"add-profile-header\" /* ProfileTypeEvents.ADD_PROFILE_HEADER */, onAddProfileHeader, this);\n        profileType.addEventListener(\"remove-profile-header\" /* ProfileTypeEvents.REMOVE_PROFILE_HEADER */, onRemoveProfileHeader, this);\n        profileType.addEventListener(\"profile-complete\" /* ProfileTypeEvents.PROFILE_COMPLETE */, profileComplete, this);\n        const profiles = profileType.getProfiles();\n        for (let i = 0; i < profiles.length; i++) {\n            this.addProfileHeader(profiles[i]);\n        }\n    }\n    showLoadFromFileDialog() {\n        this.fileSelectorElement.click();\n    }\n    addProfileHeader(profile) {\n        const profileType = profile.profileType();\n        const typeId = profileType.id;\n        this.typeIdToSidebarSection[typeId].addProfileHeader(profile);\n        if (!this.visibleView || this.visibleView === this.launcherView) {\n            this.showProfile(profile);\n        }\n    }\n    removeProfileHeader(profile) {\n        if (profile.profileType().profileBeingRecorded() === profile) {\n            this.profileBeingRecordedRemoved();\n        }\n        const i = this.indexOfViewForProfile(profile);\n        if (i !== -1) {\n            this.profileToView.splice(i, 1);\n        }\n        const typeId = profile.profileType().id;\n        const sectionIsEmpty = this.typeIdToSidebarSection[typeId].removeProfileHeader(profile);\n        // No other item will be selected if there aren't any other profiles, so\n        // make sure that view gets cleared when the last profile is removed.\n        if (sectionIsEmpty) {\n            this.profilesItemTreeElement.select();\n            this.showLauncherView();\n        }\n    }\n    showProfile(profile) {\n        if (!profile ||\n            (profile.profileType().profileBeingRecorded() === profile) && !profile.profileType().hasTemporaryView()) {\n            return null;\n        }\n        const view = this.viewForProfile(profile);\n        if (view === this.visibleView) {\n            return view;\n        }\n        this.closeVisibleView();\n        UI.Context.Context.instance().setFlavor(ProfileHeader, profile);\n        this.#saveToFileAction.setEnabled(profile.canSaveToFile());\n        view.show(this.profileViews);\n        this.toolbarElement.classList.remove('hidden');\n        this.visibleView = view;\n        const profileTypeSection = this.typeIdToSidebarSection[profile.profileType().id];\n        const sidebarElement = profileTypeSection.sidebarElementForProfile(profile);\n        if (sidebarElement) {\n            sidebarElement.revealAndSelect();\n        }\n        this.profileViewToolbar.removeToolbarItems();\n        void view.toolbarItems().then(items => {\n            items.map(item => this.profileViewToolbar.appendToolbarItem(item));\n        });\n        return view;\n    }\n    showObject(_snapshotObjectId, _perspectiveName) {\n    }\n    async linkifyObject(_nodeIndex) {\n        return null;\n    }\n    viewForProfile(profile) {\n        const index = this.indexOfViewForProfile(profile);\n        if (index !== -1) {\n            return this.profileToView[index].view;\n        }\n        const view = profile.createView(this);\n        view.element.classList.add('profile-view');\n        this.profileToView.push({ profile, view });\n        return view;\n    }\n    indexOfViewForProfile(profile) {\n        return this.profileToView.findIndex(item => item.profile === profile);\n    }\n    closeVisibleView() {\n        UI.Context.Context.instance().setFlavor(ProfileHeader, null);\n        this.#saveToFileAction.setEnabled(false);\n        if (this.visibleView) {\n            this.visibleView.detach();\n        }\n        delete this.visibleView;\n    }\n    focus() {\n        this.sidebarTree.focus();\n    }\n    wasShown() {\n        super.wasShown();\n        UI.Context.Context.instance().setFlavor(ProfilesPanel, this);\n        this.registerCSSFiles([objectValueStyles, profilesPanelStyles, heapProfilerStyles]);\n        this.sidebarTree.registerCSSFiles([profilesSidebarTreeStyles]);\n    }\n    willHide() {\n        UI.Context.Context.instance().setFlavor(ProfilesPanel, null);\n        super.willHide();\n    }\n}\nexport class ProfileTypeSidebarSection extends UI.TreeOutline.TreeElement {\n    dataDisplayDelegate;\n    profileTreeElements;\n    profileGroups;\n    constructor(dataDisplayDelegate, profileType) {\n        super(profileType.treeItemTitle, true);\n        this.selectable = false;\n        this.dataDisplayDelegate = dataDisplayDelegate;\n        this.profileTreeElements = [];\n        this.profileGroups = {};\n        this.expand();\n        this.hidden = true;\n        this.setCollapsible(false);\n    }\n    addProfileHeader(profile) {\n        this.hidden = false;\n        const profileType = profile.profileType();\n        let sidebarParent = this;\n        const profileTreeElement = profile.createSidebarTreeElement(this.dataDisplayDelegate);\n        this.profileTreeElements.push(profileTreeElement);\n        if (!profile.fromFile() && profileType.profileBeingRecorded() !== profile) {\n            const profileTitle = profile.title;\n            let group = this.profileGroups[profileTitle];\n            if (!group) {\n                group = new ProfileGroup();\n                this.profileGroups[profileTitle] = group;\n            }\n            group.profileSidebarTreeElements.push(profileTreeElement);\n            const groupSize = group.profileSidebarTreeElements.length;\n            if (groupSize === 2) {\n                // Make a group UI.TreeOutline.TreeElement now that there are 2 profiles.\n                group.sidebarTreeElement = new ProfileGroupSidebarTreeElement(this.dataDisplayDelegate, profile.title);\n                const firstProfileTreeElement = group.profileSidebarTreeElements[0];\n                // Insert at the same index for the first profile of the group.\n                const index = this.children().indexOf(firstProfileTreeElement);\n                this.insertChild(group.sidebarTreeElement, index);\n                // Move the first profile to the group.\n                const selected = firstProfileTreeElement.selected;\n                this.removeChild(firstProfileTreeElement);\n                group.sidebarTreeElement.appendChild(firstProfileTreeElement);\n                if (selected) {\n                    firstProfileTreeElement.revealAndSelect();\n                }\n                firstProfileTreeElement.setSmall(true);\n                firstProfileTreeElement.setMainTitle(i18nString(UIStrings.runD, { PH1: 1 }));\n                if (this.treeOutline) {\n                    this.treeOutline.element.classList.add('some-expandable');\n                }\n            }\n            if (groupSize >= 2) {\n                sidebarParent = group.sidebarTreeElement;\n                profileTreeElement.setSmall(true);\n                profileTreeElement.setMainTitle(i18nString(UIStrings.runD, { PH1: groupSize }));\n            }\n        }\n        if (sidebarParent) {\n            sidebarParent.appendChild(profileTreeElement);\n        }\n    }\n    removeProfileHeader(profile) {\n        const index = this.sidebarElementIndex(profile);\n        if (index === -1) {\n            return false;\n        }\n        const profileTreeElement = this.profileTreeElements[index];\n        this.profileTreeElements.splice(index, 1);\n        let sidebarParent = this;\n        const group = this.profileGroups[profile.title];\n        if (group) {\n            const groupElements = group.profileSidebarTreeElements;\n            groupElements.splice(groupElements.indexOf(profileTreeElement), 1);\n            if (groupElements.length === 1) {\n                // Move the last profile out of its group and remove the group.\n                const pos = sidebarParent.children().indexOf(group.sidebarTreeElement);\n                if (group.sidebarTreeElement) {\n                    group.sidebarTreeElement.removeChild(groupElements[0]);\n                }\n                this.insertChild(groupElements[0], pos);\n                groupElements[0].setSmall(false);\n                groupElements[0].setMainTitle(profile.title);\n                if (group.sidebarTreeElement) {\n                    this.removeChild(group.sidebarTreeElement);\n                }\n            }\n            if (groupElements.length !== 0) {\n                sidebarParent = group.sidebarTreeElement;\n            }\n        }\n        if (sidebarParent) {\n            sidebarParent.removeChild(profileTreeElement);\n        }\n        profileTreeElement.dispose();\n        if (this.childCount()) {\n            return false;\n        }\n        this.hidden = true;\n        return true;\n    }\n    sidebarElementForProfile(profile) {\n        const index = this.sidebarElementIndex(profile);\n        return index === -1 ? null : this.profileTreeElements[index];\n    }\n    sidebarElementIndex(profile) {\n        const elements = this.profileTreeElements;\n        for (let i = 0; i < elements.length; i++) {\n            if (elements[i].profile === profile) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    onattach() {\n        this.listItemElement.classList.add('profiles-tree-section');\n    }\n}\nexport class ProfileGroup {\n    profileSidebarTreeElements;\n    sidebarTreeElement;\n    constructor() {\n        this.profileSidebarTreeElements = [];\n        this.sidebarTreeElement = null;\n    }\n}\nexport class ProfileGroupSidebarTreeElement extends UI.TreeOutline.TreeElement {\n    dataDisplayDelegate;\n    profileTitle;\n    toggleOnClick;\n    constructor(dataDisplayDelegate, title) {\n        super('', true);\n        this.selectable = false;\n        this.dataDisplayDelegate = dataDisplayDelegate;\n        this.profileTitle = title;\n        this.expand();\n        this.toggleOnClick = true;\n    }\n    onselect() {\n        const hasChildren = this.childCount() > 0;\n        if (hasChildren) {\n            const lastChild = this.lastChild();\n            if (lastChild instanceof ProfileSidebarTreeElement) {\n                this.dataDisplayDelegate.showProfile(lastChild.profile);\n            }\n        }\n        return hasChildren;\n    }\n    onattach() {\n        this.listItemElement.classList.add('profile-group-sidebar-tree-item');\n        this.listItemElement.createChild('div', 'icon');\n        this.listItemElement.createChild('div', 'titles no-subtitle')\n            .createChild('span', 'title-container')\n            .createChild('span', 'title')\n            .textContent = this.profileTitle;\n    }\n}\nexport class ProfilesSidebarTreeElement extends UI.TreeOutline.TreeElement {\n    panel;\n    constructor(panel) {\n        super('', false);\n        this.selectable = true;\n        this.panel = panel;\n    }\n    onselect() {\n        this.panel.showLauncherView();\n        return true;\n    }\n    onattach() {\n        this.listItemElement.classList.add('profile-launcher-view-tree-item');\n        this.listItemElement.createChild('div', 'titles no-subtitle')\n            .createChild('span', 'title-container')\n            .createChild('span', 'title')\n            .textContent = i18nString(UIStrings.profiles);\n        this.setLeadingIcons([IconButton.Icon.create('tune')]);\n    }\n}\nexport class ActionDelegate {\n    handleAction(context, actionId) {\n        switch (actionId) {\n            case 'profiler.clear-all': {\n                const profilesPanel = context.flavor(ProfilesPanel);\n                if (profilesPanel !== null) {\n                    profilesPanel.reset();\n                    return true;\n                }\n                return false;\n            }\n            case 'profiler.load-from-file': {\n                const profilesPanel = context.flavor(ProfilesPanel);\n                if (profilesPanel !== null) {\n                    profilesPanel.showLoadFromFileDialog();\n                    return true;\n                }\n                return false;\n            }\n            case 'profiler.save-to-file': {\n                const profile = context.flavor(ProfileHeader);\n                if (profile !== null) {\n                    profile.saveToFile();\n                    return true;\n                }\n                return false;\n            }\n            case 'profiler.delete-profile': {\n                const profile = context.flavor(ProfileHeader);\n                if (profile !== null) {\n                    profile.profileType().removeProfile(profile);\n                    return true;\n                }\n                return false;\n            }\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=ProfilesPanel.js.map","// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Elements from '../elements/elements.js';\nconst UIStrings = {\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    detachedNodes: 'Detached nodes',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    nodeSize: 'Node count',\n    /**\n     *@description Label for the detached elements table\n     */\n    detachedElementsList: 'Detached elements list',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapDetachedElementsDataGrid.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class HeapDetachedElementsDataGrid extends DataGrid.DataGrid.DataGridImpl {\n    constructor() {\n        const columns = [];\n        columns.push({\n            id: 'detached-node',\n            title: i18nString(UIStrings.detachedNodes),\n            sortable: false,\n        });\n        columns.push({\n            id: 'detached-node-count',\n            title: i18nString(UIStrings.nodeSize),\n            sortable: false,\n            disclosure: true,\n        });\n        super({\n            displayName: i18nString(UIStrings.detachedElementsList),\n            columns,\n            editCallback: undefined,\n            deleteCallback: undefined,\n            refreshCallback: undefined,\n        });\n        this.setStriped(true);\n    }\n}\nexport class HeapDetachedElementsDataGridNode extends DataGrid.DataGrid.DataGridNode {\n    detachedElementInfo;\n    domModel;\n    retainedNodeIds = new Set();\n    constructor(detachedElementInfo, domModel) {\n        super(null);\n        this.detachedElementInfo = detachedElementInfo;\n        this.domModel = domModel;\n        for (const retainedNodeId of detachedElementInfo.retainedNodeIds) {\n            this.retainedNodeIds.add(retainedNodeId);\n        }\n    }\n    createCell(columnId) {\n        const cell = this.createTD(columnId);\n        switch (columnId) {\n            case 'detached-node': {\n                const DOMNode = SDK.DOMModel.DOMNode.create(this.domModel, null, false, this.detachedElementInfo.treeNode);\n                cell.appendChild(this.#nodeRenderer(DOMNode));\n                return cell;\n            }\n            case 'detached-node-count': {\n                const size = this.#getNodeSize(this.detachedElementInfo);\n                UI.UIUtils.createTextChild(cell, size.toString());\n                return cell;\n            }\n        }\n        return cell;\n    }\n    #getNodeSize(detachedElementInfo) {\n        let count = 1;\n        const queue = [];\n        let node;\n        queue.push(detachedElementInfo.treeNode);\n        while (queue.length > 0) {\n            node = queue.shift();\n            if (!node) {\n                break;\n            }\n            if (node.childNodeCount) {\n                count += node.childNodeCount;\n            }\n            if (node.children) {\n                for (const child of node.children) {\n                    queue.push(child);\n                }\n            }\n        }\n        return count;\n    }\n    #nodeRenderer(node) {\n        const treeOutline = new Elements.ElementsTreeOutline.ElementsTreeOutline(\n        /* omitRootDOMNode: */ false, /* selectEnabled: */ false, /* hideGutter: */ true);\n        treeOutline.rootDOMNode = node;\n        const firstChild = treeOutline.firstChild();\n        if (!firstChild || (firstChild && !firstChild.isExpandable())) {\n            treeOutline.element.classList.add('single-node');\n        }\n        treeOutline.setVisible(true);\n        // @ts-ignore used in console_test_runner\n        treeOutline.element.treeElementForTest = firstChild;\n        treeOutline.setShowSelectionOnKeyboardFocus(/* show: */ true, /* preventTabOrder: */ true);\n        const nodes = [node];\n        // Iterate through descendants to mark the nodes that were specifically retained in JS references.\n        while (nodes.length > 0) {\n            const descendantNode = nodes.shift();\n            const descendantsChildren = descendantNode.children();\n            if (descendantsChildren) {\n                for (const child of descendantsChildren) {\n                    nodes.push(child);\n                }\n            }\n            const treeElement = treeOutline.findTreeElement(descendantNode);\n            // If true, this node is retained in JS, and should be marked.\n            if (treeElement) {\n                if (this.retainedNodeIds.has(descendantNode.backendNodeId())) {\n                    const icon = new IconButton.Icon.Icon();\n                    // this needs to be updated, data field is deprecated\n                    icon.data = { iconName: 'small-status-dot', color: 'var(--icon-error)', width: '12px', height: '12px' };\n                    icon.style.setProperty('vertical-align', 'middle');\n                    treeElement.setLeadingIcons([icon]);\n                    treeElement.listItemNode.classList.add('detached-elements-detached-node');\n                    treeElement.listItemNode.style.setProperty('display', '-webkit-box');\n                    treeElement.listItemNode.setAttribute('title', 'Retained Node');\n                }\n                else {\n                    treeElement.listItemNode.setAttribute('title', 'Node');\n                }\n            }\n        }\n        treeOutline.findTreeElement(node)?.listItemNode.setAttribute('title', 'Detached Tree Node');\n        return treeOutline.element;\n    }\n}\n//# sourceMappingURL=HeapDetachedElementsDataGrid.js.map","/**\n * Copyright (C) 2014 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nlet colorGeneratorInstance = null;\nexport class ProfileFlameChartDataProvider {\n    colorGeneratorInternal;\n    maxStackDepthInternal;\n    timelineDataInternal;\n    entryNodes;\n    #font;\n    boldFont;\n    constructor() {\n        this.colorGeneratorInternal = ProfileFlameChartDataProvider.colorGenerator();\n        this.maxStackDepthInternal = 0;\n        this.timelineDataInternal = null;\n        this.entryNodes = [];\n        this.#font = `${PerfUI.Font.DEFAULT_FONT_SIZE} ${PerfUI.Font.getFontFamilyForCanvas()}`;\n    }\n    static colorGenerator() {\n        if (!colorGeneratorInstance) {\n            colorGeneratorInstance = new Common.Color.Generator({ min: 30, max: 330, count: undefined }, { min: 50, max: 80, count: 5 }, { min: 80, max: 90, count: 3 });\n            colorGeneratorInstance.setColorForID('(idle)', 'hsl(0, 0%, 94%)');\n            colorGeneratorInstance.setColorForID('(program)', 'hsl(0, 0%, 80%)');\n            colorGeneratorInstance.setColorForID('(garbage collector)', 'hsl(0, 0%, 80%)');\n        }\n        return colorGeneratorInstance;\n    }\n    minimumBoundary() {\n        throw 'Not implemented.';\n    }\n    totalTime() {\n        throw 'Not implemented.';\n    }\n    formatValue(value, precision) {\n        return i18n.TimeUtilities.preciseMillisToString(value, precision);\n    }\n    maxStackDepth() {\n        return this.maxStackDepthInternal;\n    }\n    hasTrackConfigurationMode() {\n        return false;\n    }\n    timelineData() {\n        return this.timelineDataInternal || this.calculateTimelineData();\n    }\n    calculateTimelineData() {\n        throw 'Not implemented.';\n    }\n    prepareHighlightedEntryInfo(_entryIndex) {\n        throw 'Not implemented.';\n    }\n    canJumpToEntry(entryIndex) {\n        return this.entryNodes[entryIndex].scriptId !== '0';\n    }\n    entryTitle(entryIndex) {\n        const node = this.entryNodes[entryIndex];\n        return UI.UIUtils.beautifyFunctionName(node.functionName);\n    }\n    entryFont(entryIndex) {\n        const boldFont = 'bold ' + this.#font;\n        return this.entryHasDeoptReason(entryIndex) ? boldFont : this.#font;\n    }\n    entryHasDeoptReason(_entryIndex) {\n        throw 'Not implemented.';\n    }\n    entryColor(entryIndex) {\n        const node = this.entryNodes[entryIndex];\n        // For idle and program, we want different 'shades of gray', so we fallback to functionName as scriptId = 0\n        // For rest of nodes e.g eval scripts, if url is empty then scriptId will be guaranteed to be non-zero\n        return this.colorGeneratorInternal.colorForID(node.url || (node.scriptId !== '0' ? node.scriptId : node.functionName));\n    }\n    decorateEntry(_entryIndex, _context, _text, _barX, _barY, _barWidth, _barHeight) {\n        return false;\n    }\n    forceDecoration(_entryIndex) {\n        return false;\n    }\n    textColor(_entryIndex) {\n        return '#333';\n    }\n    entryNodesLength() {\n        return this.entryNodes.length;\n    }\n}\nexport class ProfileFlameChart extends Common.ObjectWrapper.eventMixin(UI.Widget.VBox) {\n    searchableView;\n    overviewPane;\n    mainPane;\n    entrySelected;\n    dataProvider;\n    searchResults;\n    searchResultIndex = -1;\n    constructor(searchableView, dataProvider) {\n        super();\n        this.element.id = 'cpu-flame-chart';\n        this.searchableView = searchableView;\n        this.overviewPane = new OverviewPane(dataProvider);\n        this.overviewPane.show(this.element);\n        this.mainPane = new PerfUI.FlameChart.FlameChart(dataProvider, this.overviewPane);\n        this.mainPane.setBarHeight(15);\n        this.mainPane.setTextBaseline(4);\n        this.mainPane.setTextPadding(2);\n        this.mainPane.show(this.element);\n        this.mainPane.addEventListener(\"EntrySelected\" /* PerfUI.FlameChart.Events.ENTRY_SELECTED */, this.onEntrySelected, this);\n        this.mainPane.addEventListener(\"EntryInvoked\" /* PerfUI.FlameChart.Events.ENTRY_INVOKED */, this.onEntryInvoked, this);\n        this.entrySelected = false;\n        this.mainPane.addEventListener(\"CanvasFocused\" /* PerfUI.FlameChart.Events.CANVAS_FOCUSED */, this.onEntrySelected, this);\n        this.overviewPane.addEventListener(\"WindowChanged\" /* OverviewPaneEvents.WINDOW_CHANGED */, this.onWindowChanged, this);\n        this.dataProvider = dataProvider;\n        this.searchResults = [];\n    }\n    focus() {\n        this.mainPane.focus();\n    }\n    onWindowChanged(event) {\n        const { windowTimeLeft: windowLeft, windowTimeRight: windowRight } = event.data;\n        this.mainPane.setWindowTimes(windowLeft, windowRight, /* animate */ true);\n    }\n    selectRange(timeLeft, timeRight) {\n        this.overviewPane.selectRange(timeLeft, timeRight);\n    }\n    onEntrySelected(event) {\n        if (event.data) {\n            const eventIndex = event.data;\n            this.mainPane.setSelectedEntry(eventIndex);\n            if (eventIndex === -1) {\n                this.entrySelected = false;\n            }\n            else {\n                this.entrySelected = true;\n            }\n        }\n        else if (!this.entrySelected) {\n            this.mainPane.setSelectedEntry(0);\n            this.entrySelected = true;\n        }\n    }\n    onEntryInvoked(event) {\n        this.onEntrySelected(event);\n        this.dispatchEventToListeners(\"EntryInvoked\" /* PerfUI.FlameChart.Events.ENTRY_INVOKED */, event.data);\n    }\n    update() {\n        this.overviewPane.update();\n        this.mainPane.update();\n    }\n    performSearch(searchConfig, _shouldJump, jumpBackwards) {\n        const matcher = Platform.StringUtilities.createPlainTextSearchRegex(searchConfig.query, searchConfig.caseSensitive ? '' : 'i');\n        const selectedEntryIndex = this.searchResultIndex !== -1 ? this.searchResults[this.searchResultIndex] : -1;\n        this.searchResults = [];\n        const entriesCount = this.dataProvider.entryNodesLength();\n        for (let index = 0; index < entriesCount; ++index) {\n            if (this.dataProvider.entryTitle(index).match(matcher)) {\n                this.searchResults.push(index);\n            }\n        }\n        if (this.searchResults.length) {\n            this.searchResultIndex = this.searchResults.indexOf(selectedEntryIndex);\n            if (this.searchResultIndex === -1) {\n                this.searchResultIndex = jumpBackwards ? this.searchResults.length - 1 : 0;\n            }\n            this.mainPane.setSelectedEntry(this.searchResults[this.searchResultIndex]);\n        }\n        else {\n            this.onSearchCanceled();\n        }\n        this.searchableView.updateSearchMatchesCount(this.searchResults.length);\n        this.searchableView.updateCurrentMatchIndex(this.searchResultIndex);\n    }\n    onSearchCanceled() {\n        this.mainPane.setSelectedEntry(-1);\n        this.searchResults = [];\n        this.searchResultIndex = -1;\n    }\n    jumpToNextSearchResult() {\n        this.searchResultIndex = (this.searchResultIndex + 1) % this.searchResults.length;\n        this.mainPane.setSelectedEntry(this.searchResults[this.searchResultIndex]);\n        this.searchableView.updateCurrentMatchIndex(this.searchResultIndex);\n    }\n    jumpToPreviousSearchResult() {\n        this.searchResultIndex = (this.searchResultIndex - 1 + this.searchResults.length) % this.searchResults.length;\n        this.mainPane.setSelectedEntry(this.searchResults[this.searchResultIndex]);\n        this.searchableView.updateCurrentMatchIndex(this.searchResultIndex);\n    }\n    supportsCaseSensitiveSearch() {\n        return true;\n    }\n    supportsRegexSearch() {\n        return false;\n    }\n}\nexport class OverviewCalculator {\n    formatter;\n    minimumBoundaries;\n    maximumBoundaries;\n    xScaleFactor;\n    constructor(formatter) {\n        this.formatter = formatter;\n    }\n    updateBoundaries(overviewPane) {\n        this.minimumBoundaries = overviewPane.dataProvider.minimumBoundary();\n        const totalTime = overviewPane.dataProvider.totalTime();\n        this.maximumBoundaries = this.minimumBoundaries + totalTime;\n        this.xScaleFactor = overviewPane.overviewContainer.clientWidth / totalTime;\n    }\n    computePosition(time) {\n        return (time - this.minimumBoundaries) * this.xScaleFactor;\n    }\n    formatValue(value, precision) {\n        return this.formatter(value - this.minimumBoundaries, precision);\n    }\n    maximumBoundary() {\n        return this.maximumBoundaries;\n    }\n    minimumBoundary() {\n        return this.minimumBoundaries;\n    }\n    zeroTime() {\n        return this.minimumBoundaries;\n    }\n    boundarySpan() {\n        return this.maximumBoundaries - this.minimumBoundaries;\n    }\n}\nexport class OverviewPane extends Common.ObjectWrapper.eventMixin(UI.Widget.VBox) {\n    overviewContainer;\n    overviewCalculator;\n    overviewGrid;\n    overviewCanvas;\n    dataProvider;\n    windowTimeLeft;\n    windowTimeRight;\n    updateTimerId;\n    constructor(dataProvider) {\n        super();\n        this.element.classList.add('cpu-profile-flame-chart-overview-pane');\n        this.overviewContainer = this.element.createChild('div', 'cpu-profile-flame-chart-overview-container');\n        this.overviewCalculator = new OverviewCalculator(dataProvider.formatValue);\n        this.overviewGrid = new PerfUI.OverviewGrid.OverviewGrid('cpu-profile-flame-chart', this.overviewCalculator);\n        this.overviewGrid.element.classList.add('fill');\n        this.overviewCanvas =\n            this.overviewContainer.createChild('canvas', 'cpu-profile-flame-chart-overview-canvas');\n        this.overviewContainer.appendChild(this.overviewGrid.element);\n        this.dataProvider = dataProvider;\n        this.overviewGrid.addEventListener(\"WindowChangedWithPosition\" /* PerfUI.OverviewGrid.Events.WINDOW_CHANGED_WITH_POSITION */, this.onWindowChanged, this);\n    }\n    windowChanged(windowStartTime, windowEndTime) {\n        this.selectRange(windowStartTime, windowEndTime);\n    }\n    updateRangeSelection(_startTime, _endTime) {\n    }\n    updateSelectedGroup(_flameChart, _group) {\n    }\n    selectRange(timeLeft, timeRight) {\n        const startTime = this.dataProvider.minimumBoundary();\n        const totalTime = this.dataProvider.totalTime();\n        this.overviewGrid.setWindow((timeLeft - startTime) / totalTime, (timeRight - startTime) / totalTime);\n    }\n    onWindowChanged(event) {\n        const windowPosition = { windowTimeLeft: event.data.rawStartValue, windowTimeRight: event.data.rawEndValue };\n        this.windowTimeLeft = windowPosition.windowTimeLeft;\n        this.windowTimeRight = windowPosition.windowTimeRight;\n        this.dispatchEventToListeners(\"WindowChanged\" /* OverviewPaneEvents.WINDOW_CHANGED */, windowPosition);\n    }\n    timelineData() {\n        return this.dataProvider.timelineData();\n    }\n    onResize() {\n        this.scheduleUpdate();\n    }\n    scheduleUpdate() {\n        if (this.updateTimerId) {\n            return;\n        }\n        this.updateTimerId = this.element.window().requestAnimationFrame(this.update.bind(this));\n    }\n    update() {\n        this.updateTimerId = 0;\n        const timelineData = this.timelineData();\n        if (!timelineData) {\n            return;\n        }\n        this.resetCanvas(this.overviewContainer.clientWidth, this.overviewContainer.clientHeight - PerfUI.FlameChart.RulerHeight);\n        this.overviewCalculator.updateBoundaries(this);\n        this.overviewGrid.updateDividers(this.overviewCalculator);\n        this.drawOverviewCanvas();\n    }\n    drawOverviewCanvas() {\n        const canvasWidth = this.overviewCanvas.width;\n        const canvasHeight = this.overviewCanvas.height;\n        const drawData = this.calculateDrawData(canvasWidth);\n        const context = this.overviewCanvas.getContext('2d');\n        if (!context) {\n            throw new Error('Failed to get canvas context');\n        }\n        const ratio = window.devicePixelRatio;\n        const offsetFromBottom = ratio;\n        const lineWidth = 1;\n        const yScaleFactor = canvasHeight / (this.dataProvider.maxStackDepth() * 1.1);\n        context.lineWidth = lineWidth;\n        context.translate(0.5, 0.5);\n        context.strokeStyle = 'rgba(20,0,0,0.4)';\n        context.fillStyle = 'rgba(214,225,254,0.8)';\n        context.moveTo(-lineWidth, canvasHeight + lineWidth);\n        context.lineTo(-lineWidth, Math.round(canvasHeight - drawData[0] * yScaleFactor - offsetFromBottom));\n        let value = 0;\n        for (let x = 0; x < canvasWidth; ++x) {\n            value = Math.round(canvasHeight - drawData[x] * yScaleFactor - offsetFromBottom);\n            context.lineTo(x, value);\n        }\n        context.lineTo(canvasWidth + lineWidth, value);\n        context.lineTo(canvasWidth + lineWidth, canvasHeight + lineWidth);\n        context.fill();\n        context.stroke();\n        context.closePath();\n    }\n    calculateDrawData(width) {\n        const dataProvider = this.dataProvider;\n        const timelineData = this.timelineData();\n        const entryStartTimes = timelineData.entryStartTimes;\n        const entryTotalTimes = timelineData.entryTotalTimes;\n        const entryLevels = timelineData.entryLevels;\n        const length = entryStartTimes.length;\n        const minimumBoundary = this.dataProvider.minimumBoundary();\n        const drawData = new Uint8Array(width);\n        const scaleFactor = width / dataProvider.totalTime();\n        for (let entryIndex = 0; entryIndex < length; ++entryIndex) {\n            const start = Math.floor((entryStartTimes[entryIndex] - minimumBoundary) * scaleFactor);\n            const finish = Math.floor((entryStartTimes[entryIndex] - minimumBoundary + entryTotalTimes[entryIndex]) * scaleFactor);\n            for (let x = start; x <= finish; ++x) {\n                drawData[x] = Math.max(drawData[x], entryLevels[entryIndex] + 1);\n            }\n        }\n        return drawData;\n    }\n    resetCanvas(width, height) {\n        const ratio = window.devicePixelRatio;\n        this.overviewCanvas.width = width * ratio;\n        this.overviewCanvas.height = height * ratio;\n        this.overviewCanvas.style.width = width + 'px';\n        this.overviewCanvas.style.height = height + 'px';\n    }\n}\n//# sourceMappingURL=ProfileFlameChartDataProvider.js.map","// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport { ProfileDataGridNode, ProfileDataGridTree } from './ProfileDataGrid.js';\nexport class TopDownProfileDataGridNode extends ProfileDataGridNode {\n    remainingChildren;\n    constructor(profileNode, owningTree) {\n        const hasChildren = Boolean(profileNode.children && profileNode.children.length);\n        super(profileNode, owningTree, hasChildren);\n        this.remainingChildren = profileNode.children;\n    }\n    static sharedPopulate(container) {\n        const children = container.remainingChildren;\n        const childrenLength = children.length;\n        for (let i = 0; i < childrenLength; ++i) {\n            container.appendChild(new TopDownProfileDataGridNode(children[i], container.tree));\n        }\n        container.remainingChildren = [];\n    }\n    static excludeRecursively(container, aCallUID) {\n        if (container.remainingChildren.length > 0) {\n            container.populate();\n        }\n        container.save();\n        const children = container.children;\n        let index = container.children.length;\n        while (index--) {\n            TopDownProfileDataGridNode.excludeRecursively(children[index], aCallUID);\n        }\n        const child = container.childrenByCallUID.get(aCallUID);\n        if (child) {\n            ProfileDataGridNode.merge(container, child, true);\n        }\n    }\n    populateChildren() {\n        TopDownProfileDataGridNode.sharedPopulate(this);\n    }\n}\nexport class TopDownProfileDataGridTree extends ProfileDataGridTree {\n    remainingChildren;\n    constructor(formatter, searchableView, rootProfileNode, total) {\n        super(formatter, searchableView, total);\n        this.remainingChildren = rootProfileNode.children;\n        ProfileDataGridNode.populate(this);\n    }\n    focus(profileDataGridNode) {\n        if (!profileDataGridNode) {\n            return;\n        }\n        this.save();\n        profileDataGridNode.savePosition();\n        this.children = [profileDataGridNode];\n        this.total = profileDataGridNode.total;\n    }\n    exclude(profileDataGridNode) {\n        if (!profileDataGridNode) {\n            return;\n        }\n        this.save();\n        TopDownProfileDataGridNode.excludeRecursively(this, profileDataGridNode.callUID);\n        if (this.lastComparator) {\n            this.sort(this.lastComparator, true);\n        }\n    }\n    restore() {\n        if (!this.savedChildren) {\n            return;\n        }\n        this.children[0].restorePosition();\n        super.restore();\n    }\n    populateChildren() {\n        TopDownProfileDataGridNode.sharedPopulate(this);\n    }\n}\n//# sourceMappingURL=TopDownProfileDataGrid.js.map","// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport { BottomUpProfileDataGridTree } from './BottomUpProfileDataGrid.js';\nimport { ProfileDataGridTree } from './ProfileDataGrid.js';\nimport { ProfileFlameChart } from './ProfileFlameChartDataProvider.js';\nimport { ProfileHeader } from './ProfileHeader.js';\nimport { ProfileSidebarTreeElement } from './ProfileSidebarTreeElement.js';\nimport { TopDownProfileDataGridTree } from './TopDownProfileDataGrid.js';\nconst UIStrings = {\n    /**\n     *@description Text in Profile View of a profiler tool\n     */\n    profile: 'Profile',\n    /**\n     *@description Placeholder text in the search box of the JavaScript profiler tool. Users can search\n     *the results by the cost in milliseconds, the name of the function, or the file name.\n     */\n    findByCostMsNameOrFile: 'Find by cost (>50ms), name or file',\n    /**\n     *@description Text for a programming function\n     */\n    function: 'Function',\n    /**\n     *@description Title of the Profiler tool\n     */\n    profiler: 'Profiler',\n    /**\n     *@description Aria-label for profiles view combobox in memory tool\n     */\n    profileViewMode: 'Profile view mode',\n    /**\n     *@description Tooltip text that appears when hovering over the largeicon visibility button in the Profile View of a profiler tool\n     */\n    focusSelectedFunction: 'Focus selected function',\n    /**\n     *@description Tooltip text that appears when hovering over the largeicon delete button in the Profile View of a profiler tool\n     */\n    excludeSelectedFunction: 'Exclude selected function',\n    /**\n     *@description Tooltip text that appears when hovering over the largeicon refresh button in the Profile View of a profiler tool\n     */\n    restoreAllFunctions: 'Restore all functions',\n    /**\n     *@description Text in Profile View of a profiler tool\n     */\n    chart: 'Chart',\n    /**\n     *@description Text in Profile View of a profiler tool\n     */\n    heavyBottomUp: 'Heavy (Bottom Up)',\n    /**\n     *@description Text for selecting different profile views in the JS profiler tool. This option is a tree view.\n     */\n    treeTopDown: 'Tree (Top Down)',\n    /**\n     * @description Name of a profile\n     * @example {2} PH1\n     */\n    profileD: 'Profile {PH1}',\n    /**\n     *@description Text in Profile View of a profiler tool\n     *@example {4 MB} PH1\n     */\n    loadingD: 'Loading… {PH1}%',\n    /**\n     *@description Text in Profile View of a profiler tool\n     *@example {example.file} PH1\n     *@example {cannot open file} PH2\n     */\n    fileSReadErrorS: 'File \\'\\'{PH1}\\'\\' read error: {PH2}',\n    /**\n     *@description Text when something is loading\n     */\n    loading: 'Loading…',\n    /**\n     *@description Text in Profile View of a profiler tool\n     */\n    failedToReadFile: 'Failed to read file',\n    /**\n     *@description Text in Profile View of a profiler tool\n     */\n    parsing: 'Parsing…',\n    /**\n     * @description Status indicator in the JS Profiler to show that a file has been successfully loaded\n     * from file, as opposed to a profile that has been captured locally.\n     */\n    loaded: 'Loaded',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/ProfileView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ProfileView extends UI.View.SimpleView {\n    profileInternal;\n    searchableViewInternal;\n    dataGrid;\n    viewSelectComboBox;\n    focusButton;\n    excludeButton;\n    resetButton;\n    linkifierInternal;\n    nodeFormatter;\n    viewType;\n    adjustedTotal;\n    profileHeader;\n    bottomUpProfileDataGridTree;\n    topDownProfileDataGridTree;\n    currentSearchResultIndex;\n    dataProvider;\n    flameChart;\n    visibleView;\n    searchableElement;\n    profileDataGridTree;\n    constructor() {\n        super(i18nString(UIStrings.profile));\n        this.profileInternal = null;\n        this.searchableViewInternal = new UI.SearchableView.SearchableView(this, null);\n        this.searchableViewInternal.setPlaceholder(i18nString(UIStrings.findByCostMsNameOrFile));\n        this.searchableViewInternal.show(this.element);\n        const columns = [];\n        columns.push({\n            id: 'self',\n            title: this.columnHeader('self'),\n            width: '120px',\n            fixedWidth: true,\n            sortable: true,\n            sort: DataGrid.DataGrid.Order.Descending,\n            titleDOMFragment: undefined,\n            align: undefined,\n            editable: undefined,\n            nonSelectable: undefined,\n            longText: undefined,\n            disclosure: undefined,\n            weight: undefined,\n            allowInSortByEvenWhenHidden: undefined,\n            dataType: undefined,\n            defaultWeight: undefined,\n        });\n        columns.push({\n            id: 'total',\n            title: this.columnHeader('total'),\n            width: '120px',\n            fixedWidth: true,\n            sortable: true,\n            sort: undefined,\n            titleDOMFragment: undefined,\n            align: undefined,\n            editable: undefined,\n            nonSelectable: undefined,\n            longText: undefined,\n            disclosure: undefined,\n            weight: undefined,\n            allowInSortByEvenWhenHidden: undefined,\n            dataType: undefined,\n            defaultWeight: undefined,\n        });\n        columns.push({\n            id: 'function',\n            title: i18nString(UIStrings.function),\n            disclosure: true,\n            sortable: true,\n            sort: undefined,\n            titleDOMFragment: undefined,\n            align: undefined,\n            editable: undefined,\n            nonSelectable: undefined,\n            longText: undefined,\n            weight: undefined,\n            allowInSortByEvenWhenHidden: undefined,\n            dataType: undefined,\n            defaultWeight: undefined,\n            width: undefined,\n            fixedWidth: undefined,\n        });\n        this.dataGrid = new DataGrid.DataGrid.DataGridImpl({\n            displayName: i18nString(UIStrings.profiler),\n            columns,\n            editCallback: undefined,\n            deleteCallback: undefined,\n            refreshCallback: undefined,\n        });\n        this.dataGrid.addEventListener(\"SortingChanged\" /* DataGrid.DataGrid.Events.SORTING_CHANGED */, this.sortProfile, this);\n        this.dataGrid.addEventListener(\"SelectedNode\" /* DataGrid.DataGrid.Events.SELECTED_NODE */, this.nodeSelected.bind(this, true));\n        this.dataGrid.addEventListener(\"DeselectedNode\" /* DataGrid.DataGrid.Events.DESELECTED_NODE */, this.nodeSelected.bind(this, false));\n        this.dataGrid.setRowContextMenuCallback(this.populateContextMenu.bind(this));\n        this.viewSelectComboBox = new UI.Toolbar.ToolbarComboBox(this.changeView.bind(this), i18nString(UIStrings.profileViewMode), undefined, 'profile-view.selected-view');\n        this.focusButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.focusSelectedFunction), 'eye', undefined, 'profile-view.focus-selected-function');\n        this.focusButton.setEnabled(false);\n        this.focusButton.addEventListener(\"Click\" /* UI.Toolbar.ToolbarButton.Events.CLICK */, this.focusClicked, this);\n        this.excludeButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.excludeSelectedFunction), 'cross', undefined, 'profile-view.exclude-selected-function');\n        this.excludeButton.setEnabled(false);\n        this.excludeButton.addEventListener(\"Click\" /* UI.Toolbar.ToolbarButton.Events.CLICK */, this.excludeClicked, this);\n        this.resetButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.restoreAllFunctions), 'refresh', undefined, 'profile-view.restore-all-functions');\n        this.resetButton.setEnabled(false);\n        this.resetButton.addEventListener(\"Click\" /* UI.Toolbar.ToolbarButton.Events.CLICK */, this.resetClicked, this);\n        this.linkifierInternal = new Components.Linkifier.Linkifier(maxLinkLength);\n    }\n    static buildPopoverTable(entryInfo) {\n        const table = document.createElement('table');\n        for (const entry of entryInfo) {\n            const row = table.createChild('tr');\n            row.createChild('td').textContent = entry.title;\n            row.createChild('td').textContent = entry.value;\n        }\n        return table;\n    }\n    setProfile(profile) {\n        this.profileInternal = profile;\n        this.bottomUpProfileDataGridTree = null;\n        this.topDownProfileDataGridTree = null;\n        this.changeView();\n        this.refresh();\n    }\n    profile() {\n        return this.profileInternal;\n    }\n    initialize(nodeFormatter) {\n        this.nodeFormatter = nodeFormatter;\n        this.viewType = Common.Settings.Settings.instance().createSetting('profile-view', \"Heavy\" /* ViewTypes.HEAVY */);\n        const viewTypes = [\"Flame\" /* ViewTypes.FLAME */, \"Heavy\" /* ViewTypes.HEAVY */, \"Tree\" /* ViewTypes.TREE */];\n        const optionNames = new Map([\n            [\"Flame\" /* ViewTypes.FLAME */, i18nString(UIStrings.chart)],\n            [\"Heavy\" /* ViewTypes.HEAVY */, i18nString(UIStrings.heavyBottomUp)],\n            [\"Tree\" /* ViewTypes.TREE */, i18nString(UIStrings.treeTopDown)],\n        ]);\n        const options = new Map(viewTypes.map(type => [type, this.viewSelectComboBox.createOption(optionNames.get(type), type)]));\n        const optionName = this.viewType.get() || viewTypes[0];\n        const option = options.get(optionName) || options.get(viewTypes[0]);\n        this.viewSelectComboBox.select(option);\n        this.changeView();\n        if (this.flameChart) {\n            this.flameChart.update();\n        }\n    }\n    focus() {\n        if (this.flameChart) {\n            this.flameChart.focus();\n        }\n        else {\n            super.focus();\n        }\n    }\n    columnHeader(_columnId) {\n        throw 'Not implemented';\n    }\n    selectRange(timeLeft, timeRight) {\n        if (!this.flameChart) {\n            return;\n        }\n        this.flameChart.selectRange(timeLeft, timeRight);\n    }\n    async toolbarItems() {\n        return [this.viewSelectComboBox, this.focusButton, this.excludeButton, this.resetButton];\n    }\n    getBottomUpProfileDataGridTree() {\n        if (!this.bottomUpProfileDataGridTree) {\n            this.bottomUpProfileDataGridTree = new BottomUpProfileDataGridTree(this.nodeFormatter, this.searchableViewInternal, this.profileInternal.root, this.adjustedTotal);\n        }\n        return this.bottomUpProfileDataGridTree;\n    }\n    getTopDownProfileDataGridTree() {\n        if (!this.topDownProfileDataGridTree) {\n            this.topDownProfileDataGridTree = new TopDownProfileDataGridTree(this.nodeFormatter, this.searchableViewInternal, this.profileInternal.root, this.adjustedTotal);\n        }\n        return this.topDownProfileDataGridTree;\n    }\n    populateContextMenu(contextMenu, gridNode) {\n        const node = gridNode;\n        if (node.linkElement) {\n            contextMenu.appendApplicableItems(node.linkElement);\n        }\n    }\n    willHide() {\n        this.currentSearchResultIndex = -1;\n    }\n    refresh() {\n        if (!this.profileDataGridTree) {\n            return;\n        }\n        const selectedProfileNode = this.dataGrid.selectedNode ? this.dataGrid.selectedNode.profileNode : null;\n        this.dataGrid.rootNode().removeChildren();\n        const children = this.profileDataGridTree.children;\n        const count = children.length;\n        for (let index = 0; index < count; ++index) {\n            this.dataGrid.rootNode().appendChild(children[index]);\n        }\n        if (selectedProfileNode) {\n            // TODO(crbug.com/1011811): Cleanup the added `selected` property to this SDK class.\n            // @ts-ignore\n            selectedProfileNode.selected = true;\n        }\n    }\n    refreshVisibleData() {\n        let child = this.dataGrid.rootNode().children[0];\n        while (child) {\n            child.refresh();\n            child = child.traverseNextNode(false, null, true);\n        }\n    }\n    searchableView() {\n        return this.searchableViewInternal;\n    }\n    supportsCaseSensitiveSearch() {\n        return true;\n    }\n    supportsRegexSearch() {\n        return false;\n    }\n    onSearchCanceled() {\n        if (this.searchableElement) {\n            this.searchableElement.onSearchCanceled();\n        }\n    }\n    performSearch(searchConfig, shouldJump, jumpBackwards) {\n        if (this.searchableElement) {\n            this.searchableElement.performSearch(searchConfig, shouldJump, jumpBackwards);\n        }\n    }\n    jumpToNextSearchResult() {\n        if (this.searchableElement) {\n            this.searchableElement.jumpToNextSearchResult();\n        }\n    }\n    jumpToPreviousSearchResult() {\n        if (this.searchableElement) {\n            this.searchableElement.jumpToPreviousSearchResult();\n        }\n    }\n    linkifier() {\n        return this.linkifierInternal;\n    }\n    createFlameChartDataProvider() {\n        throw 'Not implemented';\n    }\n    ensureFlameChartCreated() {\n        if (this.flameChart) {\n            return;\n        }\n        this.dataProvider = this.createFlameChartDataProvider();\n        this.flameChart = new ProfileFlameChart(this.searchableViewInternal, this.dataProvider);\n        this.flameChart.addEventListener(\"EntryInvoked\" /* PerfUI.FlameChart.Events.ENTRY_INVOKED */, event => {\n            void this.onEntryInvoked(event);\n        });\n    }\n    async onEntryInvoked(event) {\n        if (!this.dataProvider) {\n            return;\n        }\n        const entryIndex = event.data;\n        const node = this.dataProvider.entryNodes[entryIndex];\n        const debuggerModel = this.profileHeader.debuggerModel;\n        if (!node || !node.scriptId || !debuggerModel) {\n            return;\n        }\n        const script = debuggerModel.scriptForId(node.scriptId);\n        if (!script) {\n            return;\n        }\n        const location = debuggerModel.createRawLocation(script, node.lineNumber, node.columnNumber);\n        const uiLocation = await Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().rawLocationToUILocation(location);\n        void Common.Revealer.reveal(uiLocation);\n    }\n    changeView() {\n        if (!this.profileInternal) {\n            return;\n        }\n        this.searchableViewInternal.closeSearch();\n        if (this.visibleView) {\n            this.visibleView.detach();\n        }\n        this.viewType.set(this.viewSelectComboBox.selectedOption().value);\n        switch (this.viewType.get()) {\n            case \"Flame\" /* ViewTypes.FLAME */:\n                this.ensureFlameChartCreated();\n                this.visibleView = this.flameChart;\n                this.searchableElement = this.flameChart;\n                break;\n            case \"Tree\" /* ViewTypes.TREE */:\n                this.profileDataGridTree = this.getTopDownProfileDataGridTree();\n                this.sortProfile();\n                this.visibleView = this.dataGrid.asWidget();\n                this.searchableElement = this.profileDataGridTree;\n                break;\n            case \"Heavy\" /* ViewTypes.HEAVY */:\n                this.profileDataGridTree = this.getBottomUpProfileDataGridTree();\n                this.sortProfile();\n                this.visibleView = this.dataGrid.asWidget();\n                this.searchableElement = this.profileDataGridTree;\n                break;\n        }\n        const isFlame = this.viewType.get() === \"Flame\" /* ViewTypes.FLAME */;\n        this.focusButton.setVisible(!isFlame);\n        this.excludeButton.setVisible(!isFlame);\n        this.resetButton.setVisible(!isFlame);\n        if (this.visibleView) {\n            this.visibleView.show(this.searchableViewInternal.element);\n        }\n    }\n    nodeSelected(selected) {\n        this.focusButton.setEnabled(selected);\n        this.excludeButton.setEnabled(selected);\n    }\n    focusClicked() {\n        if (!this.dataGrid.selectedNode) {\n            return;\n        }\n        this.resetButton.setEnabled(true);\n        this.resetButton.element.focus();\n        if (this.profileDataGridTree) {\n            this.profileDataGridTree.focus(this.dataGrid.selectedNode);\n        }\n        this.refresh();\n        this.refreshVisibleData();\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.CpuProfileNodeFocused);\n    }\n    excludeClicked() {\n        const selectedNode = this.dataGrid.selectedNode;\n        if (!selectedNode) {\n            return;\n        }\n        this.resetButton.setEnabled(true);\n        this.resetButton.element.focus();\n        selectedNode.deselect();\n        if (this.profileDataGridTree) {\n            this.profileDataGridTree.exclude(selectedNode);\n        }\n        this.refresh();\n        this.refreshVisibleData();\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.CpuProfileNodeExcluded);\n    }\n    resetClicked() {\n        this.viewSelectComboBox.selectElement().focus();\n        this.resetButton.setEnabled(false);\n        if (this.profileDataGridTree) {\n            this.profileDataGridTree.restore();\n        }\n        this.linkifierInternal.reset();\n        this.refresh();\n        this.refreshVisibleData();\n    }\n    sortProfile() {\n        if (!this.profileDataGridTree) {\n            return;\n        }\n        const sortAscending = this.dataGrid.isSortOrderAscending();\n        const sortColumnId = this.dataGrid.sortColumnId();\n        const sortProperty = sortColumnId === 'function' ? 'functionName' : sortColumnId || '';\n        this.profileDataGridTree.sort(ProfileDataGridTree.propertyComparator(sortProperty, sortAscending), false);\n        this.refresh();\n    }\n}\nexport const maxLinkLength = 30;\nexport class WritableProfileHeader extends ProfileHeader {\n    debuggerModel;\n    fileName;\n    jsonifiedProfile;\n    profile;\n    protocolProfileInternal;\n    #profileReceivedPromise;\n    #profileReceivedFulfill = () => { };\n    constructor(debuggerModel, type, title) {\n        super(type, title || i18nString(UIStrings.profileD, { PH1: type.nextProfileUid() }));\n        this.debuggerModel = debuggerModel;\n        this.#profileReceivedPromise = new Promise(resolve => {\n            this.#profileReceivedFulfill = resolve;\n        });\n    }\n    onChunkTransferred(_reader) {\n        if (this.jsonifiedProfile) {\n            // TODO(l10n): Is the '%' at the end of this string correct? 4MB% looks wrong\n            this.updateStatus(i18nString(UIStrings.loadingD, { PH1: Platform.NumberUtilities.bytesToString(this.jsonifiedProfile.length) }));\n        }\n    }\n    onError(reader) {\n        const error = reader.error();\n        if (error) {\n            this.updateStatus(i18nString(UIStrings.fileSReadErrorS, { PH1: reader.fileName(), PH2: error.message }));\n        }\n    }\n    async write(text) {\n        this.jsonifiedProfile += text;\n    }\n    async close() {\n    }\n    dispose() {\n        this.removeTempFile();\n    }\n    createSidebarTreeElement(panel) {\n        return new ProfileSidebarTreeElement(panel, this, 'profile-sidebar-tree-item');\n    }\n    canSaveToFile() {\n        return !this.fromFile();\n    }\n    async saveToFile() {\n        await this.#profileReceivedPromise;\n        const fileOutputStream = new Bindings.FileUtils.FileOutputStream();\n        if (!this.fileName) {\n            const now = Platform.DateUtilities.toISO8601Compact(new Date());\n            const fileExtension = this.profileType().fileExtension();\n            this.fileName = `${this.profileType().typeName()}-${now}${fileExtension}`;\n        }\n        const accepted = await fileOutputStream.open(this.fileName);\n        if (!accepted || !this.tempFile) {\n            return;\n        }\n        const data = await this.tempFile.read();\n        if (data) {\n            await fileOutputStream.write(data);\n        }\n        void fileOutputStream.close();\n    }\n    async loadFromFile(file) {\n        this.updateStatus(i18nString(UIStrings.loading), true);\n        const fileReader = new Bindings.FileUtils.ChunkedFileReader(file, 10000000, this.onChunkTransferred.bind(this));\n        this.jsonifiedProfile = '';\n        const success = await fileReader.read(this);\n        if (!success) {\n            this.onError(fileReader);\n            return new Error(i18nString(UIStrings.failedToReadFile));\n        }\n        this.updateStatus(i18nString(UIStrings.parsing), true);\n        let error = null;\n        try {\n            this.profile = JSON.parse(this.jsonifiedProfile);\n            this.setProfile(this.profile);\n            this.updateStatus(i18nString(UIStrings.loaded), false);\n        }\n        catch (e) {\n            error = e;\n            this.profileType().removeProfile(this);\n        }\n        this.jsonifiedProfile = null;\n        if (this.profileType().profileBeingRecorded() === this) {\n            this.profileType().setProfileBeingRecorded(null);\n        }\n        return error;\n    }\n    setProtocolProfile(profile) {\n        this.setProfile(profile);\n        this.protocolProfileInternal = profile;\n        this.tempFile = new Bindings.TempFile.TempFile();\n        this.tempFile.write([JSON.stringify(profile)]);\n        this.#profileReceivedFulfill();\n    }\n}\n//# sourceMappingURL=ProfileView.js.map","// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport { HeapDetachedElementsDataGrid, HeapDetachedElementsDataGridNode } from './HeapDetachedElementsDataGrid.js';\nimport { ProfileType, } from './ProfileHeader.js';\nimport { WritableProfileHeader } from './ProfileView.js';\nconst UIStrings = {\n    /**\n     *@description Button text to obtain the detached elements retained by JS\n     */\n    startDetachedElements: 'Obtain detached elements',\n    /**\n     *@description The title for the collection of profiles that are gathered from various snapshots of the heap, using a sampling (e.g. every 1/100) technique.\n     */\n    detachedElementsTitle: 'Detached elements',\n    /**\n     *@description Description in Heap Profile View of a profiler tool\n     */\n    detachedElementsDescription: 'Detached elements shows objects that are retained by a JS reference.',\n    /**\n     *@description Name of a profile\n     *@example {2} PH1\n     */\n    detachedElementProfile: 'Detached elements {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapDetachedElementsView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class DetachedElementsProfileView extends UI.View.SimpleView {\n    selectedSizeText;\n    dataGrid;\n    profile;\n    parentDataDisplayDelegate;\n    constructor(dataDisplayDelegate, profile) {\n        super(i18nString(UIStrings.detachedElementsTitle));\n        this.element.classList.add('detached-elements-view');\n        this.profile = profile;\n        this.parentDataDisplayDelegate = dataDisplayDelegate;\n        this.selectedSizeText = new UI.Toolbar.ToolbarText();\n        this.dataGrid = new HeapDetachedElementsDataGrid();\n        this.populateElementsGrid(profile.detachedElements);\n        this.dataGrid.asWidget().show(this.element);\n    }\n    showProfile(profile) {\n        return this.parentDataDisplayDelegate.showProfile(profile);\n    }\n    showObject(objectId, perspectiveName) {\n        this.parentDataDisplayDelegate.showObject(objectId, perspectiveName);\n    }\n    async linkifyObject() {\n        return null;\n    }\n    populateElementsGrid(detachedElements) {\n        if (!detachedElements) {\n            return;\n        }\n        const heapProfilerModel = this.profile.heapProfilerModel();\n        const domModel = heapProfilerModel?.target().model(SDK.DOMModel.DOMModel);\n        if (!domModel) {\n            return;\n        }\n        for (const detachedElement of detachedElements) {\n            this.dataGrid.rootNode().appendChild(new HeapDetachedElementsDataGridNode(detachedElement, domModel));\n        }\n    }\n    async toolbarItems() {\n        return [...await super.toolbarItems(), this.selectedSizeText];\n    }\n}\nexport class DetachedElementsProfileType extends Common.ObjectWrapper.eventMixin(ProfileType) {\n    constructor(typeId, description) {\n        super(typeId || i18nString(UIStrings.detachedElementsTitle), description || i18nString(UIStrings.detachedElementsTitle));\n    }\n    profileBeingRecorded() {\n        return super.profileBeingRecorded();\n    }\n    get buttonTooltip() {\n        return i18nString(UIStrings.startDetachedElements);\n    }\n    buttonClicked() {\n        void this.getDetachedElements();\n        return false;\n    }\n    async getDetachedElements() {\n        if (this.profileBeingRecorded()) {\n            return;\n        }\n        const heapProfilerModel = UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel);\n        const target = heapProfilerModel?.target();\n        const domModel = target?.model(SDK.DOMModel.DOMModel);\n        if (!heapProfilerModel || !target || !domModel) {\n            return;\n        }\n        const data = await domModel.getDetachedDOMNodes();\n        const profile = new DetachedElementsProfileHeader(heapProfilerModel, this, data);\n        this.addProfile(profile);\n        this.dispatchEventToListeners(\"profile-complete\" /* ProfileTypeEvents.PROFILE_COMPLETE */, profile);\n    }\n    get treeItemTitle() {\n        return i18nString(UIStrings.detachedElementsTitle);\n    }\n    get description() {\n        return i18nString(UIStrings.detachedElementsDescription);\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    static TypeId = 'DetachedElements';\n}\nexport class DetachedElementsProfileHeader extends WritableProfileHeader {\n    heapProfilerModelInternal;\n    detachedElements;\n    constructor(heapProfilerModel, type, detachedElements, title) {\n        super(heapProfilerModel && heapProfilerModel.debuggerModel(), type, title || i18nString(UIStrings.detachedElementProfile, { PH1: type.nextProfileUid() }));\n        this.detachedElements = detachedElements;\n        this.heapProfilerModelInternal = heapProfilerModel;\n    }\n    createView(dataDisplayDelegate) {\n        return new DetachedElementsProfileView(dataDisplayDelegate, this);\n    }\n    heapProfilerModel() {\n        return this.heapProfilerModelInternal;\n    }\n    profileType() {\n        return super.profileType();\n    }\n}\n//# sourceMappingURL=HeapDetachedElementsView.js.map","// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nexport class HeapTimelineOverview extends Common.ObjectWrapper.eventMixin(UI.Widget.VBox) {\n    overviewCalculator;\n    overviewContainer;\n    overviewGrid;\n    overviewCanvas;\n    windowLeft;\n    windowRight;\n    yScale;\n    xScale;\n    profileSamples;\n    running;\n    updateOverviewCanvas;\n    updateGridTimerId;\n    updateTimerId;\n    windowWidth;\n    constructor() {\n        super();\n        this.element.id = 'heap-recording-view';\n        this.element.classList.add('heap-tracking-overview');\n        this.element.setAttribute('jslog', `${VisualLogging.section('heap-tracking-overview')}`);\n        this.overviewCalculator = new OverviewCalculator();\n        this.overviewContainer = this.element.createChild('div', 'heap-overview-container');\n        this.overviewGrid = new PerfUI.OverviewGrid.OverviewGrid('heap-recording', this.overviewCalculator);\n        this.overviewGrid.element.classList.add('fill');\n        this.overviewCanvas =\n            this.overviewContainer.createChild('canvas', 'heap-recording-overview-canvas');\n        this.overviewContainer.appendChild(this.overviewGrid.element);\n        this.overviewGrid.addEventListener(\"WindowChanged\" /* PerfUI.OverviewGrid.Events.WINDOW_CHANGED */, this.onWindowChanged, this);\n        this.windowLeft = 0.0;\n        this.windowRight = 1.0;\n        this.overviewGrid.setWindow(this.windowLeft, this.windowRight);\n        this.yScale = new SmoothScale();\n        this.xScale = new SmoothScale();\n        this.profileSamples = new Samples();\n    }\n    start() {\n        this.running = true;\n        const drawFrame = () => {\n            this.update();\n            if (this.running) {\n                this.element.window().requestAnimationFrame(drawFrame);\n            }\n        };\n        drawFrame();\n    }\n    stop() {\n        this.running = false;\n    }\n    setSamples(samples) {\n        this.profileSamples = samples;\n        if (!this.running) {\n            this.update();\n        }\n    }\n    drawOverviewCanvas(width, height) {\n        if (!this.profileSamples) {\n            return;\n        }\n        const profileSamples = this.profileSamples;\n        const sizes = profileSamples.sizes;\n        const topSizes = profileSamples.max;\n        const timestamps = profileSamples.timestamps;\n        const startTime = timestamps[0];\n        const scaleFactor = this.xScale.nextScale(width / profileSamples.totalTime);\n        let maxSize = 0;\n        function aggregateAndCall(sizes, callback) {\n            let size = 0;\n            let currentX = 0;\n            for (let i = 1; i < timestamps.length; ++i) {\n                const x = Math.floor((timestamps[i] - startTime) * scaleFactor);\n                if (x !== currentX) {\n                    if (size) {\n                        callback(currentX, size);\n                    }\n                    size = 0;\n                    currentX = x;\n                }\n                size += sizes[i];\n            }\n            callback(currentX, size);\n        }\n        function maxSizeCallback(x, size) {\n            maxSize = Math.max(maxSize, size);\n        }\n        aggregateAndCall(sizes, maxSizeCallback);\n        const yScaleFactor = this.yScale.nextScale(maxSize ? height / (maxSize * 1.1) : 0.0);\n        this.overviewCanvas.width = width * window.devicePixelRatio;\n        this.overviewCanvas.height = height * window.devicePixelRatio;\n        this.overviewCanvas.style.width = width + 'px';\n        this.overviewCanvas.style.height = height + 'px';\n        const maybeContext = this.overviewCanvas.getContext('2d');\n        if (!maybeContext) {\n            throw new Error('Failed to get canvas context');\n        }\n        const context = maybeContext;\n        context.scale(window.devicePixelRatio, window.devicePixelRatio);\n        if (this.running) {\n            context.beginPath();\n            context.lineWidth = 2;\n            context.strokeStyle = 'rgba(192, 192, 192, 0.6)';\n            const currentX = (Date.now() - startTime) * scaleFactor;\n            context.moveTo(currentX, height - 1);\n            context.lineTo(currentX, 0);\n            context.stroke();\n            context.closePath();\n        }\n        let gridY = 0;\n        let gridValue;\n        const gridLabelHeight = 14;\n        if (yScaleFactor) {\n            const maxGridValue = (height - gridLabelHeight) / yScaleFactor;\n            // The round value calculation is a bit tricky, because\n            // it has a form k*10^n*1024^m, where k=[1,5], n=[0..3], m is an integer,\n            // e.g. a round value 10KB is 10240 bytes.\n            gridValue = Math.pow(1024, Math.floor(Math.log(maxGridValue) / Math.log(1024)));\n            gridValue *= Math.pow(10, Math.floor(Math.log(maxGridValue / gridValue) / Math.LN10));\n            if (gridValue * 5 <= maxGridValue) {\n                gridValue *= 5;\n            }\n            gridY = Math.round(height - gridValue * yScaleFactor - 0.5) + 0.5;\n            context.beginPath();\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(0, 0, 0, 0.2)';\n            context.moveTo(0, gridY);\n            context.lineTo(width, gridY);\n            context.stroke();\n            context.closePath();\n        }\n        function drawBarCallback(x, size) {\n            context.moveTo(x, height - 1);\n            context.lineTo(x, Math.round(height - size * yScaleFactor - 1));\n        }\n        context.beginPath();\n        context.lineWidth = 2;\n        context.strokeStyle = 'rgba(192, 192, 192, 0.6)';\n        aggregateAndCall(topSizes, drawBarCallback);\n        context.stroke();\n        context.closePath();\n        context.beginPath();\n        context.lineWidth = 2;\n        context.strokeStyle = 'rgba(0, 0, 192, 0.8)';\n        aggregateAndCall(sizes, drawBarCallback);\n        context.stroke();\n        context.closePath();\n        if (gridValue) {\n            const label = Platform.NumberUtilities.bytesToString(gridValue);\n            const labelPadding = 4;\n            const labelX = 0;\n            const labelY = gridY - 0.5;\n            const labelWidth = 2 * labelPadding + context.measureText(label).width;\n            context.beginPath();\n            context.textBaseline = 'bottom';\n            context.font = '10px ' + window.getComputedStyle(this.element, null).getPropertyValue('font-family');\n            context.fillStyle = 'rgba(255, 255, 255, 0.75)';\n            context.fillRect(labelX, labelY - gridLabelHeight, labelWidth, gridLabelHeight);\n            context.fillStyle = 'rgb(64, 64, 64)';\n            context.fillText(label, labelX + labelPadding, labelY);\n            context.fill();\n            context.closePath();\n        }\n    }\n    onResize() {\n        this.updateOverviewCanvas = true;\n        this.scheduleUpdate();\n    }\n    onWindowChanged() {\n        if (!this.updateGridTimerId) {\n            this.updateGridTimerId = window.setTimeout(this.updateGrid.bind(this), 10);\n        }\n    }\n    scheduleUpdate() {\n        if (this.updateTimerId) {\n            return;\n        }\n        this.updateTimerId = window.setTimeout(this.update.bind(this), 10);\n    }\n    updateBoundaries() {\n        this.windowLeft = this.overviewGrid.windowLeft();\n        this.windowRight = this.overviewGrid.windowRight();\n        this.windowWidth = this.windowRight - this.windowLeft;\n    }\n    update() {\n        this.updateTimerId = null;\n        if (!this.isShowing()) {\n            return;\n        }\n        this.updateBoundaries();\n        this.overviewCalculator.updateBoundaries(this);\n        this.overviewGrid.updateDividers(this.overviewCalculator);\n        this.drawOverviewCanvas(this.overviewContainer.clientWidth, this.overviewContainer.clientHeight - 20);\n    }\n    updateGrid() {\n        this.updateGridTimerId = 0;\n        this.updateBoundaries();\n        const ids = this.profileSamples.ids;\n        if (!ids.length) {\n            return;\n        }\n        const timestamps = this.profileSamples.timestamps;\n        const sizes = this.profileSamples.sizes;\n        const startTime = timestamps[0];\n        const totalTime = this.profileSamples.totalTime;\n        const timeLeft = startTime + totalTime * this.windowLeft;\n        const timeRight = startTime + totalTime * this.windowRight;\n        const minIndex = Platform.ArrayUtilities.lowerBound(timestamps, timeLeft, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n        const maxIndex = Platform.ArrayUtilities.upperBound(timestamps, timeRight, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n        let size = 0;\n        for (let i = minIndex; i < maxIndex; ++i) {\n            size += sizes[i];\n        }\n        const minId = minIndex > 0 ? ids[minIndex - 1] : 0;\n        const maxId = maxIndex < ids.length ? ids[maxIndex] : Infinity;\n        this.dispatchEventToListeners(\"IdsRangeChanged\" /* Events.IDS_RANGE_CHANGED */, { minId, maxId, size });\n    }\n}\nexport class SmoothScale {\n    lastUpdate;\n    currentScale;\n    constructor() {\n        this.lastUpdate = 0;\n        this.currentScale = 0.0;\n    }\n    nextScale(target) {\n        target = target || this.currentScale;\n        if (this.currentScale) {\n            const now = Date.now();\n            const timeDeltaMs = now - this.lastUpdate;\n            this.lastUpdate = now;\n            const maxChangePerSec = 20;\n            const maxChangePerDelta = Math.pow(maxChangePerSec, timeDeltaMs / 1000);\n            const scaleChange = target / this.currentScale;\n            this.currentScale *= Platform.NumberUtilities.clamp(scaleChange, 1 / maxChangePerDelta, maxChangePerDelta);\n        }\n        else {\n            this.currentScale = target;\n        }\n        return this.currentScale;\n    }\n}\nexport class Samples {\n    sizes;\n    ids;\n    timestamps;\n    max;\n    totalTime;\n    constructor() {\n        this.sizes = [];\n        this.ids = [];\n        this.timestamps = [];\n        this.max = [];\n        this.totalTime = 30000;\n    }\n}\nexport class OverviewCalculator {\n    maximumBoundaries;\n    minimumBoundaries;\n    xScaleFactor;\n    constructor() {\n        this.maximumBoundaries = 0;\n        this.minimumBoundaries = 0;\n        this.xScaleFactor = 0;\n    }\n    updateBoundaries(chart) {\n        this.minimumBoundaries = 0;\n        this.maximumBoundaries = chart.profileSamples.totalTime;\n        this.xScaleFactor = chart.overviewContainer.clientWidth / this.maximumBoundaries;\n    }\n    computePosition(time) {\n        return (time - this.minimumBoundaries) * this.xScaleFactor;\n    }\n    formatValue(value, precision) {\n        return i18n.TimeUtilities.secondsToString(value / 1000, Boolean(precision));\n    }\n    maximumBoundary() {\n        return this.maximumBoundaries;\n    }\n    minimumBoundary() {\n        return this.minimumBoundaries;\n    }\n    zeroTime() {\n        return this.minimumBoundaries;\n    }\n    boundarySpan() {\n        return this.maximumBoundaries - this.minimumBoundaries;\n    }\n}\n//# sourceMappingURL=HeapTimelineOverview.js.map","// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as CPUProfile from '../../models/cpu_profile/cpu_profile.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport { HeapTimelineOverview } from './HeapTimelineOverview.js';\nimport { ProfileFlameChartDataProvider } from './ProfileFlameChartDataProvider.js';\nimport { ProfileType } from './ProfileHeader.js';\nimport { ProfileView, WritableProfileHeader } from './ProfileView.js';\nconst UIStrings = {\n    /**\n     *@description The reported total size used in the selected time frame of the allocation sampling profile\n     *@example {3 MB} PH1\n     */\n    selectedSizeS: 'Selected size: {PH1}',\n    /**\n     *@description Name of column header that reports the size (in terms of bytes) used for a particular part of the heap, excluding the size of the children nodes of this part of the heap\n     */\n    selfSizeBytes: 'Self size (bytes)',\n    /**\n     *@description Name of column header that reports the total size (in terms of bytes) used for a particular part of the heap\n     */\n    totalSizeBytes: 'Total size (bytes)',\n    /**\n     *@description Button text to stop profiling the heap\n     */\n    stopHeapProfiling: 'Stop heap profiling',\n    /**\n     *@description Button text to start profiling the heap\n     */\n    startHeapProfiling: 'Start heap profiling',\n    /**\n     *@description Progress update that the profiler is recording the contents of the heap\n     */\n    recording: 'Recording…',\n    /**\n     *@description Icon title in Heap Profile View of a profiler tool\n     */\n    heapProfilerIsRecording: 'Heap profiler is recording',\n    /**\n     *@description Progress update that the profiler is in the process of stopping its recording of the heap\n     */\n    stopping: 'Stopping…',\n    /**\n     *@description Sampling category to only profile allocations happening on the heap\n     */\n    allocationSampling: 'Allocation sampling',\n    /**\n     *@description The title for the collection of profiles that are gathered from various snapshots of the heap, using a sampling (e.g. every 1/100) technique.\n     */\n    samplingProfiles: 'Sampling profiles',\n    /**\n     *@description Description in Heap Profile View of a profiler tool\n     */\n    recordMemoryAllocations: 'Approximate memory allocations by sampling long operations with minimal overhead and get a breakdown by JavaScript execution stack',\n    /**\n     *@description Name of a profile\n     *@example {2} PH1\n     */\n    profileD: 'Profile {PH1}',\n    /**\n     *@description Accessible text for the value in bytes in memory allocation or coverage view.\n     *@example {12345} PH1\n     */\n    sBytes: '{PH1} bytes',\n    /**\n     *@description Text in CPUProfile View of a profiler tool\n     *@example {21.33} PH1\n     */\n    formatPercent: '{PH1} %',\n    /**\n     *@description The formatted size in kilobytes, abbreviated to kB\n     *@example {1,021} PH1\n     */\n    skb: '{PH1} kB',\n    /**\n     *@description Text for the name of something\n     */\n    name: 'Name',\n    /**\n     *@description Tooltip of a cell that reports the size used for a particular part of the heap, excluding the size of the children nodes of this part of the heap\n     */\n    selfSize: 'Self size',\n    /**\n     *@description Tooltip of a cell that reports the total size used for a particular part of the heap\n     */\n    totalSize: 'Total size',\n    /**\n     *@description Text for web URLs\n     */\n    url: 'URL',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapProfileView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nfunction convertToSamplingHeapProfile(profileHeader) {\n    return (profileHeader.profile || profileHeader.protocolProfile());\n}\nexport class HeapProfileView extends ProfileView {\n    profileHeader;\n    profileType;\n    adjustedTotal;\n    selectedSizeText;\n    timestamps;\n    sizes;\n    max;\n    ordinals;\n    totalTime;\n    lastOrdinal;\n    timelineOverview;\n    constructor(profileHeader) {\n        super();\n        this.profileHeader = profileHeader;\n        this.profileType = profileHeader.profileType();\n        this.initialize(new NodeFormatter(this));\n        const profile = new SamplingHeapProfileModel(convertToSamplingHeapProfile(profileHeader));\n        this.adjustedTotal = profile.total;\n        this.setProfile(profile);\n        this.selectedSizeText = new UI.Toolbar.ToolbarText();\n        this.timestamps = [];\n        this.sizes = [];\n        this.max = [];\n        this.ordinals = [];\n        this.totalTime = 0;\n        this.lastOrdinal = 0;\n        this.timelineOverview = new HeapTimelineOverview();\n        if (Root.Runtime.experiments.isEnabled('sampling-heap-profiler-timeline')) {\n            this.timelineOverview.addEventListener(\"IdsRangeChanged\" /* Events.IDS_RANGE_CHANGED */, this.onIdsRangeChanged.bind(this));\n            this.timelineOverview.show(this.element, this.element.firstChild);\n            this.timelineOverview.start();\n            this.profileType.addEventListener(\"StatsUpdate\" /* SamplingHeapProfileType.Events.STATS_UPDATE */, this.onStatsUpdate, this);\n            void this.profileType.once(\"profile-complete\" /* ProfileEvents.PROFILE_COMPLETE */).then(() => {\n                this.profileType.removeEventListener(\"StatsUpdate\" /* SamplingHeapProfileType.Events.STATS_UPDATE */, this.onStatsUpdate, this);\n                this.timelineOverview.stop();\n                this.timelineOverview.updateGrid();\n            });\n        }\n    }\n    async toolbarItems() {\n        return [...await super.toolbarItems(), this.selectedSizeText];\n    }\n    onIdsRangeChanged(event) {\n        const { minId, maxId } = event.data;\n        this.selectedSizeText.setText(i18nString(UIStrings.selectedSizeS, { PH1: Platform.NumberUtilities.bytesToString(event.data.size) }));\n        this.setSelectionRange(minId, maxId);\n    }\n    setSelectionRange(minId, maxId) {\n        const profileData = convertToSamplingHeapProfile(this.profileHeader);\n        const profile = new SamplingHeapProfileModel(profileData, minId, maxId);\n        this.adjustedTotal = profile.total;\n        this.setProfile(profile);\n    }\n    onStatsUpdate(event) {\n        const profile = event.data;\n        if (!this.totalTime) {\n            this.timestamps = [];\n            this.sizes = [];\n            this.max = [];\n            this.ordinals = [];\n            this.totalTime = 30000;\n            this.lastOrdinal = 0;\n        }\n        this.sizes.fill(0);\n        this.sizes.push(0);\n        this.timestamps.push(Date.now());\n        this.ordinals.push(this.lastOrdinal + 1);\n        for (const sample of profile?.samples ?? []) {\n            this.lastOrdinal = Math.max(this.lastOrdinal, sample.ordinal);\n            const bucket = Platform.ArrayUtilities.upperBound(this.ordinals, sample.ordinal, Platform.ArrayUtilities.DEFAULT_COMPARATOR) -\n                1;\n            this.sizes[bucket] += sample.size;\n        }\n        this.max.push(this.sizes[this.sizes.length - 1]);\n        const lastTimestamp = this.timestamps[this.timestamps.length - 1];\n        if (lastTimestamp - this.timestamps[0] > this.totalTime) {\n            this.totalTime *= 2;\n        }\n        const samples = {\n            sizes: this.sizes,\n            max: this.max,\n            ids: this.ordinals,\n            timestamps: this.timestamps,\n            totalTime: this.totalTime,\n        };\n        this.timelineOverview.setSamples(samples);\n    }\n    columnHeader(columnId) {\n        switch (columnId) {\n            case 'self':\n                return i18nString(UIStrings.selfSizeBytes);\n            case 'total':\n                return i18nString(UIStrings.totalSizeBytes);\n        }\n        return Common.UIString.LocalizedEmptyString;\n    }\n    createFlameChartDataProvider() {\n        return new HeapFlameChartDataProvider(this.profile(), this.profileHeader.heapProfilerModel());\n    }\n}\nexport class SamplingHeapProfileTypeBase extends Common.ObjectWrapper.eventMixin(ProfileType) {\n    recording;\n    clearedDuringRecording;\n    constructor(typeId, description) {\n        super(typeId, description);\n        this.recording = false;\n        this.clearedDuringRecording = false;\n    }\n    profileBeingRecorded() {\n        return super.profileBeingRecorded();\n    }\n    typeName() {\n        return 'Heap';\n    }\n    fileExtension() {\n        return '.heapprofile';\n    }\n    get buttonTooltip() {\n        return this.recording ? i18nString(UIStrings.stopHeapProfiling) : i18nString(UIStrings.startHeapProfiling);\n    }\n    buttonClicked() {\n        if (this.recording) {\n            void this.stopRecordingProfile();\n        }\n        else {\n            this.startRecordingProfile();\n        }\n        return this.recording;\n    }\n    startRecordingProfile() {\n        const heapProfilerModel = UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel);\n        if (this.profileBeingRecorded() || !heapProfilerModel) {\n            return;\n        }\n        const profileHeader = new SamplingHeapProfileHeader(heapProfilerModel, this);\n        this.setProfileBeingRecorded(profileHeader);\n        this.addProfile(profileHeader);\n        profileHeader.updateStatus(i18nString(UIStrings.recording));\n        const warnings = [i18nString(UIStrings.heapProfilerIsRecording)];\n        UI.InspectorView.InspectorView.instance().setPanelWarnings('heap-profiler', warnings);\n        this.recording = true;\n        this.startSampling();\n    }\n    async stopRecordingProfile() {\n        this.recording = false;\n        const recordedProfile = this.profileBeingRecorded();\n        if (!recordedProfile || !recordedProfile.heapProfilerModel()) {\n            return;\n        }\n        recordedProfile.updateStatus(i18nString(UIStrings.stopping));\n        const profile = await this.stopSampling();\n        if (recordedProfile) {\n            console.assert(profile !== undefined);\n            // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            recordedProfile.setProtocolProfile(profile);\n            recordedProfile.updateStatus('');\n            this.setProfileBeingRecorded(null);\n        }\n        UI.InspectorView.InspectorView.instance().setPanelWarnings('heap-profiler', []);\n        // If the data was cleared during the middle of the recording we no\n        // longer treat the profile as being completed. This means we avoid\n        // a change of view to the profile list.\n        const wasClearedDuringRecording = this.clearedDuringRecording;\n        this.clearedDuringRecording = false;\n        if (wasClearedDuringRecording) {\n            return;\n        }\n        this.dispatchEventToListeners(\"profile-complete\" /* ProfileEvents.PROFILE_COMPLETE */, recordedProfile);\n    }\n    createProfileLoadedFromFile(title) {\n        return new SamplingHeapProfileHeader(null, this, title);\n    }\n    profileBeingRecordedRemoved() {\n        this.clearedDuringRecording = true;\n        void this.stopRecordingProfile();\n    }\n    startSampling() {\n        throw 'Not implemented';\n    }\n    stopSampling() {\n        throw 'Not implemented';\n    }\n}\nlet samplingHeapProfileTypeInstance;\nexport class SamplingHeapProfileType extends SamplingHeapProfileTypeBase {\n    updateTimer;\n    updateIntervalMs;\n    constructor() {\n        super(SamplingHeapProfileType.TypeId, i18nString(UIStrings.allocationSampling));\n        if (!samplingHeapProfileTypeInstance) {\n            samplingHeapProfileTypeInstance = this;\n        }\n        this.updateTimer = 0;\n        this.updateIntervalMs = 200;\n    }\n    static get instance() {\n        return samplingHeapProfileTypeInstance;\n    }\n    get treeItemTitle() {\n        return i18nString(UIStrings.samplingProfiles);\n    }\n    get description() {\n        // TODO(l10n): Do not concatenate localized strings.\n        const formattedDescription = [i18nString(UIStrings.recordMemoryAllocations)];\n        return formattedDescription.join('\\n');\n    }\n    hasTemporaryView() {\n        return Root.Runtime.experiments.isEnabled('sampling-heap-profiler-timeline');\n    }\n    startSampling() {\n        const heapProfilerModel = this.obtainRecordingProfile();\n        if (!heapProfilerModel) {\n            return;\n        }\n        void heapProfilerModel.startSampling();\n        if (Root.Runtime.experiments.isEnabled('sampling-heap-profiler-timeline')) {\n            this.updateTimer = window.setTimeout(() => {\n                void this.updateStats();\n            }, this.updateIntervalMs);\n        }\n    }\n    obtainRecordingProfile() {\n        const recordingProfile = this.profileBeingRecorded();\n        if (recordingProfile) {\n            const heapProfilerModel = recordingProfile.heapProfilerModel();\n            return heapProfilerModel;\n        }\n        return null;\n    }\n    async stopSampling() {\n        window.clearTimeout(this.updateTimer);\n        this.updateTimer = 0;\n        this.dispatchEventToListeners(\"RecordingStopped\" /* SamplingHeapProfileType.Events.RECORDING_STOPPED */);\n        const heapProfilerModel = this.obtainRecordingProfile();\n        if (!heapProfilerModel) {\n            throw new Error('No heap profiler model');\n        }\n        const samplingProfile = await heapProfilerModel.stopSampling();\n        if (!samplingProfile) {\n            throw new Error('No sampling profile found');\n        }\n        return samplingProfile;\n    }\n    async updateStats() {\n        const heapProfilerModel = this.obtainRecordingProfile();\n        if (!heapProfilerModel) {\n            return;\n        }\n        const profile = await heapProfilerModel.getSamplingProfile();\n        if (!this.updateTimer) {\n            return;\n        }\n        this.dispatchEventToListeners(\"StatsUpdate\" /* SamplingHeapProfileType.Events.STATS_UPDATE */, profile);\n        this.updateTimer = window.setTimeout(() => {\n            void this.updateStats();\n        }, this.updateIntervalMs);\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    static TypeId = 'SamplingHeap';\n}\nexport class SamplingHeapProfileHeader extends WritableProfileHeader {\n    heapProfilerModelInternal;\n    protocolProfileInternal;\n    constructor(heapProfilerModel, type, title) {\n        super(heapProfilerModel && heapProfilerModel.debuggerModel(), type, title || i18nString(UIStrings.profileD, { PH1: type.nextProfileUid() }));\n        this.heapProfilerModelInternal = heapProfilerModel;\n        this.protocolProfileInternal = {\n            head: {\n                callFrame: {\n                    functionName: '',\n                    scriptId: '',\n                    url: '',\n                    lineNumber: 0,\n                    columnNumber: 0,\n                },\n                children: [],\n                selfSize: 0,\n                id: 0,\n            },\n            samples: [],\n            startTime: 0,\n            endTime: 0,\n            nodes: [],\n        };\n    }\n    createView() {\n        return new HeapProfileView(this);\n    }\n    protocolProfile() {\n        return this.protocolProfileInternal;\n    }\n    heapProfilerModel() {\n        return this.heapProfilerModelInternal;\n    }\n    profileType() {\n        return super.profileType();\n    }\n}\nexport class SamplingHeapProfileNode extends CPUProfile.ProfileTreeModel.ProfileNode {\n    self;\n    constructor(node) {\n        const callFrame = node.callFrame || {\n            // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n            // @ts-expect-error\n            functionName: node['functionName'],\n            // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n            // @ts-expect-error\n            scriptId: node['scriptId'],\n            // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n            // @ts-expect-error\n            url: node['url'],\n            // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n            // @ts-expect-error\n            lineNumber: node['lineNumber'] - 1,\n            // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n            // @ts-expect-error\n            columnNumber: node['columnNumber'] - 1,\n        };\n        super(callFrame);\n        this.self = node.selfSize;\n    }\n}\nexport class SamplingHeapProfileModel extends CPUProfile.ProfileTreeModel.ProfileTreeModel {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    modules;\n    constructor(profile, minOrdinal, maxOrdinal) {\n        super();\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.modules = profile.modules || [];\n        let nodeIdToSizeMap = null;\n        if (minOrdinal || maxOrdinal) {\n            nodeIdToSizeMap = new Map();\n            minOrdinal = minOrdinal || 0;\n            maxOrdinal = maxOrdinal || Infinity;\n            for (const sample of profile.samples) {\n                if (sample.ordinal < minOrdinal || sample.ordinal > maxOrdinal) {\n                    continue;\n                }\n                const size = nodeIdToSizeMap.get(sample.nodeId) || 0;\n                nodeIdToSizeMap.set(sample.nodeId, size + sample.size);\n            }\n        }\n        this.initialize(translateProfileTree(profile.head));\n        function translateProfileTree(root) {\n            const resultRoot = new SamplingHeapProfileNode(root);\n            const sourceNodeStack = [root];\n            const targetNodeStack = [resultRoot];\n            while (sourceNodeStack.length) {\n                const sourceNode = sourceNodeStack.pop();\n                const targetNode = targetNodeStack.pop();\n                targetNode.children = sourceNode.children.map(child => {\n                    const targetChild = new SamplingHeapProfileNode(child);\n                    if (nodeIdToSizeMap) {\n                        targetChild.self = nodeIdToSizeMap.get(child.id) || 0;\n                    }\n                    return targetChild;\n                });\n                sourceNodeStack.push(...sourceNode.children);\n                targetNodeStack.push(...targetNode.children);\n            }\n            pruneEmptyBranches(resultRoot);\n            return resultRoot;\n        }\n        function pruneEmptyBranches(node) {\n            node.children = node.children.filter(pruneEmptyBranches);\n            return Boolean(node.children.length || node.self);\n        }\n    }\n}\nexport class NodeFormatter {\n    profileView;\n    constructor(profileView) {\n        this.profileView = profileView;\n    }\n    formatValue(value) {\n        return Platform.NumberUtilities.withThousandsSeparator(value);\n    }\n    formatValueAccessibleText(value) {\n        return i18nString(UIStrings.sBytes, { PH1: value });\n    }\n    formatPercent(value, _node) {\n        return i18nString(UIStrings.formatPercent, { PH1: value.toFixed(2) });\n    }\n    linkifyNode(node) {\n        const heapProfilerModel = this.profileView.profileHeader.heapProfilerModel();\n        const target = heapProfilerModel ? heapProfilerModel.target() : null;\n        const options = {\n            className: 'profile-node-file',\n            inlineFrameIndex: 0,\n        };\n        return this.profileView.linkifier().maybeLinkifyConsoleCallFrame(target, node.profileNode.callFrame, options);\n    }\n}\nexport class HeapFlameChartDataProvider extends ProfileFlameChartDataProvider {\n    profile;\n    heapProfilerModel;\n    constructor(profile, heapProfilerModel) {\n        super();\n        this.profile = profile;\n        this.heapProfilerModel = heapProfilerModel;\n    }\n    minimumBoundary() {\n        return 0;\n    }\n    totalTime() {\n        return this.profile.root.total;\n    }\n    entryHasDeoptReason(_entryIndex) {\n        return false;\n    }\n    formatValue(value, _precision) {\n        return i18nString(UIStrings.skb, { PH1: Platform.NumberUtilities.withThousandsSeparator(value / 1e3) });\n    }\n    calculateTimelineData() {\n        function nodesCount(node) {\n            return node.children.reduce((count, node) => count + nodesCount(node), 1);\n        }\n        const count = nodesCount(this.profile.root);\n        const entryNodes = new Array(count);\n        const entryLevels = new Uint16Array(count);\n        const entryTotalTimes = new Float32Array(count);\n        const entryStartTimes = new Float64Array(count);\n        let depth = 0;\n        let maxDepth = 0;\n        let position = 0;\n        let index = 0;\n        function addNode(node) {\n            const start = position;\n            entryNodes[index] = node;\n            entryLevels[index] = depth;\n            entryTotalTimes[index] = node.total;\n            entryStartTimes[index] = position;\n            ++index;\n            ++depth;\n            node.children.forEach(addNode);\n            --depth;\n            maxDepth = Math.max(maxDepth, depth);\n            position = start + node.total;\n        }\n        addNode(this.profile.root);\n        this.maxStackDepthInternal = maxDepth + 1;\n        this.entryNodes = entryNodes;\n        this.timelineDataInternal =\n            PerfUI.FlameChart.FlameChartTimelineData.create({ entryLevels, entryTotalTimes, entryStartTimes, groups: null });\n        return this.timelineDataInternal;\n    }\n    prepareHighlightedEntryInfo(entryIndex) {\n        const node = this.entryNodes[entryIndex];\n        if (!node) {\n            return null;\n        }\n        const entryInfo = [];\n        function pushEntryInfoRow(title, value) {\n            entryInfo.push({ title, value });\n        }\n        pushEntryInfoRow(i18nString(UIStrings.name), UI.UIUtils.beautifyFunctionName(node.functionName));\n        pushEntryInfoRow(i18nString(UIStrings.selfSize), Platform.NumberUtilities.bytesToString(node.self));\n        pushEntryInfoRow(i18nString(UIStrings.totalSize), Platform.NumberUtilities.bytesToString(node.total));\n        const linkifier = new Components.Linkifier.Linkifier();\n        const link = linkifier.maybeLinkifyConsoleCallFrame(this.heapProfilerModel ? this.heapProfilerModel.target() : null, node.callFrame);\n        if (link) {\n            pushEntryInfoRow(i18nString(UIStrings.url), link.textContent);\n        }\n        linkifier.dispose();\n        return ProfileView.buildPopoverTable(entryInfo);\n    }\n}\n//# sourceMappingURL=HeapProfileView.js.map","/*\n * Copyright (C) 2014 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nexport const HeapSnapshotProgressEvent = {\n    Update: 'ProgressUpdate',\n    BrokenSnapshot: 'BrokenSnapshot',\n};\nexport const baseSystemDistance = 100000000;\nexport const baseUnreachableDistance = baseSystemDistance * 2;\nexport class AllocationNodeCallers {\n    nodesWithSingleCaller;\n    branchingCallers;\n    constructor(nodesWithSingleCaller, branchingCallers) {\n        this.nodesWithSingleCaller = nodesWithSingleCaller;\n        this.branchingCallers = branchingCallers;\n    }\n}\nexport class SerializedAllocationNode {\n    id;\n    name;\n    scriptName;\n    scriptId;\n    line;\n    column;\n    count;\n    size;\n    liveCount;\n    liveSize;\n    hasChildren;\n    constructor(nodeId, functionName, scriptName, scriptId, line, column, count, size, liveCount, liveSize, hasChildren) {\n        this.id = nodeId;\n        this.name = functionName;\n        this.scriptName = scriptName;\n        this.scriptId = scriptId;\n        this.line = line;\n        this.column = column;\n        this.count = count;\n        this.size = size;\n        this.liveCount = liveCount;\n        this.liveSize = liveSize;\n        this.hasChildren = hasChildren;\n    }\n}\nexport class AllocationStackFrame {\n    functionName;\n    scriptName;\n    scriptId;\n    line;\n    column;\n    constructor(functionName, scriptName, scriptId, line, column) {\n        this.functionName = functionName;\n        this.scriptName = scriptName;\n        this.scriptId = scriptId;\n        this.line = line;\n        this.column = column;\n    }\n}\nexport class Node {\n    id;\n    name;\n    distance;\n    nodeIndex;\n    retainedSize;\n    selfSize;\n    type;\n    canBeQueried;\n    detachedDOMTreeNode;\n    isAddedNotRemoved;\n    ignored;\n    constructor(id, name, distance, nodeIndex, retainedSize, selfSize, type) {\n        this.id = id;\n        this.name = name;\n        this.distance = distance;\n        this.nodeIndex = nodeIndex;\n        this.retainedSize = retainedSize;\n        this.selfSize = selfSize;\n        this.type = type;\n        this.canBeQueried = false;\n        this.detachedDOMTreeNode = false;\n        this.isAddedNotRemoved = null;\n        this.ignored = false;\n    }\n}\nexport class Edge {\n    name;\n    node;\n    type;\n    edgeIndex;\n    isAddedNotRemoved;\n    constructor(name, node, type, edgeIndex) {\n        this.name = name;\n        this.node = node;\n        this.type = type;\n        this.edgeIndex = edgeIndex;\n        this.isAddedNotRemoved = null;\n    }\n}\nexport class Aggregate {\n    count;\n    distance;\n    self;\n    maxRet;\n    type;\n    name;\n    idxs;\n    constructor() {\n    }\n}\nexport class AggregateForDiff {\n    indexes;\n    ids;\n    selfSizes;\n    constructor() {\n        this.indexes = [];\n        this.ids = [];\n        this.selfSizes = [];\n    }\n}\nexport class Diff {\n    addedCount;\n    removedCount;\n    addedSize;\n    removedSize;\n    deletedIndexes;\n    addedIndexes;\n    countDelta;\n    sizeDelta;\n    constructor() {\n        this.addedCount = 0;\n        this.removedCount = 0;\n        this.addedSize = 0;\n        this.removedSize = 0;\n        this.deletedIndexes = [];\n        this.addedIndexes = [];\n    }\n}\nexport class DiffForClass {\n    addedCount;\n    removedCount;\n    addedSize;\n    removedSize;\n    deletedIndexes;\n    addedIndexes;\n    countDelta;\n    sizeDelta;\n    constructor() {\n    }\n}\nexport class ComparatorConfig {\n    fieldName1;\n    ascending1;\n    fieldName2;\n    ascending2;\n    constructor(fieldName1, ascending1, fieldName2, ascending2) {\n        this.fieldName1 = fieldName1;\n        this.ascending1 = ascending1;\n        this.fieldName2 = fieldName2;\n        this.ascending2 = ascending2;\n    }\n}\nexport class WorkerCommand {\n    callId;\n    disposition;\n    objectId;\n    newObjectId;\n    methodName;\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    methodArguments;\n    source;\n    constructor() {\n    }\n}\nexport class ItemsRange {\n    startPosition;\n    endPosition;\n    totalLength;\n    items;\n    constructor(startPosition, endPosition, totalLength, items) {\n        this.startPosition = startPosition;\n        this.endPosition = endPosition;\n        this.totalLength = totalLength;\n        this.items = items;\n    }\n}\nexport class StaticData {\n    nodeCount;\n    rootNodeIndex;\n    totalSize;\n    maxJSObjectId;\n    constructor(nodeCount, rootNodeIndex, totalSize, maxJSObjectId) {\n        this.nodeCount = nodeCount;\n        this.rootNodeIndex = rootNodeIndex;\n        this.totalSize = totalSize;\n        this.maxJSObjectId = maxJSObjectId;\n    }\n}\nexport class Statistics {\n    total;\n    v8heap;\n    native;\n    code;\n    jsArrays;\n    strings;\n    system;\n    constructor() {\n    }\n}\nexport class NodeFilter {\n    minNodeId;\n    maxNodeId;\n    allocationNodeId;\n    filterName;\n    constructor(minNodeId, maxNodeId) {\n        this.minNodeId = minNodeId;\n        this.maxNodeId = maxNodeId;\n    }\n    equals(o) {\n        return this.minNodeId === o.minNodeId && this.maxNodeId === o.maxNodeId &&\n            this.allocationNodeId === o.allocationNodeId && this.filterName === o.filterName;\n    }\n}\nexport class SearchConfig {\n    query;\n    caseSensitive;\n    isRegex;\n    shouldJump;\n    jumpBackward;\n    constructor(query, caseSensitive, isRegex, shouldJump, jumpBackward) {\n        this.query = query;\n        this.caseSensitive = caseSensitive;\n        this.isRegex = isRegex;\n        this.shouldJump = shouldJump;\n        this.jumpBackward = jumpBackward;\n    }\n    toSearchRegex(_global) {\n        throw new Error('Unsupported operation on search config');\n    }\n}\nexport class Samples {\n    timestamps;\n    lastAssignedIds;\n    sizes;\n    constructor(timestamps, lastAssignedIds, sizes) {\n        this.timestamps = timestamps;\n        this.lastAssignedIds = lastAssignedIds;\n        this.sizes = sizes;\n    }\n}\nexport class Location {\n    scriptId;\n    lineNumber;\n    columnNumber;\n    constructor(scriptId, lineNumber, columnNumber) {\n        this.scriptId = scriptId;\n        this.lineNumber = lineNumber;\n        this.columnNumber = columnNumber;\n    }\n}\n//# sourceMappingURL=HeapSnapshotModel.js.map","/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as HeapSnapshotModel from '../../models/heap_snapshot_model/heap_snapshot_model.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport { HeapSnapshotSortableDataGridEvents, } from './HeapSnapshotDataGrids.js';\nconst UIStrings = {\n    /**\n     *@description Generic text with two placeholders separated by a comma\n     *@example {1 613 680} PH1\n     *@example {44 %} PH2\n     */\n    genericStringsTwoPlaceholders: '{PH1}, {PH2}',\n    /**\n     *@description Text in Heap Snapshot Grid Nodes of a profiler tool\n     */\n    internalArray: '(internal array)[]',\n    /**\n     *@description Text in Heap Snapshot Grid Nodes of a profiler tool\n     */\n    userObjectReachableFromWindow: 'User object reachable from window',\n    /**\n     *@description Text in Heap Snapshot Grid Nodes of a profiler tool\n     */\n    detachedFromDomTree: 'Detached from DOM tree',\n    /**\n     *@description Text in Heap Snapshot Grid Nodes of a profiler tool\n     */\n    previewIsNotAvailable: 'Preview is not available',\n    /**\n     *@description A context menu item in the Heap Profiler Panel of a profiler tool\n     */\n    revealInSummaryView: 'Reveal in Summary view',\n    /**\n     *@description Text for the summary view\n     */\n    summary: 'Summary',\n    /**\n     *@description A context menu item in the Heap Profiler Panel of a profiler tool\n     *@example {SomeClassConstructor} PH1\n     *@example {12345} PH2\n     */\n    revealObjectSWithIdSInSummary: 'Reveal object \\'\\'{PH1}\\'\\' with id @{PH2} in Summary view',\n    /**\n     *@description Text to store an HTML element or JavaScript variable or expression result as a global variable\n     */\n    storeAsGlobalVariable: 'Store as global variable',\n    /**\n     *@description Text to ignore an object shown in the Retainers pane\n     */\n    ignoreThisRetainer: 'Ignore this retainer',\n    /**\n     *@description Text to undo the \"Ignore this retainer\" action\n     */\n    stopIgnoringThisRetainer: 'Stop ignoring this retainer',\n    /**\n     *@description Text indicating that a node has been ignored with the \"Ignore this retainer\" action\n     */\n    ignored: 'ignored',\n    /**\n     *@description Text in Heap Snapshot Grid Nodes of a profiler tool that indicates an element contained in another\n     * element.\n     */\n    inElement: 'in',\n    /**\n     *@description A short summary of the text at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#compiled-code\n     */\n    compiledCodeSummary: 'Internal data which V8 uses to run functions defined by JavaScript or WebAssembly.',\n    /**\n     *@description A short summary of the text at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#concatenated-string\n     */\n    concatenatedStringSummary: 'A string which represents the contents of two other strings joined together.',\n    /**\n     *@description A short summary of the text at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#system-context\n     */\n    contextSummary: 'An internal object containing variables from a JavaScript scope which may be needed by a function created within that scope.',\n    /**\n     *@description A short description of the data type internal type DescriptorArray, which is described more fully at https://v8.dev/blog/fast-properties\n     */\n    descriptorArraySummary: 'A list of the property names used by a JavaScript Object.',\n    /**\n     *@description A short summary of the text at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#array\n     */\n    internalArraySummary: 'An internal array-like data structure (not a JavaScript Array).',\n    /**\n     *@description A short summary of the text at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#internal-node\n     */\n    internalNodeSummary: 'An object allocated by a component other than V8, such as C++ objects defined by Blink.',\n    /**\n     *@description A short description of the data type \"system / Map\" described at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#object-shape\n     */\n    mapSummary: 'An internal object representing the shape of a JavaScript Object (not a JavaScript Map).',\n    /**\n     *@description A short summary of the \"(object elements)[]\" described at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#array\n     */\n    objectElementsSummary: 'An internal object which stores the indexed properties in a JavaScript Object, such as the contents of an Array.',\n    /**\n     *@description A short summary of the \"(object properties)[]\" described at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#array\n     */\n    objectPropertiesSummary: 'An internal object which stores the named properties in a JavaScript Object.',\n    /**\n     *@description A short summary of the text at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#sliced-string\n     */\n    slicedStringSummary: 'A string which represents some of the characters from another string.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapSnapshotGridNodes.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nclass HeapSnapshotGridNodeBase extends DataGrid.DataGrid.DataGridNode {\n}\nexport class HeapSnapshotGridNode extends Common.ObjectWrapper.eventMixin(HeapSnapshotGridNodeBase) {\n    dataGridInternal;\n    instanceCount;\n    savedChildren;\n    retrievedChildrenRanges;\n    providerObject;\n    reachableFromWindow;\n    populated;\n    constructor(tree, hasChildren) {\n        super(null, hasChildren);\n        this.dataGridInternal = tree;\n        this.instanceCount = 0;\n        this.savedChildren = new Map();\n        /**\n         * List of position ranges for all visible nodes: [startPos1, endPos1),...,[startPosN, endPosN)\n         * Position is an item position in the provider.\n         */\n        this.retrievedChildrenRanges = [];\n        this.providerObject = null;\n        this.reachableFromWindow = false;\n    }\n    get name() {\n        return undefined;\n    }\n    heapSnapshotDataGrid() {\n        return this.dataGridInternal;\n    }\n    createProvider() {\n        throw new Error('Not implemented.');\n    }\n    comparator() {\n        throw new Error('Not implemented.');\n    }\n    getHash() {\n        throw new Error('Not implemented.');\n    }\n    createChildNode(_item) {\n        throw new Error('Not implemented.');\n    }\n    retainersDataSource() {\n        return null;\n    }\n    provider() {\n        if (!this.providerObject) {\n            this.providerObject = this.createProvider();\n        }\n        return this.providerObject;\n    }\n    createCell(columnId) {\n        return super.createCell(columnId);\n    }\n    collapse() {\n        super.collapse();\n        this.dataGridInternal.updateVisibleNodes(true);\n    }\n    expand() {\n        super.expand();\n        this.dataGridInternal.updateVisibleNodes(true);\n    }\n    dispose() {\n        if (this.providerObject) {\n            this.providerObject.dispose();\n        }\n        for (let node = this.children[0]; node; node = node.traverseNextNode(true, this, true)) {\n            node.dispose();\n        }\n    }\n    queryObjectContent(_heapProfilerModel, _objectGroupName) {\n        throw new Error('Not implemented.');\n    }\n    tryQueryObjectContent(_heapProfilerModel, _objectGroupName) {\n        throw new Error('Not implemented.');\n    }\n    populateContextMenu(_contextMenu, _dataDisplayDelegate, _heapProfilerModel) {\n    }\n    toPercentString(num) {\n        return num.toFixed(0) + '\\xa0%'; // \\xa0 is a non-breaking space.\n    }\n    toUIDistance(distance) {\n        const baseSystemDistance = HeapSnapshotModel.HeapSnapshotModel.baseSystemDistance;\n        return distance >= 0 && distance < baseSystemDistance ? distance.toString() : '\\u2212';\n    }\n    allChildren() {\n        return this.dataGridInternal.allChildren(this);\n    }\n    removeChildByIndex(index) {\n        this.dataGridInternal.removeChildByIndex(this, index);\n    }\n    childForPosition(nodePosition) {\n        let indexOfFirstChildInRange = 0;\n        for (let i = 0; i < this.retrievedChildrenRanges.length; i++) {\n            const range = this.retrievedChildrenRanges[i];\n            if (range.from <= nodePosition && nodePosition < range.to) {\n                const childIndex = indexOfFirstChildInRange + nodePosition - range.from;\n                return this.allChildren()[childIndex];\n            }\n            indexOfFirstChildInRange += range.to - range.from + 1;\n        }\n        return null;\n    }\n    createValueCell(columnId) {\n        const jslog = VisualLogging.tableCell('numeric-column').track({ click: true });\n        const cell = UI.Fragment.html `<td class=\"numeric-column\" jslog=${jslog} />`;\n        const dataGrid = this.dataGrid;\n        if (dataGrid.snapshot && dataGrid.snapshot.totalSize !== 0) {\n            const div = document.createElement('div');\n            const valueSpan = UI.Fragment.html `<span>${this.data[columnId]}</span>`;\n            div.appendChild(valueSpan);\n            const percentColumn = columnId + '-percent';\n            if (percentColumn in this.data) {\n                const percentSpan = UI.Fragment.html `<span class=\"percent-column\">${this.data[percentColumn]}</span>`;\n                div.appendChild(percentSpan);\n                div.classList.add('profile-multiple-values');\n                UI.ARIAUtils.markAsHidden(valueSpan);\n                UI.ARIAUtils.markAsHidden(percentSpan);\n                this.setCellAccessibleName(i18nString(UIStrings.genericStringsTwoPlaceholders, { PH1: this.data[columnId], PH2: this.data[percentColumn] }), cell, columnId);\n            }\n            cell.appendChild(div);\n        }\n        return cell;\n    }\n    populate() {\n        if (this.populated) {\n            return;\n        }\n        this.populated = true;\n        void this.provider().sortAndRewind(this.comparator()).then(() => this.populateChildren());\n    }\n    expandWithoutPopulate() {\n        // Make sure default populate won't take action.\n        this.populated = true;\n        this.expand();\n        return this.provider().sortAndRewind(this.comparator());\n    }\n    childHashForEntity(entity) {\n        if ('edgeIndex' in entity) {\n            return entity.edgeIndex;\n        }\n        return entity.id;\n    }\n    populateChildren(fromPosition, toPosition) {\n        return new Promise(resolve => {\n            fromPosition = fromPosition || 0;\n            toPosition = toPosition || fromPosition + this.dataGridInternal.defaultPopulateCount();\n            let firstNotSerializedPosition = fromPosition;\n            serializeNextChunk.call(this, toPosition);\n            function serializeNextChunk(toPosition) {\n                if (firstNotSerializedPosition >= toPosition) {\n                    return;\n                }\n                const end = Math.min(firstNotSerializedPosition + this.dataGridInternal.defaultPopulateCount(), toPosition);\n                void this.provider()\n                    .serializeItemsRange(firstNotSerializedPosition, end)\n                    .then(itemsRange => childrenRetrieved.call(this, itemsRange, toPosition));\n                firstNotSerializedPosition = end;\n            }\n            function insertRetrievedChild(item, insertionIndex) {\n                if (this.savedChildren) {\n                    const hash = this.childHashForEntity(item);\n                    const child = this.savedChildren.get(hash);\n                    if (child) {\n                        this.dataGridInternal.insertChild(this, child, insertionIndex);\n                        return;\n                    }\n                }\n                this.dataGridInternal.insertChild(this, this.createChildNode(item), insertionIndex);\n            }\n            function insertShowMoreButton(from, to, insertionIndex) {\n                const button = (new DataGrid.ShowMoreDataGridNode.ShowMoreDataGridNode(this.populateChildren.bind(this), from, to, this.dataGridInternal.defaultPopulateCount()));\n                this.dataGridInternal.insertChild(this, button, insertionIndex);\n            }\n            function childrenRetrieved(itemsRange, toPosition) {\n                let itemIndex = 0;\n                let itemPosition = itemsRange.startPosition;\n                const items = itemsRange.items;\n                let insertionIndex = 0;\n                if (!this.retrievedChildrenRanges.length) {\n                    if (itemsRange.startPosition > 0) {\n                        this.retrievedChildrenRanges.push({ from: 0, to: 0 });\n                        insertShowMoreButton.call(this, 0, itemsRange.startPosition, insertionIndex++);\n                    }\n                    this.retrievedChildrenRanges.push({ from: itemsRange.startPosition, to: itemsRange.endPosition });\n                    for (let i = 0, l = items.length; i < l; ++i) {\n                        insertRetrievedChild.call(this, items[i], insertionIndex++);\n                    }\n                    if (itemsRange.endPosition < itemsRange.totalLength) {\n                        insertShowMoreButton.call(this, itemsRange.endPosition, itemsRange.totalLength, insertionIndex++);\n                    }\n                }\n                else {\n                    let rangeIndex = 0;\n                    let found = false;\n                    let range = { from: 0, to: 0 };\n                    while (rangeIndex < this.retrievedChildrenRanges.length) {\n                        range = this.retrievedChildrenRanges[rangeIndex];\n                        if (range.to >= itemPosition) {\n                            found = true;\n                            break;\n                        }\n                        insertionIndex += range.to - range.from;\n                        // Skip the button if there is one.\n                        if (range.to < itemsRange.totalLength) {\n                            insertionIndex += 1;\n                        }\n                        ++rangeIndex;\n                    }\n                    if (!found || itemsRange.startPosition < range.from) {\n                        // Update previous button.\n                        const button = this.allChildren()[insertionIndex - 1];\n                        button.setEndPosition(itemsRange.startPosition);\n                        insertShowMoreButton.call(this, itemsRange.startPosition, found ? range.from : itemsRange.totalLength, insertionIndex);\n                        range = { from: itemsRange.startPosition, to: itemsRange.startPosition };\n                        if (!found) {\n                            rangeIndex = this.retrievedChildrenRanges.length;\n                        }\n                        this.retrievedChildrenRanges.splice(rangeIndex, 0, range);\n                    }\n                    else {\n                        insertionIndex += itemPosition - range.from;\n                    }\n                    // At this point insertionIndex is always an index before button or between nodes.\n                    // Also it is always true here that range.from <= itemPosition <= range.to\n                    // Stretch the range right bound to include all new items.\n                    while (range.to < itemsRange.endPosition) {\n                        // Skip already added nodes.\n                        const skipCount = range.to - itemPosition;\n                        insertionIndex += skipCount;\n                        itemIndex += skipCount;\n                        itemPosition = range.to;\n                        // We're at the position before button: ...<?node>x<button>\n                        const nextRange = this.retrievedChildrenRanges[rangeIndex + 1];\n                        let newEndOfRange = nextRange ? nextRange.from : itemsRange.totalLength;\n                        if (newEndOfRange > itemsRange.endPosition) {\n                            newEndOfRange = itemsRange.endPosition;\n                        }\n                        while (itemPosition < newEndOfRange) {\n                            insertRetrievedChild.call(this, items[itemIndex++], insertionIndex++);\n                            ++itemPosition;\n                        }\n                        // Merge with the next range.\n                        if (nextRange && newEndOfRange === nextRange.from) {\n                            range.to = nextRange.to;\n                            // Remove \"show next\" button if there is one.\n                            this.removeChildByIndex(insertionIndex);\n                            this.retrievedChildrenRanges.splice(rangeIndex + 1, 1);\n                        }\n                        else {\n                            range.to = newEndOfRange;\n                            // Remove or update next button.\n                            if (newEndOfRange === itemsRange.totalLength) {\n                                this.removeChildByIndex(insertionIndex);\n                            }\n                            else {\n                                this.allChildren()[insertionIndex]\n                                    .setStartPosition(itemsRange.endPosition);\n                            }\n                        }\n                    }\n                }\n                this.instanceCount += items.length;\n                if (firstNotSerializedPosition < toPosition && firstNotSerializedPosition < itemsRange.totalLength) {\n                    serializeNextChunk.call(this, toPosition);\n                    return;\n                }\n                if (this.expanded) {\n                    this.dataGridInternal.updateVisibleNodes(true);\n                }\n                resolve();\n                this.dispatchEventToListeners(HeapSnapshotGridNode.Events.PopulateComplete);\n            }\n        });\n    }\n    saveChildren() {\n        this.savedChildren.clear();\n        const children = this.allChildren();\n        for (let i = 0, l = children.length; i < l; ++i) {\n            const child = children[i];\n            if (!child.expanded) {\n                continue;\n            }\n            this.savedChildren.set(child.getHash(), child);\n        }\n    }\n    async sort() {\n        this.dataGridInternal.recursiveSortingEnter();\n        await this.provider().sortAndRewind(this.comparator());\n        this.saveChildren();\n        this.dataGridInternal.removeAllChildren(this);\n        this.retrievedChildrenRanges = [];\n        const instanceCount = this.instanceCount;\n        this.instanceCount = 0;\n        await this.populateChildren(0, instanceCount);\n        for (const child of this.allChildren()) {\n            if (child.expanded) {\n                void child.sort();\n            }\n        }\n        this.dataGridInternal.recursiveSortingLeave();\n    }\n}\n(function (HeapSnapshotGridNode) {\n    let Events;\n    (function (Events) {\n        /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n        Events[\"PopulateComplete\"] = \"PopulateComplete\";\n        /* eslint-enable @typescript-eslint/naming-convention */\n    })(Events = HeapSnapshotGridNode.Events || (HeapSnapshotGridNode.Events = {}));\n})(HeapSnapshotGridNode || (HeapSnapshotGridNode = {}));\nexport class HeapSnapshotGenericObjectNode extends HeapSnapshotGridNode {\n    referenceName;\n    nameInternal;\n    type;\n    distance;\n    shallowSize;\n    retainedSize;\n    snapshotNodeId;\n    snapshotNodeIndex;\n    detachedDOMTreeNode;\n    linkElement;\n    constructor(dataGrid, node) {\n        super(dataGrid, false);\n        // node is null for DataGrid root nodes.\n        if (!node) {\n            return;\n        }\n        this.referenceName = null;\n        this.nameInternal = node.name;\n        this.type = node.type;\n        this.distance = node.distance;\n        this.shallowSize = node.selfSize;\n        this.retainedSize = node.retainedSize;\n        this.snapshotNodeId = node.id;\n        this.snapshotNodeIndex = node.nodeIndex;\n        if (this.type === 'string') {\n            this.reachableFromWindow = true;\n        }\n        else if (this.type === 'object' && this.nameInternal.startsWith('Window')) {\n            this.nameInternal = this.shortenWindowURL(this.nameInternal, false);\n            this.reachableFromWindow = true;\n        }\n        else if (node.canBeQueried) {\n            this.reachableFromWindow = true;\n        }\n        if (node.detachedDOMTreeNode) {\n            this.detachedDOMTreeNode = true;\n        }\n        const snapshot = dataGrid.snapshot;\n        const shallowSizePercent = this.shallowSize / snapshot.totalSize * 100.0;\n        const retainedSizePercent = this.retainedSize / snapshot.totalSize * 100.0;\n        this.data = {\n            distance: this.toUIDistance(this.distance),\n            shallowSize: Platform.NumberUtilities.withThousandsSeparator(this.shallowSize),\n            retainedSize: Platform.NumberUtilities.withThousandsSeparator(this.retainedSize),\n            'shallowSize-percent': this.toPercentString(shallowSizePercent),\n            'retainedSize-percent': this.toPercentString(retainedSizePercent),\n        };\n    }\n    get name() {\n        return this.nameInternal;\n    }\n    retainersDataSource() {\n        return this.snapshotNodeIndex === undefined ? null : {\n            snapshot: this.dataGridInternal.snapshot,\n            snapshotNodeIndex: this.snapshotNodeIndex,\n            snapshotNodeId: this.snapshotNodeId,\n        };\n    }\n    createCell(columnId) {\n        const cell = columnId !== 'object' ? this.createValueCell(columnId) : this.createObjectCell();\n        return cell;\n    }\n    createObjectCell() {\n        let value = this.nameInternal;\n        let valueStyle = 'object';\n        switch (this.type) {\n            case 'concatenated string':\n            case 'string':\n                value = `\"${value}\"`;\n                valueStyle = 'string';\n                break;\n            case 'regexp':\n                value = `/${value}/`;\n                valueStyle = 'string';\n                break;\n            case 'closure':\n                value = `${value}()`;\n                valueStyle = 'function';\n                break;\n            case 'bigint':\n                valueStyle = 'bigint';\n                break;\n            case 'number':\n                valueStyle = 'number';\n                break;\n            case 'hidden':\n            case 'object shape':\n                valueStyle = 'null';\n                break;\n            case 'array':\n                value = value ? `${value}[]` : i18nString(UIStrings.internalArray);\n                break;\n        }\n        return this.createObjectCellWithValue(valueStyle, value || '');\n    }\n    createObjectCellWithValue(valueStyle, value) {\n        const jslog = VisualLogging.tableCell('object-column').track({ click: true });\n        const fragment = UI.Fragment.Fragment.build `\n  <td class=\"object-column disclosure\" jslog=${jslog}>\n  <div class=\"source-code event-properties\" style=\"overflow: visible;\" $=\"container\">\n  <span class=\"value object-value-${valueStyle}\">${value}</span>\n  <span class=\"object-value-id\">@${this.snapshotNodeId}</span>\n  </div>\n  </td>`;\n        const div = fragment.$('container');\n        this.prefixObjectCell(div);\n        if (this.reachableFromWindow) {\n            const frameIcon = IconButton.Icon.create('frame', 'heap-object-tag');\n            UI.Tooltip.Tooltip.install(frameIcon, i18nString(UIStrings.userObjectReachableFromWindow));\n            div.appendChild(frameIcon);\n        }\n        if (this.detachedDOMTreeNode) {\n            const frameIcon = IconButton.Icon.create('scissors', 'heap-object-tag');\n            UI.Tooltip.Tooltip.install(frameIcon, i18nString(UIStrings.detachedFromDomTree));\n            div.appendChild(frameIcon);\n        }\n        void this.appendSourceLocation(div);\n        const cell = fragment.element();\n        if (this.depth) {\n            cell.style.setProperty('padding-left', (this.depth * this.dataGrid.indentWidth) + 'px');\n        }\n        return cell;\n    }\n    prefixObjectCell(_div) {\n    }\n    async appendSourceLocation(div) {\n        const linkContainer = UI.Fragment.html `<span class=\"heap-object-source-link\" />`;\n        div.appendChild(linkContainer);\n        const link = await this.dataGridInternal.dataDisplayDelegate().linkifyObject(this.snapshotNodeIndex);\n        if (link) {\n            link.setAttribute('tabindex', '0');\n            linkContainer.appendChild(link);\n            this.linkElement = link;\n        }\n        else {\n            linkContainer.remove();\n        }\n    }\n    async queryObjectContent(heapProfilerModel, objectGroupName) {\n        const remoteObject = await this.tryQueryObjectContent(heapProfilerModel, objectGroupName);\n        return remoteObject || this.tryGetTooltipDescription() ||\n            heapProfilerModel.runtimeModel().createRemoteObjectFromPrimitiveValue(i18nString(UIStrings.previewIsNotAvailable));\n    }\n    async tryQueryObjectContent(heapProfilerModel, objectGroupName) {\n        if (this.type === 'string') {\n            return heapProfilerModel.runtimeModel().createRemoteObjectFromPrimitiveValue(this.nameInternal);\n        }\n        return await heapProfilerModel.objectForSnapshotObjectId(String(this.snapshotNodeId), objectGroupName);\n    }\n    tryGetTooltipDescription() {\n        const baseLink = 'https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#';\n        switch (this.type) {\n            case 'code':\n                return { description: i18nString(UIStrings.compiledCodeSummary), link: baseLink + 'compiled-code' };\n            case 'concatenated string':\n                return { description: i18nString(UIStrings.concatenatedStringSummary), link: baseLink + 'concatenated-string' };\n            case 'sliced string':\n                return { description: i18nString(UIStrings.slicedStringSummary), link: baseLink + 'sliced-string' };\n        }\n        switch (this.type + ':' + this.nameInternal) {\n            case 'array:': // If nameInternal is empty, then the object is shown as \"(internal array)[]\".\n                return { description: i18nString(UIStrings.internalArraySummary), link: baseLink + 'array' };\n            case 'array:(object elements)':\n                return { description: i18nString(UIStrings.objectElementsSummary), link: baseLink + 'array' };\n            case 'array:(object properties)':\n            case 'hidden:system / PropertyArray':\n                return { description: i18nString(UIStrings.objectPropertiesSummary), link: baseLink + 'array' };\n            case 'object:system / Context':\n                return { description: i18nString(UIStrings.contextSummary), link: baseLink + 'system-context' };\n            case 'object shape:system / DescriptorArray':\n                return { description: i18nString(UIStrings.descriptorArraySummary), link: baseLink + 'object-shape' };\n            case 'object shape:system / Map':\n                return { description: i18nString(UIStrings.mapSummary), link: baseLink + 'object-shape' };\n            case 'native:InternalNode':\n                return { description: i18nString(UIStrings.internalNodeSummary), link: baseLink + 'internal-node' };\n        }\n        return undefined;\n    }\n    async updateHasChildren() {\n        const isEmpty = await this.provider().isEmpty();\n        this.setHasChildren(!isEmpty);\n    }\n    shortenWindowURL(fullName, hasObjectId) {\n        const startPos = fullName.indexOf('/');\n        const endPos = hasObjectId ? fullName.indexOf('@') : fullName.length;\n        if (startPos === -1 || endPos === -1) {\n            return fullName;\n        }\n        const fullURL = fullName.substring(startPos + 1, endPos).trimLeft();\n        let url = Platform.StringUtilities.trimURL(fullURL);\n        if (url.length > 40) {\n            url = Platform.StringUtilities.trimMiddle(url, 40);\n        }\n        return fullName.substr(0, startPos + 2) + url + fullName.substr(endPos);\n    }\n    populateContextMenu(contextMenu, dataDisplayDelegate, heapProfilerModel) {\n        if (this.shallowSize !== 0) {\n            contextMenu.revealSection().appendItem(i18nString(UIStrings.revealInSummaryView), () => {\n                dataDisplayDelegate.showObject(String(this.snapshotNodeId), i18nString(UIStrings.summary));\n            }, { jslogContext: 'reveal-in-summary' });\n        }\n        if (this.referenceName) {\n            for (const match of this.referenceName.matchAll(/\\((?<objectName>[^@)]*) @(?<snapshotNodeId>\\d+)\\)/g)) {\n                const { objectName, snapshotNodeId } = match.groups;\n                contextMenu.revealSection().appendItem(i18nString(UIStrings.revealObjectSWithIdSInSummary, { PH1: objectName, PH2: snapshotNodeId }), () => {\n                    dataDisplayDelegate.showObject(snapshotNodeId, i18nString(UIStrings.summary));\n                }, { jslogContext: 'reveal-in-summary' });\n            }\n        }\n        if (heapProfilerModel) {\n            contextMenu.revealSection().appendItem(i18nString(UIStrings.storeAsGlobalVariable), async () => {\n                const remoteObject = await this.tryQueryObjectContent(heapProfilerModel, '');\n                if (!remoteObject) {\n                    Common.Console.Console.instance().error(i18nString(UIStrings.previewIsNotAvailable));\n                }\n                else {\n                    const consoleModel = heapProfilerModel.target().model(SDK.ConsoleModel.ConsoleModel);\n                    await consoleModel?.saveToTempVariable(UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext), remoteObject);\n                }\n            }, { jslogContext: 'store-as-global-variable' });\n        }\n    }\n}\nexport class HeapSnapshotObjectNode extends HeapSnapshotGenericObjectNode {\n    referenceName;\n    referenceType;\n    edgeIndex;\n    snapshot;\n    parentObjectNode;\n    cycledWithAncestorGridNode;\n    constructor(dataGrid, snapshot, edge, parentObjectNode) {\n        super(dataGrid, edge.node);\n        this.referenceName = edge.name;\n        this.referenceType = edge.type;\n        this.edgeIndex = edge.edgeIndex;\n        this.snapshot = snapshot;\n        this.parentObjectNode = parentObjectNode;\n        this.cycledWithAncestorGridNode = this.findAncestorWithSameSnapshotNodeId();\n        if (!this.cycledWithAncestorGridNode) {\n            void this.updateHasChildren();\n        }\n        const data = this.data;\n        data['count'] = '';\n        data['addedCount'] = '';\n        data['removedCount'] = '';\n        data['countDelta'] = '';\n        data['addedSize'] = '';\n        data['removedSize'] = '';\n        data['sizeDelta'] = '';\n    }\n    retainersDataSource() {\n        return this.snapshotNodeIndex === undefined ?\n            null :\n            { snapshot: this.snapshot, snapshotNodeIndex: this.snapshotNodeIndex, snapshotNodeId: this.snapshotNodeId };\n    }\n    createProvider() {\n        if (this.snapshotNodeIndex === undefined) {\n            throw new Error('Cannot create a provider on a root node');\n        }\n        return this.snapshot.createEdgesProvider(this.snapshotNodeIndex);\n    }\n    findAncestorWithSameSnapshotNodeId() {\n        let ancestor = this.parentObjectNode;\n        while (ancestor) {\n            if (ancestor.snapshotNodeId === this.snapshotNodeId) {\n                return ancestor;\n            }\n            ancestor = ancestor.parentObjectNode;\n        }\n        return null;\n    }\n    createChildNode(item) {\n        return new HeapSnapshotObjectNode(this.dataGridInternal, this.snapshot, item, this);\n    }\n    getHash() {\n        return this.edgeIndex;\n    }\n    comparator() {\n        const sortAscending = this.dataGridInternal.isSortOrderAscending();\n        const sortColumnId = this.dataGridInternal.sortColumnId();\n        switch (sortColumnId) {\n            case 'object':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('!edgeName', sortAscending, 'retainedSize', false);\n            case 'count':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('!edgeName', true, 'retainedSize', false);\n            case 'shallowSize':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, '!edgeName', true);\n            case 'retainedSize':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('retainedSize', sortAscending, '!edgeName', true);\n            case 'distance':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('distance', sortAscending, 'name', true);\n            default:\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('!edgeName', true, 'retainedSize', false);\n        }\n    }\n    prefixObjectCell(div) {\n        let name = this.referenceName || '(empty)';\n        let nameClass = 'name';\n        switch (this.referenceType) {\n            case 'context':\n                nameClass = 'object-value-number';\n                break;\n            case 'internal':\n            case 'hidden':\n            case 'weak':\n                nameClass = 'object-value-null';\n                break;\n            case 'element':\n                name = `[${name}]`;\n                break;\n        }\n        if (this.cycledWithAncestorGridNode) {\n            div.classList.add('cycled-ancestor-node');\n        }\n        div.prepend(UI.Fragment.html `<span class=\"property-name ${nameClass}\">${name}</span>\n  <span class=\"grayed\">${this.edgeNodeSeparator()}</span>`);\n    }\n    edgeNodeSeparator() {\n        return '::';\n    }\n}\nexport class HeapSnapshotRetainingObjectNode extends HeapSnapshotObjectNode {\n    #ignored;\n    constructor(dataGrid, snapshot, edge, parentRetainingObjectNode) {\n        super(dataGrid, snapshot, edge, parentRetainingObjectNode);\n        this.#ignored = edge.node.ignored;\n        if (this.#ignored) {\n            this.data['distance'] = i18nString(UIStrings.ignored);\n        }\n    }\n    createProvider() {\n        if (this.snapshotNodeIndex === undefined) {\n            throw new Error('Cannot create providers on root nodes');\n        }\n        return this.snapshot.createRetainingEdgesProvider(this.snapshotNodeIndex);\n    }\n    createChildNode(item) {\n        return new HeapSnapshotRetainingObjectNode(this.dataGridInternal, this.snapshot, item, this);\n    }\n    edgeNodeSeparator() {\n        // TODO(l10n): improve description or clarify intention.\n        return i18nString(UIStrings.inElement);\n    }\n    expand() {\n        this.expandRetainersChain(20);\n    }\n    populateContextMenu(contextMenu, dataDisplayDelegate, heapProfilerModel) {\n        super.populateContextMenu(contextMenu, dataDisplayDelegate, heapProfilerModel);\n        const snapshotNodeIndex = this.snapshotNodeIndex;\n        if (snapshotNodeIndex === undefined) {\n            return;\n        }\n        if (this.#ignored) {\n            contextMenu.revealSection().appendItem(i18nString(UIStrings.stopIgnoringThisRetainer), async () => {\n                await this.snapshot.unignoreNodeInRetainersView(snapshotNodeIndex);\n                await this.dataGridInternal.dataSourceChanged();\n            }, { jslogContext: 'stop-ignoring-this-retainer' });\n        }\n        else {\n            contextMenu.revealSection().appendItem(i18nString(UIStrings.ignoreThisRetainer), async () => {\n                await this.snapshot.ignoreNodeInRetainersView(snapshotNodeIndex);\n                await this.dataGridInternal.dataSourceChanged();\n            }, { jslogContext: 'ignore-this-retainer' });\n        }\n    }\n    isReachable() {\n        return (this.distance ?? 0) < HeapSnapshotModel.HeapSnapshotModel.baseUnreachableDistance;\n    }\n    prefixObjectCell(div) {\n        super.prefixObjectCell(div);\n        if (!this.isReachable()) {\n            div.classList.add('unreachable-ancestor-node');\n        }\n    }\n    expandRetainersChain(maxExpandLevels) {\n        if (!this.populated) {\n            void this.once(HeapSnapshotGridNode.Events.PopulateComplete)\n                .then(() => this.expandRetainersChain(maxExpandLevels));\n            this.populate();\n            return;\n        }\n        super.expand();\n        if (--maxExpandLevels > 0 && this.children.length > 0) {\n            const retainer = this.children[0];\n            if ((retainer.distance || 0) > 1 && retainer.isReachable()) {\n                retainer.expandRetainersChain(maxExpandLevels);\n                return;\n            }\n        }\n        this.dataGridInternal.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.ExpandRetainersComplete);\n    }\n    comparator() {\n        const result = super.comparator();\n        if (result.fieldName1 === 'distance') {\n            result.fieldName1 = '!edgeDistance';\n        }\n        if (result.fieldName2 === 'distance') {\n            result.fieldName2 = '!edgeDistance';\n        }\n        return result;\n    }\n}\nexport class HeapSnapshotInstanceNode extends HeapSnapshotGenericObjectNode {\n    baseSnapshotOrSnapshot;\n    isDeletedNode;\n    constructor(dataGrid, snapshot, node, isDeletedNode) {\n        super(dataGrid, node);\n        this.baseSnapshotOrSnapshot = snapshot;\n        this.isDeletedNode = isDeletedNode;\n        void this.updateHasChildren();\n        const data = this.data;\n        data['count'] = '';\n        data['countDelta'] = '';\n        data['sizeDelta'] = '';\n        if (this.isDeletedNode) {\n            data['addedCount'] = '';\n            data['addedSize'] = '';\n            data['removedCount'] = '\\u2022';\n            data['removedSize'] = Platform.NumberUtilities.withThousandsSeparator(this.shallowSize || 0);\n        }\n        else {\n            data['addedCount'] = '\\u2022';\n            data['addedSize'] = Platform.NumberUtilities.withThousandsSeparator(this.shallowSize || 0);\n            data['removedCount'] = '';\n            data['removedSize'] = '';\n        }\n    }\n    retainersDataSource() {\n        return this.snapshotNodeIndex === undefined ? null : {\n            snapshot: this.baseSnapshotOrSnapshot,\n            snapshotNodeIndex: this.snapshotNodeIndex,\n            snapshotNodeId: this.snapshotNodeId,\n        };\n    }\n    createProvider() {\n        if (this.snapshotNodeIndex === undefined) {\n            throw new Error('Cannot create providers on root nodes');\n        }\n        return this.baseSnapshotOrSnapshot.createEdgesProvider(this.snapshotNodeIndex);\n    }\n    createChildNode(item) {\n        return new HeapSnapshotObjectNode(this.dataGridInternal, this.baseSnapshotOrSnapshot, item, null);\n    }\n    getHash() {\n        if (this.snapshotNodeId === undefined) {\n            throw new Error('Cannot hash root nodes');\n        }\n        return this.snapshotNodeId;\n    }\n    comparator() {\n        const sortAscending = this.dataGridInternal.isSortOrderAscending();\n        const sortColumnId = this.dataGridInternal.sortColumnId();\n        switch (sortColumnId) {\n            case 'object':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('!edgeName', sortAscending, 'retainedSize', false);\n            case 'distance':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('distance', sortAscending, 'retainedSize', false);\n            case 'count':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('!edgeName', true, 'retainedSize', false);\n            case 'addedSize':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, '!edgeName', true);\n            case 'removedSize':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, '!edgeName', true);\n            case 'shallowSize':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, '!edgeName', true);\n            case 'retainedSize':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('retainedSize', sortAscending, '!edgeName', true);\n            default:\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('!edgeName', true, 'retainedSize', false);\n        }\n    }\n}\nexport class HeapSnapshotConstructorNode extends HeapSnapshotGridNode {\n    nameInternal;\n    nodeFilter;\n    distance;\n    count;\n    shallowSize;\n    retainedSize;\n    constructor(dataGrid, className, aggregate, nodeFilter) {\n        super(dataGrid, aggregate.count > 0);\n        this.nameInternal = className;\n        this.nodeFilter = nodeFilter;\n        this.distance = aggregate.distance;\n        this.count = aggregate.count;\n        this.shallowSize = aggregate.self;\n        this.retainedSize = aggregate.maxRet;\n        const snapshot = dataGrid.snapshot;\n        const retainedSizePercent = this.retainedSize / snapshot.totalSize * 100.0;\n        const shallowSizePercent = this.shallowSize / snapshot.totalSize * 100.0;\n        this.data = {\n            object: className,\n            count: Platform.NumberUtilities.withThousandsSeparator(this.count),\n            distance: this.toUIDistance(this.distance),\n            shallowSize: Platform.NumberUtilities.withThousandsSeparator(this.shallowSize),\n            retainedSize: Platform.NumberUtilities.withThousandsSeparator(this.retainedSize),\n            'shallowSize-percent': this.toPercentString(shallowSizePercent),\n            'retainedSize-percent': this.toPercentString(retainedSizePercent),\n        };\n    }\n    get name() {\n        return this.nameInternal;\n    }\n    createProvider() {\n        return this.dataGridInternal.snapshot\n            .createNodesProviderForClass(this.nameInternal, this.nodeFilter);\n    }\n    async populateNodeBySnapshotObjectId(snapshotObjectId) {\n        this.dataGridInternal.resetNameFilter();\n        await this.expandWithoutPopulate();\n        const nodePosition = await this.provider().nodePosition(snapshotObjectId);\n        if (nodePosition === -1) {\n            this.collapse();\n            return [];\n        }\n        await this.populateChildren(nodePosition, null);\n        const node = this.childForPosition(nodePosition);\n        return node ? [this, node] : [];\n    }\n    filteredOut(filterValue) {\n        return this.nameInternal.toLowerCase().indexOf(filterValue) === -1;\n    }\n    createCell(columnId) {\n        const cell = columnId === 'object' ? super.createCell(columnId) : this.createValueCell(columnId);\n        if (columnId === 'object' && this.count > 1) {\n            cell.appendChild(UI.Fragment.html `<span class=\"objects-count\">×${this.count}</span>`);\n        }\n        return cell;\n    }\n    createChildNode(item) {\n        return new HeapSnapshotInstanceNode(this.dataGridInternal, this.dataGridInternal.snapshot, item, false);\n    }\n    comparator() {\n        const sortAscending = this.dataGridInternal.isSortOrderAscending();\n        const sortColumnId = this.dataGridInternal.sortColumnId();\n        switch (sortColumnId) {\n            case 'object':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', sortAscending, 'id', true);\n            case 'distance':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('distance', sortAscending, 'retainedSize', false);\n            case 'shallowSize':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, 'id', true);\n            case 'retainedSize':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('retainedSize', sortAscending, 'id', true);\n            default:\n                throw new Error(`Invalid sort column id ${sortColumnId}`);\n        }\n    }\n}\nexport class HeapSnapshotDiffNodesProvider {\n    addedNodesProvider;\n    deletedNodesProvider;\n    addedCount;\n    removedCount;\n    constructor(addedNodesProvider, deletedNodesProvider, addedCount, removedCount) {\n        this.addedNodesProvider = addedNodesProvider;\n        this.deletedNodesProvider = deletedNodesProvider;\n        this.addedCount = addedCount;\n        this.removedCount = removedCount;\n    }\n    dispose() {\n        this.addedNodesProvider.dispose();\n        this.deletedNodesProvider.dispose();\n    }\n    nodePosition(_snapshotObjectId) {\n        throw new Error('Unreachable');\n    }\n    isEmpty() {\n        return Promise.resolve(false);\n    }\n    async serializeItemsRange(beginPosition, endPosition) {\n        let itemsRange;\n        let addedItems;\n        if (beginPosition < this.addedCount) {\n            itemsRange = await this.addedNodesProvider.serializeItemsRange(beginPosition, endPosition);\n            for (const item of itemsRange.items) {\n                item.isAddedNotRemoved = true;\n            }\n            if (itemsRange.endPosition >= endPosition) {\n                itemsRange.totalLength = this.addedCount + this.removedCount;\n                return itemsRange;\n            }\n            addedItems = itemsRange;\n            itemsRange = await this.deletedNodesProvider.serializeItemsRange(0, endPosition - itemsRange.endPosition);\n        }\n        else {\n            addedItems = new HeapSnapshotModel.HeapSnapshotModel.ItemsRange(0, 0, 0, []);\n            itemsRange = await this.deletedNodesProvider.serializeItemsRange(beginPosition - this.addedCount, endPosition - this.addedCount);\n        }\n        if (!addedItems.items.length) {\n            addedItems.startPosition = this.addedCount + itemsRange.startPosition;\n        }\n        for (const item of itemsRange.items) {\n            item.isAddedNotRemoved = false;\n        }\n        addedItems.items.push(...itemsRange.items);\n        addedItems.endPosition = this.addedCount + itemsRange.endPosition;\n        addedItems.totalLength = this.addedCount + this.removedCount;\n        return addedItems;\n    }\n    async sortAndRewind(comparator) {\n        await this.addedNodesProvider.sortAndRewind(comparator);\n        await this.deletedNodesProvider.sortAndRewind(comparator);\n    }\n}\nexport class HeapSnapshotDiffNode extends HeapSnapshotGridNode {\n    nameInternal;\n    addedCount;\n    removedCount;\n    countDelta;\n    addedSize;\n    removedSize;\n    sizeDelta;\n    deletedIndexes;\n    constructor(dataGrid, className, diffForClass) {\n        super(dataGrid, true);\n        this.nameInternal = className;\n        this.addedCount = diffForClass.addedCount;\n        this.removedCount = diffForClass.removedCount;\n        this.countDelta = diffForClass.countDelta;\n        this.addedSize = diffForClass.addedSize;\n        this.removedSize = diffForClass.removedSize;\n        this.sizeDelta = diffForClass.sizeDelta;\n        this.deletedIndexes = diffForClass.deletedIndexes;\n        this.data = {\n            object: className,\n            addedCount: Platform.NumberUtilities.withThousandsSeparator(this.addedCount),\n            removedCount: Platform.NumberUtilities.withThousandsSeparator(this.removedCount),\n            countDelta: this.signForDelta(this.countDelta) +\n                Platform.NumberUtilities.withThousandsSeparator(Math.abs(this.countDelta)),\n            addedSize: Platform.NumberUtilities.withThousandsSeparator(this.addedSize),\n            removedSize: Platform.NumberUtilities.withThousandsSeparator(this.removedSize),\n            sizeDelta: this.signForDelta(this.sizeDelta) + Platform.NumberUtilities.withThousandsSeparator(Math.abs(this.sizeDelta)),\n        };\n    }\n    get name() {\n        return this.nameInternal;\n    }\n    createProvider() {\n        const tree = this.dataGridInternal;\n        if (tree.snapshot === null || tree.baseSnapshot === undefined || tree.baseSnapshot.uid === undefined) {\n            throw new Error('Data sources have not been set correctly');\n        }\n        const addedNodesProvider = tree.snapshot.createAddedNodesProvider(tree.baseSnapshot.uid, this.nameInternal);\n        const deletedNodesProvider = tree.baseSnapshot.createDeletedNodesProvider(this.deletedIndexes);\n        if (!addedNodesProvider || !deletedNodesProvider) {\n            throw new Error('Failed to create node providers');\n        }\n        return new HeapSnapshotDiffNodesProvider(addedNodesProvider, deletedNodesProvider, this.addedCount, this.removedCount);\n    }\n    createCell(columnId) {\n        const cell = super.createCell(columnId);\n        if (columnId !== 'object') {\n            cell.classList.add('numeric-column');\n        }\n        return cell;\n    }\n    createChildNode(item) {\n        const dataGrid = this.dataGridInternal;\n        if (item.isAddedNotRemoved) {\n            if (dataGrid.snapshot === null) {\n                throw new Error('Data sources have not been set correctly');\n            }\n            return new HeapSnapshotInstanceNode(this.dataGridInternal, dataGrid.snapshot, item, false);\n        }\n        if (dataGrid.baseSnapshot === undefined) {\n            throw new Error('Data sources have not been set correctly');\n        }\n        return new HeapSnapshotInstanceNode(this.dataGridInternal, dataGrid.baseSnapshot, item, true);\n    }\n    comparator() {\n        const sortAscending = this.dataGridInternal.isSortOrderAscending();\n        const sortColumnId = this.dataGridInternal.sortColumnId();\n        switch (sortColumnId) {\n            case 'object':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', sortAscending, 'id', true);\n            case 'addedCount':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', true, 'id', true);\n            case 'removedCount':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', true, 'id', true);\n            case 'countDelta':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', true, 'id', true);\n            case 'addedSize':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, 'id', true);\n            case 'removedSize':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, 'id', true);\n            case 'sizeDelta':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, 'id', true);\n            default:\n                throw new Error(`Invalid sort column ${sortColumnId}`);\n        }\n    }\n    filteredOut(filterValue) {\n        return this.nameInternal.toLowerCase().indexOf(filterValue) === -1;\n    }\n    signForDelta(delta) {\n        if (delta === 0) {\n            return '';\n        }\n        if (delta > 0) {\n            return '+';\n        }\n        return '\\u2212'; // Math minus sign, same width as plus.\n    }\n}\nexport class AllocationGridNode extends HeapSnapshotGridNode {\n    populated;\n    allocationNode;\n    constructor(dataGrid, data) {\n        super(dataGrid, data.hasChildren);\n        this.populated = false;\n        this.allocationNode = data;\n        this.data = {\n            liveCount: Platform.NumberUtilities.withThousandsSeparator(data.liveCount),\n            count: Platform.NumberUtilities.withThousandsSeparator(data.count),\n            liveSize: Platform.NumberUtilities.withThousandsSeparator(data.liveSize),\n            size: Platform.NumberUtilities.withThousandsSeparator(data.size),\n            name: data.name,\n        };\n    }\n    populate() {\n        if (this.populated) {\n            return;\n        }\n        void this.doPopulate();\n    }\n    async doPopulate() {\n        this.populated = true;\n        const callers = await this.dataGridInternal.snapshot.allocationNodeCallers(this.allocationNode.id);\n        const callersChain = callers.nodesWithSingleCaller;\n        let parentNode = this;\n        const dataGrid = this.dataGridInternal;\n        for (const caller of callersChain) {\n            const child = new AllocationGridNode(dataGrid, caller);\n            dataGrid.appendNode(parentNode, child);\n            parentNode = child;\n            parentNode.populated = true;\n            if (this.expanded) {\n                parentNode.expand();\n            }\n        }\n        const callersBranch = callers.branchingCallers;\n        callersBranch.sort(this.dataGridInternal.createComparator());\n        for (const caller of callersBranch) {\n            dataGrid.appendNode(parentNode, new AllocationGridNode(dataGrid, caller));\n        }\n        dataGrid.updateVisibleNodes(true);\n    }\n    expand() {\n        super.expand();\n        if (this.children.length === 1) {\n            this.children[0].expand();\n        }\n    }\n    createCell(columnId) {\n        if (columnId !== 'name') {\n            return this.createValueCell(columnId);\n        }\n        const cell = super.createCell(columnId);\n        const allocationNode = this.allocationNode;\n        const heapProfilerModel = this.dataGridInternal.heapProfilerModel();\n        if (allocationNode.scriptId) {\n            const linkifier = this.dataGridInternal.linkifier;\n            const urlElement = linkifier.linkifyScriptLocation(heapProfilerModel ? heapProfilerModel.target() : null, String(allocationNode.scriptId), allocationNode.scriptName, allocationNode.line - 1, {\n                columnNumber: allocationNode.column - 1,\n                inlineFrameIndex: 0,\n                className: 'profile-node-file',\n            });\n            urlElement.style.maxWidth = '75%';\n            cell.insertBefore(urlElement, cell.firstChild);\n        }\n        return cell;\n    }\n    allocationNodeId() {\n        return this.allocationNode.id;\n    }\n}\n//# sourceMappingURL=HeapSnapshotGridNodes.js.map","/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as HeapSnapshotModel from '../../models/heap_snapshot_model/heap_snapshot_model.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport { AllocationGridNode, HeapSnapshotConstructorNode, HeapSnapshotDiffNode, HeapSnapshotGenericObjectNode, HeapSnapshotObjectNode, HeapSnapshotRetainingObjectNode, } from './HeapSnapshotGridNodes.js';\nconst UIStrings = {\n    /**\n     *@description Text in Heap Snapshot Data Grids of a profiler tool\n     */\n    distanceFromWindowObject: 'Distance from window object',\n    /**\n     *@description Text in Heap Snapshot Data Grids of a profiler tool\n     */\n    sizeOfTheObjectItselfInBytes: 'Size of the object itself in bytes',\n    /**\n     *@description Text in Heap Snapshot Data Grids of a profiler tool\n     */\n    sizeOfTheObjectPlusTheGraphIt: 'Size of the object plus the graph it retains in bytes',\n    /**\n     *@description Text in Heap Snapshot Data Grids of a profiler tool\n     */\n    object: 'Object',\n    /**\n     *@description Text in Heap Snapshot Data Grids of a profiler tool\n     */\n    distance: 'Distance',\n    /**\n     *@description Text in Heap Snapshot Data Grids of a profiler tool. Shallow size is the size of just this node, not including children/retained size.\n     */\n    shallowSize: 'Shallow Size',\n    /**\n     *@description Text in Heap Snapshot Data Grids of a profiler tool\n     */\n    retainedSize: 'Retained Size',\n    /**\n     * @description Title for a section in the Heap Snapshot view. This title is for a table which\n     * shows retaining relationships between JavaScript objects. One object retains another if it holds\n     * a reference to it, keeping it alive.\n     */\n    heapSnapshotRetainment: 'Heap Snapshot Retainment',\n    /**\n     *@description Text in Heap Snapshot Data Grids of a profiler tool\n     */\n    constructorString: 'Constructor',\n    /**\n     *@description Data grid name for Heap Snapshot Constructors data grids\n     */\n    heapSnapshotConstructors: 'Heap Snapshot Constructors',\n    /**\n     *@description Column header in a table displaying the diff between two Heap Snapshots. This\n     * column is number of new objects in snapshot #2 compared to snapshot #1.\n     */\n    New: '# New',\n    /**\n     *@description Column header in a table displaying the diff between two Heap Snapshots. This\n     * column is number of deleted objects in snapshot #2 compared to snapshot #1.\n     */\n    Deleted: '# Deleted',\n    /**\n     * @description Column header in a table displaying the diff between two Heap Snapshots. This\n     * column is the difference (delta) between the # New and # Deleted objects in the snapshot.\n     */\n    Delta: '# Delta',\n    /**\n     *@description Text in Heap Snapshot Data Grids of a profiler tool\n     */\n    allocSize: 'Alloc. Size',\n    /**\n     *@description Text in Heap Snapshot Data Grids of a profiler tool\n     */\n    freedSize: 'Freed Size',\n    /**\n     * @description Title of a column in a table in the Heap Snapshot tool. 'Delta' here means\n     * difference, so the whole string means 'difference in size'.\n     */\n    sizeDelta: 'Size Delta',\n    /**\n     *@description Data grid name for Heap Snapshot Diff data grids\n     */\n    heapSnapshotDiff: 'Heap Snapshot Diff',\n    /**\n     *@description Text in Heap Snapshot Data Grids of a profiler tool\n     */\n    liveCount: 'Live Count',\n    /**\n     *@description Text in Heap Snapshot Data Grids of a profiler tool\n     */\n    count: 'Count',\n    /**\n     *@description Text in Heap Snapshot Data Grids of a profiler tool\n     */\n    liveSize: 'Live Size',\n    /**\n     *@description Text for the size of something\n     */\n    size: 'Size',\n    /**\n     *@description Text for a programming function\n     */\n    function: 'Function',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    allocation: 'Allocation',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapSnapshotDataGrids.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst adjacencyMap = new WeakMap();\nclass HeapSnapshotSortableDataGridBase extends DataGrid.DataGrid.DataGridImpl {\n}\nexport class HeapSnapshotSortableDataGrid extends Common.ObjectWrapper.eventMixin(HeapSnapshotSortableDataGridBase) {\n    snapshot;\n    selectedNode;\n    heapProfilerModelInternal;\n    dataDisplayDelegateInternal;\n    recursiveSortingDepth;\n    populatedAndSorted;\n    nameFilter;\n    nodeFilterInternal;\n    lastSortColumnId;\n    lastSortAscending;\n    constructor(heapProfilerModel, dataDisplayDelegate, dataGridParameters) {\n        // TODO(allada) This entire class needs to be converted to use the templates in DataGridNode.\n        super(dataGridParameters);\n        this.snapshot = null;\n        this.selectedNode = null;\n        this.heapProfilerModelInternal = heapProfilerModel;\n        this.dataDisplayDelegateInternal = dataDisplayDelegate;\n        const tooltips = [\n            ['distance', i18nString(UIStrings.distanceFromWindowObject)],\n            ['shallowSize', i18nString(UIStrings.sizeOfTheObjectItselfInBytes)],\n            ['retainedSize', i18nString(UIStrings.sizeOfTheObjectPlusTheGraphIt)],\n        ];\n        for (const info of tooltips) {\n            const headerCell = this.headerTableHeader(info[0]);\n            if (headerCell) {\n                headerCell.setAttribute('title', info[1]);\n            }\n        }\n        this.recursiveSortingDepth = 0;\n        this.populatedAndSorted = false;\n        this.nameFilter = null;\n        this.nodeFilterInternal = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter();\n        this.addEventListener(HeapSnapshotSortableDataGridEvents.SortingComplete, this.sortingComplete, this);\n        this.addEventListener(\"SortingChanged\" /* DataGrid.DataGrid.Events.SORTING_CHANGED */, this.sortingChanged, this);\n        this.setRowContextMenuCallback(this.populateContextMenu.bind(this));\n    }\n    async setDataSource(_snapshot, _nodeIndex) {\n    }\n    isFilteredOut(node) {\n        const nameFilterValue = this.nameFilter ? this.nameFilter.value().toLowerCase() : '';\n        if (nameFilterValue && (node instanceof HeapSnapshotDiffNode || node instanceof HeapSnapshotConstructorNode) &&\n            node.filteredOut(nameFilterValue)) {\n            return true;\n        }\n        return false;\n    }\n    heapProfilerModel() {\n        return this.heapProfilerModelInternal;\n    }\n    dataDisplayDelegate() {\n        return this.dataDisplayDelegateInternal;\n    }\n    nodeFilter() {\n        return this.nodeFilterInternal;\n    }\n    setNameFilter(nameFilter) {\n        this.nameFilter = nameFilter;\n    }\n    defaultPopulateCount() {\n        return 100;\n    }\n    disposeAllNodes() {\n        const children = this.topLevelNodes();\n        for (let i = 0, l = children.length; i < l; ++i) {\n            children[i].dispose();\n        }\n    }\n    wasShown() {\n        if (this.nameFilter) {\n            this.nameFilter.addEventListener(\"TextChanged\" /* UI.Toolbar.ToolbarInput.Event.TEXT_CHANGED */, this.onNameFilterChanged, this);\n            this.updateVisibleNodes(true);\n        }\n        if (this.populatedAndSorted) {\n            this.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.ContentShown, this);\n        }\n    }\n    sortingComplete() {\n        this.removeEventListener(HeapSnapshotSortableDataGridEvents.SortingComplete, this.sortingComplete, this);\n        this.populatedAndSorted = true;\n        this.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.ContentShown, this);\n    }\n    willHide() {\n        if (this.nameFilter) {\n            this.nameFilter.removeEventListener(\"TextChanged\" /* UI.Toolbar.ToolbarInput.Event.TEXT_CHANGED */, this.onNameFilterChanged, this);\n        }\n    }\n    populateContextMenu(contextMenu, gridNode) {\n        const node = gridNode;\n        node.populateContextMenu(contextMenu, this.dataDisplayDelegateInternal, this.heapProfilerModel());\n        if (node instanceof HeapSnapshotGenericObjectNode && node.linkElement) {\n            contextMenu.appendApplicableItems(node.linkElement);\n        }\n    }\n    resetSortingCache() {\n        delete this.lastSortColumnId;\n        delete this.lastSortAscending;\n    }\n    topLevelNodes() {\n        return this.rootNode().children;\n    }\n    revealObjectByHeapSnapshotId(_heapSnapshotObjectId) {\n        return Promise.resolve(null);\n    }\n    resetNameFilter() {\n        if (this.nameFilter) {\n            this.nameFilter.setValue('');\n        }\n    }\n    onNameFilterChanged() {\n        this.updateVisibleNodes(true);\n        this.deselectFilteredNodes();\n    }\n    deselectFilteredNodes() {\n        let currentNode = this.selectedNode;\n        while (currentNode) {\n            if (this.selectedNode && this.isFilteredOut(currentNode)) {\n                this.selectedNode.deselect();\n                this.selectedNode = null;\n                return;\n            }\n            currentNode = currentNode.parent;\n        }\n    }\n    sortFields(_sortColumnId, _ascending) {\n        throw new Error('Not implemented');\n    }\n    sortingChanged() {\n        const sortAscending = this.isSortOrderAscending();\n        const sortColumnId = this.sortColumnId();\n        if (this.lastSortColumnId === sortColumnId && this.lastSortAscending === sortAscending) {\n            return;\n        }\n        this.lastSortColumnId = sortColumnId;\n        this.lastSortAscending = sortAscending;\n        const sortFields = this.sortFields(sortColumnId || '', sortAscending);\n        function sortByTwoFields(nodeA, nodeB) {\n            // @ts-ignore\n            let field1 = nodeA[sortFields.fieldName1];\n            // @ts-ignore\n            let field2 = nodeB[sortFields.fieldName1];\n            let result = field1 < field2 ? -1 : (field1 > field2 ? 1 : 0);\n            if (!sortFields.ascending1) {\n                result = -result;\n            }\n            if (result !== 0) {\n                return result;\n            }\n            // @ts-ignore\n            field1 = nodeA[sortFields.fieldName2];\n            // @ts-ignore\n            field2 = nodeB[sortFields.fieldName2];\n            result = field1 < field2 ? -1 : (field1 > field2 ? 1 : 0);\n            if (!sortFields.ascending2) {\n                result = -result;\n            }\n            return result;\n        }\n        this.performSorting(sortByTwoFields);\n    }\n    performSorting(sortFunction) {\n        this.recursiveSortingEnter();\n        const children = this.allChildren(this.rootNode());\n        this.rootNode().removeChildren();\n        children.sort(sortFunction);\n        for (let i = 0, l = children.length; i < l; ++i) {\n            const child = children[i];\n            this.appendChildAfterSorting(child);\n            if (child.populated) {\n                void child.sort();\n            }\n        }\n        this.recursiveSortingLeave();\n    }\n    appendChildAfterSorting(child) {\n        const revealed = child.revealed;\n        this.rootNode().appendChild(child);\n        child.revealed = revealed;\n    }\n    recursiveSortingEnter() {\n        ++this.recursiveSortingDepth;\n    }\n    recursiveSortingLeave() {\n        if (!this.recursiveSortingDepth) {\n            return;\n        }\n        if (--this.recursiveSortingDepth) {\n            return;\n        }\n        this.updateVisibleNodes(true);\n        this.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.SortingComplete);\n    }\n    updateVisibleNodes(_force) {\n    }\n    allChildren(parent) {\n        return parent.children;\n    }\n    insertChild(parent, node, index) {\n        parent.insertChild(node, index);\n    }\n    removeChildByIndex(parent, index) {\n        parent.removeChild(parent.children[index]);\n    }\n    removeAllChildren(parent) {\n        parent.removeChildren();\n    }\n    async dataSourceChanged() {\n        throw new Error('Not implemented');\n    }\n}\nexport var HeapSnapshotSortableDataGridEvents;\n(function (HeapSnapshotSortableDataGridEvents) {\n    /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n    HeapSnapshotSortableDataGridEvents[\"ContentShown\"] = \"ContentShown\";\n    HeapSnapshotSortableDataGridEvents[\"SortingComplete\"] = \"SortingComplete\";\n    HeapSnapshotSortableDataGridEvents[\"ExpandRetainersComplete\"] = \"ExpandRetainersComplete\";\n    /* eslint-enable @typescript-eslint/naming-convention */\n})(HeapSnapshotSortableDataGridEvents || (HeapSnapshotSortableDataGridEvents = {}));\nexport class HeapSnapshotViewportDataGrid extends HeapSnapshotSortableDataGrid {\n    topPaddingHeight;\n    bottomPaddingHeight;\n    selectedNode;\n    scrollToResolveCallback;\n    constructor(heapProfilerModel, dataDisplayDelegate, dataGridParameters) {\n        super(heapProfilerModel, dataDisplayDelegate, dataGridParameters);\n        this.scrollContainer.addEventListener('scroll', this.onScroll.bind(this), true);\n        this.topPaddingHeight = 0;\n        this.bottomPaddingHeight = 0;\n        this.selectedNode = null;\n    }\n    topLevelNodes() {\n        return this.allChildren(this.rootNode());\n    }\n    appendChildAfterSorting(_child) {\n        // Do nothing here, it will be added in updateVisibleNodes.\n    }\n    updateVisibleNodes(force) {\n        // Guard zone is used to ensure there are always some extra items\n        // above and below the viewport to support keyboard navigation.\n        const guardZoneHeight = 40;\n        const scrollHeight = this.scrollContainer.scrollHeight;\n        let scrollTop = this.scrollContainer.scrollTop;\n        let scrollBottom = scrollHeight - scrollTop - this.scrollContainer.offsetHeight;\n        scrollTop = Math.max(0, scrollTop - guardZoneHeight);\n        scrollBottom = Math.max(0, scrollBottom - guardZoneHeight);\n        let viewPortHeight = scrollHeight - scrollTop - scrollBottom;\n        // Do nothing if populated nodes still fit the viewport.\n        if (!force && scrollTop >= this.topPaddingHeight && scrollBottom >= this.bottomPaddingHeight) {\n            return;\n        }\n        const hysteresisHeight = 500;\n        scrollTop -= hysteresisHeight;\n        viewPortHeight += 2 * hysteresisHeight;\n        const selectedNode = this.selectedNode;\n        this.rootNode().removeChildren();\n        this.topPaddingHeight = 0;\n        this.bottomPaddingHeight = 0;\n        this.addVisibleNodes(this.rootNode(), scrollTop, scrollTop + viewPortHeight);\n        this.setVerticalPadding(this.topPaddingHeight, this.bottomPaddingHeight);\n        if (selectedNode) {\n            // Keep selection even if the node is not in the current viewport.\n            if (selectedNode.parent) {\n                selectedNode.select(true);\n            }\n            else {\n                this.selectedNode = selectedNode;\n            }\n        }\n    }\n    addVisibleNodes(parentNode, topBound, bottomBound) {\n        if (!parentNode.expanded) {\n            return 0;\n        }\n        const children = this.allChildren(parentNode);\n        let topPadding = 0;\n        // Iterate over invisible nodes beyond the upper bound of viewport.\n        // Do not insert them into the grid, but count their total height.\n        let i = 0;\n        for (; i < children.length; ++i) {\n            const child = children[i];\n            if (this.isFilteredOut(child)) {\n                continue;\n            }\n            const newTop = topPadding + this.nodeHeight(child);\n            if (newTop > topBound) {\n                break;\n            }\n            topPadding = newTop;\n        }\n        // Put visible nodes into the data grid.\n        let position = topPadding;\n        for (; i < children.length && position < bottomBound; ++i) {\n            const child = children[i];\n            if (this.isFilteredOut(child)) {\n                continue;\n            }\n            const hasChildren = child.hasChildren();\n            child.removeChildren();\n            child.setHasChildren(hasChildren);\n            parentNode.appendChild(child);\n            position += child.nodeSelfHeight();\n            position += this.addVisibleNodes(child, topBound - position, bottomBound - position);\n        }\n        // Count the invisible nodes beyond the bottom bound of the viewport.\n        let bottomPadding = 0;\n        for (; i < children.length; ++i) {\n            const child = children[i];\n            if (this.isFilteredOut(child)) {\n                continue;\n            }\n            bottomPadding += this.nodeHeight(child);\n        }\n        this.topPaddingHeight += topPadding;\n        this.bottomPaddingHeight += bottomPadding;\n        return position + bottomPadding;\n    }\n    nodeHeight(node) {\n        let result = node.nodeSelfHeight();\n        if (!node.expanded) {\n            return result;\n        }\n        const children = this.allChildren(node);\n        for (let i = 0; i < children.length; i++) {\n            result += this.nodeHeight(children[i]);\n        }\n        return result;\n    }\n    revealTreeNode(pathToReveal) {\n        const height = this.calculateOffset(pathToReveal);\n        const node = pathToReveal[pathToReveal.length - 1];\n        const scrollTop = this.scrollContainer.scrollTop;\n        const scrollBottom = scrollTop + this.scrollContainer.offsetHeight;\n        if (height >= scrollTop && height < scrollBottom) {\n            return Promise.resolve(node);\n        }\n        const scrollGap = 40;\n        this.scrollContainer.scrollTop = Math.max(0, height - scrollGap);\n        return new Promise(resolve => {\n            console.assert(!this.scrollToResolveCallback);\n            this.scrollToResolveCallback = resolve.bind(null, node);\n            // Still resolve the promise if it does not scroll for some reason.\n            this.scrollContainer.window().requestAnimationFrame(() => {\n                if (!this.scrollToResolveCallback) {\n                    return;\n                }\n                this.scrollToResolveCallback();\n                this.scrollToResolveCallback = null;\n            });\n        });\n    }\n    calculateOffset(pathToReveal) {\n        let parentNode = this.rootNode();\n        let height = 0;\n        if (pathToReveal.length === 0) {\n            return 0;\n        }\n        for (let i = 0; i < pathToReveal.length; ++i) {\n            const node = pathToReveal[i];\n            const children = this.allChildren(parentNode);\n            for (let j = 0; j < children.length; ++j) {\n                const child = children[j];\n                if (node === child) {\n                    height += node.nodeSelfHeight();\n                    break;\n                }\n                height += this.nodeHeight(child);\n            }\n            parentNode = node;\n        }\n        return height - pathToReveal[pathToReveal.length - 1].nodeSelfHeight();\n    }\n    allChildren(parent) {\n        const children = adjacencyMap.get(parent) || [];\n        if (!adjacencyMap.has(parent)) {\n            adjacencyMap.set(parent, children);\n        }\n        return children;\n    }\n    appendNode(parent, node) {\n        this.allChildren(parent).push(node);\n    }\n    insertChild(parent, node, index) {\n        this.allChildren(parent).splice(index, 0, node);\n    }\n    removeChildByIndex(parent, index) {\n        this.allChildren(parent).splice(index, 1);\n    }\n    removeAllChildren(parent) {\n        adjacencyMap.delete(parent);\n    }\n    removeTopLevelNodes() {\n        this.disposeAllNodes();\n        this.rootNode().removeChildren();\n        this.removeAllChildren(this.rootNode());\n    }\n    isScrolledIntoView(element) {\n        const viewportTop = this.scrollContainer.scrollTop;\n        const viewportBottom = viewportTop + this.scrollContainer.clientHeight;\n        const elemTop = element.offsetTop;\n        const elemBottom = elemTop + element.offsetHeight;\n        return elemBottom <= viewportBottom && elemTop >= viewportTop;\n    }\n    onResize() {\n        super.onResize();\n        this.updateVisibleNodes(false);\n    }\n    onScroll(_event) {\n        this.updateVisibleNodes(false);\n        if (this.scrollToResolveCallback) {\n            this.scrollToResolveCallback();\n            this.scrollToResolveCallback = null;\n        }\n    }\n}\nexport class HeapSnapshotContainmentDataGrid extends HeapSnapshotSortableDataGrid {\n    constructor(heapProfilerModel, dataDisplayDelegate, displayName, columns) {\n        columns =\n            columns || [\n                { id: 'object', title: i18nString(UIStrings.object), disclosure: true, sortable: true },\n                { id: 'distance', title: i18nString(UIStrings.distance), width: '70px', sortable: true, fixedWidth: true },\n                {\n                    id: 'shallowSize',\n                    title: i18nString(UIStrings.shallowSize),\n                    width: '110px',\n                    sortable: true,\n                    fixedWidth: true,\n                },\n                {\n                    id: 'retainedSize',\n                    title: i18nString(UIStrings.retainedSize),\n                    width: '110px',\n                    sortable: true,\n                    fixedWidth: true,\n                    sort: DataGrid.DataGrid.Order.Descending,\n                },\n            ];\n        const dataGridParameters = { displayName, columns };\n        super(heapProfilerModel, dataDisplayDelegate, dataGridParameters);\n    }\n    async setDataSource(snapshot, nodeIndex, nodeId) {\n        this.snapshot = snapshot;\n        const node = new HeapSnapshotModel.HeapSnapshotModel.Node(nodeId ?? -1, 'root', 0, nodeIndex || snapshot.rootNodeIndex, 0, 0, '');\n        this.setRootNode(this.createRootNode(snapshot, node));\n        void this.rootNode().sort();\n    }\n    createRootNode(snapshot, node) {\n        const fakeEdge = new HeapSnapshotModel.HeapSnapshotModel.Edge('', node, '', -1);\n        return new HeapSnapshotObjectNode(this, snapshot, fakeEdge, null);\n    }\n    sortingChanged() {\n        const rootNode = this.rootNode();\n        if (rootNode.hasChildren()) {\n            void rootNode.sort();\n        }\n    }\n}\nexport class HeapSnapshotRetainmentDataGrid extends HeapSnapshotContainmentDataGrid {\n    resetRetainersButton;\n    constructor(heapProfilerModel, dataDisplayDelegate) {\n        const columns = [\n            { id: 'object', title: i18nString(UIStrings.object), disclosure: true, sortable: true },\n            {\n                id: 'distance',\n                title: i18nString(UIStrings.distance),\n                width: '70px',\n                sortable: true,\n                fixedWidth: true,\n                sort: DataGrid.DataGrid.Order.Ascending,\n            },\n            { id: 'shallowSize', title: i18nString(UIStrings.shallowSize), width: '110px', sortable: true, fixedWidth: true },\n            { id: 'retainedSize', title: i18nString(UIStrings.retainedSize), width: '110px', sortable: true, fixedWidth: true },\n        ];\n        super(heapProfilerModel, dataDisplayDelegate, i18nString(UIStrings.heapSnapshotRetainment), columns);\n    }\n    createRootNode(snapshot, node) {\n        const fakeEdge = new HeapSnapshotModel.HeapSnapshotModel.Edge('', node, '', -1);\n        return new HeapSnapshotRetainingObjectNode(this, snapshot, fakeEdge, null);\n    }\n    sortFields(sortColumn, sortAscending) {\n        switch (sortColumn) {\n            case 'object':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', sortAscending, 'count', false);\n            case 'count':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('count', sortAscending, 'name', true);\n            case 'shallowSize':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('shallowSize', sortAscending, 'name', true);\n            case 'retainedSize':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('retainedSize', sortAscending, 'name', true);\n            case 'distance':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('distance', sortAscending, 'name', true);\n            default:\n                throw new Error(`Unknown column ${sortColumn}`);\n        }\n    }\n    reset() {\n        this.rootNode().removeChildren();\n        this.resetSortingCache();\n    }\n    updateResetButtonVisibility() {\n        void this.snapshot?.areNodesIgnoredInRetainersView().then(value => {\n            this.resetRetainersButton?.setVisible(value);\n        });\n    }\n    async setDataSource(snapshot, nodeIndex, nodeId) {\n        await super.setDataSource(snapshot, nodeIndex, nodeId);\n        this.rootNode().expand();\n        this.updateResetButtonVisibility();\n    }\n    async dataSourceChanged() {\n        this.reset();\n        await this.rootNode().sort();\n        this.rootNode().expand();\n        this.updateResetButtonVisibility();\n    }\n}\n// TODO(crbug.com/1228674): Remove this enum, it is only used in web tests.\nexport var HeapSnapshotRetainmentDataGridEvents;\n(function (HeapSnapshotRetainmentDataGridEvents) {\n    /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n    HeapSnapshotRetainmentDataGridEvents[\"ExpandRetainersComplete\"] = \"ExpandRetainersComplete\";\n    /* eslint-enable @typescript-eslint/naming-convention */\n})(HeapSnapshotRetainmentDataGridEvents || (HeapSnapshotRetainmentDataGridEvents = {}));\nexport class HeapSnapshotConstructorsDataGrid extends HeapSnapshotViewportDataGrid {\n    profileIndex;\n    objectIdToSelect;\n    nextRequestedFilter;\n    lastFilter;\n    filterInProgress;\n    constructor(heapProfilerModel, dataDisplayDelegate) {\n        const columns = [\n            { id: 'object', title: i18nString(UIStrings.constructorString), disclosure: true, sortable: true },\n            { id: 'distance', title: i18nString(UIStrings.distance), width: '70px', sortable: true, fixedWidth: true },\n            { id: 'shallowSize', title: i18nString(UIStrings.shallowSize), width: '110px', sortable: true, fixedWidth: true },\n            {\n                id: 'retainedSize',\n                title: i18nString(UIStrings.retainedSize),\n                width: '110px',\n                sort: DataGrid.DataGrid.Order.Descending,\n                sortable: true,\n                fixedWidth: true,\n            },\n        ];\n        super(heapProfilerModel, dataDisplayDelegate, { displayName: i18nString(UIStrings.heapSnapshotConstructors).toString(), columns });\n        // clang-format on\n        this.profileIndex = -1;\n        this.objectIdToSelect = null;\n        this.nextRequestedFilter = null;\n    }\n    sortFields(sortColumn, sortAscending) {\n        switch (sortColumn) {\n            case 'object':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', sortAscending, 'retainedSize', false);\n            case 'distance':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('distance', sortAscending, 'retainedSize', false);\n            case 'shallowSize':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('shallowSize', sortAscending, 'name', true);\n            case 'retainedSize':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('retainedSize', sortAscending, 'name', true);\n            default:\n                throw new Error(`Unknown column ${sortColumn}`);\n        }\n    }\n    async revealObjectByHeapSnapshotId(id) {\n        if (!this.snapshot) {\n            this.objectIdToSelect = id;\n            return null;\n        }\n        const className = await this.snapshot.nodeClassName(parseInt(id, 10));\n        if (!className) {\n            return null;\n        }\n        const parent = this.topLevelNodes().find(classNode => classNode.name === className);\n        if (!parent) {\n            return null;\n        }\n        const nodes = await parent.populateNodeBySnapshotObjectId(parseInt(id, 10));\n        return nodes.length ? this.revealTreeNode(nodes) : null;\n    }\n    clear() {\n        this.nextRequestedFilter = null;\n        this.lastFilter = null;\n        this.removeTopLevelNodes();\n    }\n    async setDataSource(snapshot, _nodeIndex) {\n        this.snapshot = snapshot;\n        if (this.profileIndex === -1) {\n            void this.populateChildren();\n        }\n        if (this.objectIdToSelect) {\n            void this.revealObjectByHeapSnapshotId(this.objectIdToSelect);\n            this.objectIdToSelect = null;\n        }\n    }\n    setSelectionRange(minNodeId, maxNodeId) {\n        this.nodeFilterInternal = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter(minNodeId, maxNodeId);\n        void this.populateChildren(this.nodeFilterInternal);\n    }\n    setAllocationNodeId(allocationNodeId) {\n        this.nodeFilterInternal = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter();\n        this.nodeFilterInternal.allocationNodeId = allocationNodeId;\n        void this.populateChildren(this.nodeFilterInternal);\n    }\n    aggregatesReceived(nodeFilter, aggregates) {\n        this.filterInProgress = null;\n        if (this.nextRequestedFilter && this.snapshot) {\n            void this.snapshot.aggregatesWithFilter(this.nextRequestedFilter)\n                .then(this.aggregatesReceived.bind(this, this.nextRequestedFilter));\n            this.filterInProgress = this.nextRequestedFilter;\n            this.nextRequestedFilter = null;\n        }\n        this.removeTopLevelNodes();\n        this.resetSortingCache();\n        for (const constructor in aggregates) {\n            this.appendNode(this.rootNode(), new HeapSnapshotConstructorNode(this, constructor, aggregates[constructor], nodeFilter));\n        }\n        this.sortingChanged();\n        this.lastFilter = nodeFilter;\n    }\n    async populateChildren(maybeNodeFilter) {\n        const nodeFilter = maybeNodeFilter || new HeapSnapshotModel.HeapSnapshotModel.NodeFilter();\n        if (this.filterInProgress) {\n            this.nextRequestedFilter = this.filterInProgress.equals(nodeFilter) ? null : nodeFilter;\n            return;\n        }\n        if (this.lastFilter && this.lastFilter.equals(nodeFilter)) {\n            return;\n        }\n        this.filterInProgress = nodeFilter;\n        if (this.snapshot) {\n            const aggregates = await this.snapshot.aggregatesWithFilter(nodeFilter);\n            this.aggregatesReceived(nodeFilter, aggregates);\n        }\n    }\n    filterSelectIndexChanged(profiles, profileIndex, filterName) {\n        this.profileIndex = profileIndex;\n        this.nodeFilterInternal = undefined;\n        if (profileIndex !== -1) {\n            const minNodeId = profileIndex > 0 ? profiles[profileIndex - 1].maxJSObjectId : 0;\n            const maxNodeId = profiles[profileIndex].maxJSObjectId;\n            this.nodeFilterInternal = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter(minNodeId, maxNodeId);\n        }\n        else if (filterName !== undefined) {\n            this.nodeFilterInternal = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter();\n            this.nodeFilterInternal.filterName = filterName;\n        }\n        void this.populateChildren(this.nodeFilterInternal);\n    }\n}\nexport class HeapSnapshotDiffDataGrid extends HeapSnapshotViewportDataGrid {\n    baseSnapshot;\n    constructor(heapProfilerModel, dataDisplayDelegate) {\n        const columns = [\n            { id: 'object', title: i18nString(UIStrings.constructorString), disclosure: true, sortable: true },\n            { id: 'addedCount', title: i18nString(UIStrings.New), width: '75px', sortable: true, fixedWidth: true },\n            { id: 'removedCount', title: i18nString(UIStrings.Deleted), width: '75px', sortable: true, fixedWidth: true },\n            { id: 'countDelta', title: i18nString(UIStrings.Delta), width: '65px', sortable: true, fixedWidth: true },\n            {\n                id: 'addedSize',\n                title: i18nString(UIStrings.allocSize),\n                width: '75px',\n                sortable: true,\n                fixedWidth: true,\n                sort: DataGrid.DataGrid.Order.Descending,\n            },\n            { id: 'removedSize', title: i18nString(UIStrings.freedSize), width: '75px', sortable: true, fixedWidth: true },\n            { id: 'sizeDelta', title: i18nString(UIStrings.sizeDelta), width: '75px', sortable: true, fixedWidth: true },\n        ];\n        super(heapProfilerModel, dataDisplayDelegate, { displayName: i18nString(UIStrings.heapSnapshotDiff).toString(), columns });\n    }\n    defaultPopulateCount() {\n        return 50;\n    }\n    sortFields(sortColumn, sortAscending) {\n        switch (sortColumn) {\n            case 'object':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', sortAscending, 'count', false);\n            case 'addedCount':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('addedCount', sortAscending, 'name', true);\n            case 'removedCount':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('removedCount', sortAscending, 'name', true);\n            case 'countDelta':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('countDelta', sortAscending, 'name', true);\n            case 'addedSize':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('addedSize', sortAscending, 'name', true);\n            case 'removedSize':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('removedSize', sortAscending, 'name', true);\n            case 'sizeDelta':\n                return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('sizeDelta', sortAscending, 'name', true);\n            default:\n                throw new Error(`Unknown column ${sortColumn}`);\n        }\n    }\n    async setDataSource(snapshot, _nodeIndex) {\n        this.snapshot = snapshot;\n    }\n    setBaseDataSource(baseSnapshot) {\n        this.baseSnapshot = baseSnapshot;\n        this.removeTopLevelNodes();\n        this.resetSortingCache();\n        if (this.baseSnapshot === this.snapshot) {\n            this.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.SortingComplete);\n            return;\n        }\n        void this.populateChildren();\n    }\n    async populateChildren() {\n        if (this.snapshot === null || this.baseSnapshot === undefined || this.baseSnapshot.uid === undefined) {\n            throw new Error('Data sources have not been set correctly');\n        }\n        // Two snapshots live in different workers isolated from each other. That is why\n        // we first need to collect information about the nodes in the first snapshot and\n        // then pass it to the second snapshot to calclulate the diff.\n        const interfaceDefinitions = await this.snapshot.interfaceDefinitions();\n        const aggregatesForDiff = await this.baseSnapshot.aggregatesForDiff(interfaceDefinitions);\n        const diffByClassName = await this.snapshot.calculateSnapshotDiff(this.baseSnapshot.uid, aggregatesForDiff);\n        for (const className in diffByClassName) {\n            const diff = diffByClassName[className];\n            this.appendNode(this.rootNode(), new HeapSnapshotDiffNode(this, className, diff));\n        }\n        this.sortingChanged();\n    }\n}\nexport class AllocationDataGrid extends HeapSnapshotViewportDataGrid {\n    linkifierInternal;\n    topNodes;\n    constructor(heapProfilerModel, dataDisplayDelegate) {\n        const columns = [\n            { id: 'liveCount', title: i18nString(UIStrings.liveCount), width: '75px', sortable: true, fixedWidth: true },\n            { id: 'count', title: i18nString(UIStrings.count), width: '65px', sortable: true, fixedWidth: true },\n            { id: 'liveSize', title: i18nString(UIStrings.liveSize), width: '75px', sortable: true, fixedWidth: true },\n            {\n                id: 'size',\n                title: i18nString(UIStrings.size),\n                width: '75px',\n                sortable: true,\n                fixedWidth: true,\n                sort: DataGrid.DataGrid.Order.Descending,\n            },\n            { id: 'name', title: i18nString(UIStrings.function), disclosure: true, sortable: true },\n        ];\n        super(heapProfilerModel, dataDisplayDelegate, { displayName: i18nString(UIStrings.allocation).toString(), columns });\n        // clang-format on\n        this.linkifierInternal = new Components.Linkifier.Linkifier();\n    }\n    get linkifier() {\n        return this.linkifierInternal;\n    }\n    dispose() {\n        this.linkifierInternal.reset();\n    }\n    async setDataSource(snapshot, _nodeIndex) {\n        this.snapshot = snapshot;\n        this.topNodes = await this.snapshot.allocationTracesTops();\n        this.populateChildren();\n    }\n    populateChildren() {\n        this.removeTopLevelNodes();\n        const root = this.rootNode();\n        const tops = this.topNodes || [];\n        for (const top of tops) {\n            this.appendNode(root, new AllocationGridNode(this, top));\n        }\n        this.updateVisibleNodes(true);\n    }\n    sortingChanged() {\n        if (this.topNodes !== undefined) {\n            this.topNodes.sort(this.createComparator());\n            this.rootNode().removeChildren();\n            this.populateChildren();\n        }\n    }\n    createComparator() {\n        const fieldName = this.sortColumnId();\n        const compareResult = (this.sortOrder() === DataGrid.DataGrid.Order.Ascending) ? +1 : -1;\n        function compare(a, b) {\n            // @ts-ignore\n            if (a[fieldName] > b[fieldName]) {\n                return compareResult;\n            }\n            // @ts-ignore\n            if (a[fieldName] < b[fieldName]) {\n                return -compareResult;\n            }\n            return 0;\n        }\n        return compare;\n    }\n}\n//# sourceMappingURL=HeapSnapshotDataGrids.js.map","/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nconst UIStrings = {\n    /**\n     *@description Text in Heap Snapshot Proxy of a profiler tool\n     *@example {functionName} PH1\n     */\n    anErrorOccurredWhenACallToMethod: 'An error occurred when a call to method \\'\\'{PH1}\\'\\' was requested',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapSnapshotProxy.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class HeapSnapshotWorkerProxy extends Common.ObjectWrapper.ObjectWrapper {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    eventHandler;\n    nextObjectId;\n    nextCallId;\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callbacks;\n    previousCallbacks;\n    worker;\n    interval;\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(eventHandler) {\n        super();\n        this.eventHandler = eventHandler;\n        this.nextObjectId = 1;\n        this.nextCallId = 1;\n        this.callbacks = new Map();\n        this.previousCallbacks = new Set();\n        this.worker = Common.Worker.WorkerWrapper.fromURL(new URL('../../entrypoints/heap_snapshot_worker/heap_snapshot_worker-entrypoint.js', import.meta.url));\n        this.worker.onmessage = this.messageReceived.bind(this);\n    }\n    createLoader(profileUid, snapshotReceivedCallback) {\n        const objectId = this.nextObjectId++;\n        const proxy = new HeapSnapshotLoaderProxy(this, objectId, profileUid, snapshotReceivedCallback);\n        this.postMessage({\n            callId: this.nextCallId++,\n            disposition: 'createLoader',\n            objectId,\n        });\n        return proxy;\n    }\n    dispose() {\n        this.worker.terminate();\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n    disposeObject(objectId) {\n        this.postMessage({ callId: this.nextCallId++, disposition: 'dispose', objectId });\n    }\n    evaluateForTest(script, callback) {\n        const callId = this.nextCallId++;\n        this.callbacks.set(callId, callback);\n        this.postMessage({ callId, disposition: 'evaluateForTest', source: script });\n    }\n    callFactoryMethod(callback, objectId, methodName, proxyConstructor, ...methodArguments) {\n        const callId = this.nextCallId++;\n        const newObjectId = this.nextObjectId++;\n        if (callback) {\n            this.callbacks.set(callId, remoteResult => {\n                callback(remoteResult ? new proxyConstructor(this, newObjectId) : null);\n            });\n            this.postMessage({\n                callId,\n                disposition: 'factory',\n                objectId,\n                methodName,\n                methodArguments,\n                newObjectId,\n            });\n            return null;\n        }\n        this.postMessage({\n            callId,\n            disposition: 'factory',\n            objectId,\n            methodName,\n            methodArguments,\n            newObjectId,\n        });\n        return new proxyConstructor(this, newObjectId);\n    }\n    callMethod(callback, objectId, methodName, ...methodArguments) {\n        const callId = this.nextCallId++;\n        if (callback) {\n            this.callbacks.set(callId, callback);\n        }\n        this.postMessage({\n            callId,\n            disposition: 'method',\n            objectId,\n            methodName,\n            methodArguments,\n        });\n    }\n    startCheckingForLongRunningCalls() {\n        if (this.interval) {\n            return;\n        }\n        this.checkLongRunningCalls();\n        this.interval = window.setInterval(this.checkLongRunningCalls.bind(this), 300);\n    }\n    checkLongRunningCalls() {\n        for (const callId of this.previousCallbacks) {\n            if (!this.callbacks.has(callId)) {\n                this.previousCallbacks.delete(callId);\n            }\n        }\n        const hasLongRunningCalls = Boolean(this.previousCallbacks.size);\n        this.dispatchEventToListeners(\"Wait\" /* HeapSnapshotWorkerProxy.Events.WAIT */, hasLongRunningCalls);\n        for (const callId of this.callbacks.keys()) {\n            this.previousCallbacks.add(callId);\n        }\n    }\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    messageReceived(event) {\n        const data = event.data;\n        if (data.eventName) {\n            if (this.eventHandler) {\n                this.eventHandler(data.eventName, data.data);\n            }\n            return;\n        }\n        if (data.error) {\n            if (data.errorMethodName) {\n                Common.Console.Console.instance().error(i18nString(UIStrings.anErrorOccurredWhenACallToMethod, { PH1: data.errorMethodName }));\n            }\n            Common.Console.Console.instance().error(data['errorCallStack']);\n            this.callbacks.delete(data.callId);\n            return;\n        }\n        const callback = this.callbacks.get(data.callId);\n        if (!callback) {\n            return;\n        }\n        this.callbacks.delete(data.callId);\n        callback(data.result);\n    }\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    postMessage(message) {\n        this.worker.postMessage(message);\n    }\n}\nexport class HeapSnapshotProxyObject {\n    worker;\n    objectId;\n    constructor(worker, objectId) {\n        this.worker = worker;\n        this.objectId = objectId;\n    }\n    dispose() {\n        this.worker.disposeObject(this.objectId);\n    }\n    disposeWorker() {\n        this.worker.dispose();\n    }\n    callFactoryMethod(methodName, proxyConstructor, ...args) {\n        return this.worker.callFactoryMethod(null, String(this.objectId), methodName, proxyConstructor, ...args);\n    }\n    callFactoryMethodPromise(methodName, proxyConstructor, ...args) {\n        return new Promise(resolve => this.worker.callFactoryMethod(resolve, String(this.objectId), methodName, proxyConstructor, ...args));\n    }\n    callMethodPromise(methodName, ...args) {\n        return new Promise(resolve => this.worker.callMethod(resolve, String(this.objectId), methodName, ...args));\n    }\n}\nexport class HeapSnapshotLoaderProxy extends HeapSnapshotProxyObject {\n    profileUid;\n    snapshotReceivedCallback;\n    constructor(worker, objectId, profileUid, snapshotReceivedCallback) {\n        super(worker, objectId);\n        this.profileUid = profileUid;\n        this.snapshotReceivedCallback = snapshotReceivedCallback;\n    }\n    async write(chunk) {\n        await this.callMethodPromise('write', chunk);\n    }\n    async close() {\n        await this.callMethodPromise('close');\n        const snapshotProxy = await this.callFactoryMethodPromise('buildSnapshot', HeapSnapshotProxy);\n        this.dispose();\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n        // @ts-expect-error\n        snapshotProxy.setProfileUid(this.profileUid);\n        await snapshotProxy.updateStaticData();\n        this.snapshotReceivedCallback(snapshotProxy);\n    }\n}\nexport class HeapSnapshotProxy extends HeapSnapshotProxyObject {\n    staticData;\n    profileUid;\n    constructor(worker, objectId) {\n        super(worker, objectId);\n        this.staticData = null;\n    }\n    search(searchConfig, filter) {\n        return this.callMethodPromise('search', searchConfig, filter);\n    }\n    interfaceDefinitions() {\n        return this.callMethodPromise('interfaceDefinitions');\n    }\n    aggregatesWithFilter(filter) {\n        return this.callMethodPromise('aggregatesWithFilter', filter);\n    }\n    aggregatesForDiff(interfaceDefinitions) {\n        return this.callMethodPromise('aggregatesForDiff', interfaceDefinitions);\n    }\n    calculateSnapshotDiff(baseSnapshotId, baseSnapshotAggregates) {\n        return this.callMethodPromise('calculateSnapshotDiff', baseSnapshotId, baseSnapshotAggregates);\n    }\n    nodeClassName(snapshotObjectId) {\n        return this.callMethodPromise('nodeClassName', snapshotObjectId);\n    }\n    createEdgesProvider(nodeIndex) {\n        return this.callFactoryMethod('createEdgesProvider', HeapSnapshotProviderProxy, nodeIndex);\n    }\n    createRetainingEdgesProvider(nodeIndex) {\n        return this.callFactoryMethod('createRetainingEdgesProvider', HeapSnapshotProviderProxy, nodeIndex);\n    }\n    createAddedNodesProvider(baseSnapshotId, className) {\n        return this.callFactoryMethod('createAddedNodesProvider', HeapSnapshotProviderProxy, baseSnapshotId, className);\n    }\n    createDeletedNodesProvider(nodeIndexes) {\n        return this.callFactoryMethod('createDeletedNodesProvider', HeapSnapshotProviderProxy, nodeIndexes);\n    }\n    createNodesProvider(filter) {\n        return this.callFactoryMethod('createNodesProvider', HeapSnapshotProviderProxy, filter);\n    }\n    createNodesProviderForClass(className, nodeFilter) {\n        return this.callFactoryMethod('createNodesProviderForClass', HeapSnapshotProviderProxy, className, nodeFilter);\n    }\n    allocationTracesTops() {\n        return this.callMethodPromise('allocationTracesTops');\n    }\n    allocationNodeCallers(nodeId) {\n        return this.callMethodPromise('allocationNodeCallers', nodeId);\n    }\n    allocationStack(nodeIndex) {\n        return this.callMethodPromise('allocationStack', nodeIndex);\n    }\n    dispose() {\n        throw new Error('Should never be called');\n    }\n    get nodeCount() {\n        if (!this.staticData) {\n            return 0;\n        }\n        return this.staticData.nodeCount;\n    }\n    get rootNodeIndex() {\n        if (!this.staticData) {\n            return 0;\n        }\n        return this.staticData.rootNodeIndex;\n    }\n    async updateStaticData() {\n        this.staticData = await this.callMethodPromise('updateStaticData');\n    }\n    getStatistics() {\n        return this.callMethodPromise('getStatistics');\n    }\n    getLocation(nodeIndex) {\n        return this.callMethodPromise('getLocation', nodeIndex);\n    }\n    getSamples() {\n        return this.callMethodPromise('getSamples');\n    }\n    ignoreNodeInRetainersView(nodeIndex) {\n        return this.callMethodPromise('ignoreNodeInRetainersView', nodeIndex);\n    }\n    unignoreNodeInRetainersView(nodeIndex) {\n        return this.callMethodPromise('unignoreNodeInRetainersView', nodeIndex);\n    }\n    unignoreAllNodesInRetainersView() {\n        return this.callMethodPromise('unignoreAllNodesInRetainersView');\n    }\n    areNodesIgnoredInRetainersView() {\n        return this.callMethodPromise('areNodesIgnoredInRetainersView');\n    }\n    get totalSize() {\n        if (!this.staticData) {\n            return 0;\n        }\n        return this.staticData.totalSize;\n    }\n    get uid() {\n        return this.profileUid;\n    }\n    setProfileUid(profileUid) {\n        this.profileUid = profileUid;\n    }\n    maxJSObjectId() {\n        if (!this.staticData) {\n            return 0;\n        }\n        return this.staticData.maxJSObjectId;\n    }\n}\nexport class HeapSnapshotProviderProxy extends HeapSnapshotProxyObject {\n    constructor(worker, objectId) {\n        super(worker, objectId);\n    }\n    nodePosition(snapshotObjectId) {\n        return this.callMethodPromise('nodePosition', snapshotObjectId);\n    }\n    isEmpty() {\n        return this.callMethodPromise('isEmpty');\n    }\n    serializeItemsRange(startPosition, endPosition) {\n        return this.callMethodPromise('serializeItemsRange', startPosition, endPosition);\n    }\n    async sortAndRewind(comparator) {\n        await this.callMethodPromise('sortAndRewind', comparator);\n    }\n}\n//# sourceMappingURL=HeapSnapshotProxy.js.map","// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nexport const UIStrings = {\n    /**\n     *@description Text to indicate the status of a heap snapshot in the Performance Pane\n     */\n    buildingEdgeIndexes: 'Building edge indexes…',\n    /**\n     *@description Text to indicate the status of a heap snapshot in the Performance Pane\n     */\n    buildingRetainers: 'Building retainers…',\n    /**\n     *@description Text to indicate the status of a heap snapshot in the Performance Pane\n     */\n    propagatingDomState: 'Propagating DOM state…',\n    /**\n     * @description Text to indicate the status of a heap snapshot in the Performance Pane. Flag here\n     * refers to the programming concept for a piece of binary data (yes/no).\n     */\n    calculatingNodeFlags: 'Calculating node flags…',\n    /**\n     *@description Text to indicate the status of a heap snapshot in the Performance Pane\n     */\n    calculatingDistances: 'Calculating distances…',\n    /**\n     *@description Text to indicate the status of a heap snapshot in the Performance Pane\n     */\n    calculatingShallowSizes: 'Calculating shallow sizes…',\n    /**\n     *@description Text to indicate the status of a heap snapshot in the Performance Pane\n     */\n    calculatingRetainedSizes: 'Calculating retained sizes…',\n    /**\n     *@description Text to indicate the status of a heap snapshot in the Performance Pane\n     */\n    buildingDominatedNodes: 'Building dominated nodes…',\n    /**\n     *@description Text to indicate the status of a heap snapshot in the Performance Pane.\n     * During this step, names are assigned to objects in the heap snapshot.\n     */\n    calculatingObjectNames: 'Calculating object names…',\n    /**\n     *@description Text to indicate the status of a heap snapshot in the Performance Pane\n     */\n    calculatingStatistics: 'Calculating statistics…',\n    /**\n     *@description Text to indicate the status of a heap snapshot in the Performance Pane\n     */\n    calculatingSamples: 'Calculating samples…',\n    /**\n     *@description Text to indicate the status of a heap snapshot in the Performance Pane\n     */\n    buildingLocations: 'Building locations…',\n    /**\n     *@description Text to indicate the status of a heap snapshot in the Performance Pane\n     */\n    finishedProcessing: 'Finished processing.',\n    /**\n     *@description Text to indicate the status of a heap snapshot in the Performance Pane\n     */\n    buildingAllocationStatistics: 'Building allocation statistics…',\n    /**\n     *@description Text to indicate the status of a heap snapshot in the Performance Pane\n     */\n    done: 'Done',\n    /**\n     *@description Text in Heap Snapshot Loader of the Memory panel when taking a heap snapshot\n     */\n    processingSnapshot: 'Processing snapshot…',\n    /**\n     *@description Text to indicate the status of a heap snapshot in the Performance Pane\n     */\n    parsingStrings: 'Parsing strings…',\n    /**\n     *@description Text in Heap Snapshot Loader of the Memory panel when taking a heap snapshot\n     */\n    loadingSnapshotInfo: 'Loading snapshot info…',\n    /**\n     *@description Text in Heap Snapshot Loader of the Memory panel when taking a heap snapshot\n     *@example {38} PH1\n     */\n    loadingNodesD: 'Loading nodes… {PH1}%',\n    /**\n     *@description Text in Heap Snapshot Loader of the Memory panel when taking a heap snapshot\n     *@example {30} PH1\n     */\n    loadingEdgesD: 'Loading edges… {PH1}%',\n    /**\n     *@description Text in Heap Snapshot Loader of the Memory panel when taking a heap snapshot\n     *@example {30} PH1\n     */\n    loadingAllocationTracesD: 'Loading allocation traces… {PH1}%',\n    /**\n     *@description Text in Heap Snapshot Loader of the Memory panel when taking a heap snapshot\n     */\n    loadingSamples: 'Loading samples…',\n    /**\n     *@description Text in Heap Snapshot Loader of the Memory panel when taking a heap snapshot\n     */\n    loadingLocations: 'Loading locations…',\n    /**\n     *@description Text in Heap Snapshot Loader of the Memory panel when taking a heap snapshot\n     */\n    loadingStrings: 'Loading strings…',\n};\n//# sourceMappingURL=ModuleUIStrings.js.map","/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as HeapSnapshotModel from '../../models/heap_snapshot_model/heap_snapshot_model.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as ObjectUI from '../../ui/legacy/components/object_ui/object_ui.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport { AllocationDataGrid, HeapSnapshotConstructorsDataGrid, HeapSnapshotContainmentDataGrid, HeapSnapshotDiffDataGrid, HeapSnapshotRetainmentDataGrid, HeapSnapshotSortableDataGridEvents, } from './HeapSnapshotDataGrids.js';\nimport { HeapSnapshotGenericObjectNode, } from './HeapSnapshotGridNodes.js';\nimport { HeapSnapshotWorkerProxy } from './HeapSnapshotProxy.js';\nimport { HeapTimelineOverview, Samples } from './HeapTimelineOverview.js';\nimport * as ModuleUIStrings from './ModuleUIStrings.js';\nimport { ProfileHeader, ProfileType, } from './ProfileHeader.js';\nimport { ProfileSidebarTreeElement } from './ProfileSidebarTreeElement.js';\nimport { instance } from './ProfileTypeRegistry.js';\nconst UIStrings = {\n    /**\n     *@description Text to find an item\n     */\n    find: 'Find',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    containment: 'Containment',\n    /**\n     *@description Retaining paths title text content in Heap Snapshot View of a profiler tool\n     */\n    retainers: 'Retainers',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    allocationStack: 'Allocation stack',\n    /**\n     *@description Screen reader label for a select box that chooses the perspective in the Memory panel when vieweing a Heap Snapshot\n     */\n    perspective: 'Perspective',\n    /**\n     *@description Screen reader label for a select box that chooses the snapshot to use as a base in the Memory panel when vieweing a Heap Snapshot\n     */\n    baseSnapshot: 'Base snapshot',\n    /**\n     *@description Text to filter result items\n     */\n    filter: 'Filter',\n    /**\n     *@description Placeholder text in the filter bar to filter by JavaScript class names for a heap\n     */\n    filterByClass: 'Filter by class',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    code: 'Code',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    strings: 'Strings',\n    /**\n     *@description Label on a pie chart in the statistics view for the Heap Snapshot tool\n     */\n    jsArrays: 'JS arrays',\n    /**\n     *@description Label on a pie chart in the statistics view for the Heap Snapshot tool\n     */\n    typedArrays: 'Typed arrays',\n    /**\n     *@description Label on a pie chart in the statistics view for the Heap Snapshot tool\n     */\n    systemObjects: 'System objects',\n    /**\n     *@description The reported total size used in the selected time frame of the allocation sampling profile\n     *@example {3 MB} PH1\n     */\n    selectedSizeS: 'Selected size: {PH1}',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    allObjects: 'All objects',\n    /**\n     *@description Title in Heap Snapshot View of a profiler tool\n     *@example {Profile 2} PH1\n     */\n    objectsAllocatedBeforeS: 'Objects allocated before {PH1}',\n    /**\n     *@description Title in Heap Snapshot View of a profiler tool\n     *@example {Profile 1} PH1\n     *@example {Profile 2} PH2\n     */\n    objectsAllocatedBetweenSAndS: 'Objects allocated between {PH1} and {PH2}',\n    /**\n     *@description An option which will filter the heap snapshot to show only\n     * strings which exactly match at least one other string\n     */\n    duplicatedStrings: 'Duplicated strings',\n    /**\n     *@description An option which will filter the heap snapshot to show only\n     * detached DOM nodes and other objects kept alive by detached DOM nodes\n     */\n    objectsRetainedByDetachedDomNodes: 'Objects retained by detached DOM nodes',\n    /**\n     *@description An option which will filter the heap snapshot to show only\n     * objects kept alive by the DevTools console\n     */\n    objectsRetainedByConsole: 'Objects retained by DevTools Console',\n    /**\n     *@description Text for the summary view\n     */\n    summary: 'Summary',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    comparison: 'Comparison',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    allocation: 'Allocation',\n    /**\n     *@description Title text content in Heap Snapshot View of a profiler tool\n     */\n    liveObjects: 'Live objects',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    statistics: 'Statistics',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    heapSnapshot: 'Heap snapshot',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    takeHeapSnapshot: 'Take heap snapshot',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    heapSnapshots: 'Heap snapshots',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    heapSnapshotProfilesShowMemory: 'See the memory distribution of JavaScript objects and related DOM nodes',\n    /**\n     *@description Label for a checkbox in the heap snapshot view of the profiler tool. The \"heap snapshot\" contains the\n     * current state of JavaScript memory. With this checkbox enabled, the snapshot also includes internal data that is\n     * specific to Chrome (hence implementation-specific).\n     */\n    exposeInternals: 'Internals with implementation details',\n    /**\n     *@description Progress update that the profiler is capturing a snapshot of the heap\n     */\n    snapshotting: 'Snapshotting…',\n    /**\n     *@description Profile title in Heap Snapshot View of a profiler tool\n     *@example {1} PH1\n     */\n    snapshotD: 'Snapshot {PH1}',\n    /**\n     *@description Text for a percentage value\n     *@example {13.0} PH1\n     */\n    percentagePlaceholder: '{PH1}%',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    allocationInstrumentationOn: 'Allocations on timeline',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    stopRecordingHeapProfile: 'Stop recording heap profile',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    startRecordingHeapProfile: 'Start recording heap profile',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool.\n     * A stack trace is a list of functions that were called.\n     * This option turns on recording of a stack trace at each allocation.\n     * The recording itself is a somewhat expensive operation, so turning this option on, the website's performance may be affected negatively (e.g. everything becomes slower).\n     */\n    recordAllocationStacksExtra: 'Allocation stack traces (more overhead)',\n    /**\n     *@description Text in CPUProfile View of a profiler tool\n     */\n    recording: 'Recording…',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    allocationTimelines: 'Allocation timelines',\n    /**\n     *@description Description for the 'Allocation timeline' tool in the Memory panel.\n     */\n    AllocationTimelinesShowInstrumented: 'Record memory allocations over time and isolate memory leaks by selecting intervals with allocations that are still alive',\n    /**\n     *@description Text when something is loading\n     */\n    loading: 'Loading…',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     *@example {30} PH1\n     */\n    savingD: 'Saving… {PH1}%',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool\n     */\n    heapMemoryUsage: 'Heap memory usage',\n    /**\n     *@description Text of a DOM element in Heap Snapshot View of a profiler tool\n     */\n    stackWasNotRecordedForThisObject: 'Stack wasn\\'t recorded for this object because it had been allocated before this profile recording started.',\n    /**\n     *@description Text in Heap Snapshot View of a profiler tool.\n     * This text is on a button to undo all previous \"Ignore this retainer\" actions.\n     */\n    restoreIgnoredRetainers: 'Restore ignored retainers',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapSnapshotView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n// The way this is handled is to workaround the strings inside the heap_snapshot_worker\n// If strings are removed from inside the worker strings can be declared in this module\n// as any other.\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst moduleUIstr_ = i18n.i18n.registerUIStrings('panels/profiler/ModuleUIStrings.ts', ModuleUIStrings.UIStrings);\nconst moduleI18nString = i18n.i18n.getLocalizedString.bind(undefined, moduleUIstr_);\nexport class HeapSnapshotView extends UI.View.SimpleView {\n    searchResults;\n    profile;\n    linkifier;\n    parentDataDisplayDelegate;\n    searchableViewInternal;\n    splitWidget;\n    containmentDataGrid;\n    containmentWidget;\n    statisticsView;\n    constructorsDataGrid;\n    constructorsWidget;\n    diffDataGrid;\n    diffWidget;\n    allocationDataGrid;\n    allocationWidget;\n    allocationStackView;\n    tabbedPane;\n    retainmentDataGrid;\n    retainmentWidget;\n    objectDetailsView;\n    perspectives;\n    comparisonPerspective;\n    perspectiveSelect;\n    baseSelect;\n    filterSelect;\n    classNameFilter;\n    selectedSizeText;\n    resetRetainersButton;\n    popoverHelper;\n    currentPerspectiveIndex;\n    currentPerspective;\n    dataGrid;\n    searchThrottler;\n    baseProfile;\n    trackingOverviewGrid;\n    currentSearchResultIndex = -1;\n    currentQuery;\n    constructor(dataDisplayDelegate, profile) {\n        super(i18nString(UIStrings.heapSnapshot));\n        this.searchResults = [];\n        this.element.classList.add('heap-snapshot-view');\n        this.profile = profile;\n        this.linkifier = new Components.Linkifier.Linkifier();\n        const profileType = profile.profileType();\n        profileType.addEventListener(\"SnapshotReceived\" /* HeapSnapshotProfileTypeEvents.SNAPSHOT_RECEIVED */, this.onReceiveSnapshot, this);\n        profileType.addEventListener(\"remove-profile-header\" /* ProfileTypeEvents.REMOVE_PROFILE_HEADER */, this.onProfileHeaderRemoved, this);\n        const isHeapTimeline = profileType.id === TrackingHeapSnapshotProfileType.TypeId;\n        if (isHeapTimeline) {\n            this.createOverview();\n        }\n        const hasAllocationStacks = instance.trackingHeapSnapshotProfileType.recordAllocationStacksSetting().get();\n        this.parentDataDisplayDelegate = dataDisplayDelegate;\n        this.searchableViewInternal = new UI.SearchableView.SearchableView(this, null);\n        this.searchableViewInternal.setPlaceholder(i18nString(UIStrings.find), i18nString(UIStrings.find));\n        this.searchableViewInternal.show(this.element);\n        this.splitWidget = new UI.SplitWidget.SplitWidget(false, true, 'heap-snapshot-split-view-state', 200, 200);\n        this.splitWidget.show(this.searchableViewInternal.element);\n        const heapProfilerModel = profile.heapProfilerModel();\n        this.containmentDataGrid = new HeapSnapshotContainmentDataGrid(heapProfilerModel, this, /* displayName */ i18nString(UIStrings.containment));\n        this.containmentDataGrid.addEventListener(\"SelectedNode\" /* DataGrid.DataGrid.Events.SELECTED_NODE */, this.selectionChanged, this);\n        this.containmentWidget = this.containmentDataGrid.asWidget();\n        this.containmentWidget.setMinimumSize(50, 25);\n        this.statisticsView = new HeapSnapshotStatisticsView();\n        this.constructorsDataGrid = new HeapSnapshotConstructorsDataGrid(heapProfilerModel, this);\n        this.constructorsDataGrid.addEventListener(\"SelectedNode\" /* DataGrid.DataGrid.Events.SELECTED_NODE */, this.selectionChanged, this);\n        this.constructorsWidget = this.constructorsDataGrid.asWidget();\n        this.constructorsWidget.setMinimumSize(50, 25);\n        this.constructorsWidget.element.setAttribute('jslog', `${VisualLogging.pane('heap-snapshot.constructors-view').track({ resize: true })}`);\n        this.diffDataGrid = new HeapSnapshotDiffDataGrid(heapProfilerModel, this);\n        this.diffDataGrid.addEventListener(\"SelectedNode\" /* DataGrid.DataGrid.Events.SELECTED_NODE */, this.selectionChanged, this);\n        this.diffWidget = this.diffDataGrid.asWidget();\n        this.diffWidget.setMinimumSize(50, 25);\n        this.allocationDataGrid = null;\n        if (isHeapTimeline && hasAllocationStacks) {\n            this.allocationDataGrid = new AllocationDataGrid(heapProfilerModel, this);\n            this.allocationDataGrid.addEventListener(\"SelectedNode\" /* DataGrid.DataGrid.Events.SELECTED_NODE */, this.onSelectAllocationNode, this);\n            this.allocationWidget = this.allocationDataGrid.asWidget();\n            this.allocationWidget.setMinimumSize(50, 25);\n            this.allocationStackView = new HeapAllocationStackView(heapProfilerModel);\n            this.allocationStackView.setMinimumSize(50, 25);\n            this.tabbedPane = new UI.TabbedPane.TabbedPane();\n        }\n        this.retainmentDataGrid = new HeapSnapshotRetainmentDataGrid(heapProfilerModel, this);\n        this.retainmentWidget = this.retainmentDataGrid.asWidget();\n        this.retainmentWidget.setMinimumSize(50, 21);\n        this.retainmentWidget.element.classList.add('retaining-paths-view');\n        this.retainmentWidget.element.setAttribute('jslog', `${VisualLogging.pane('heap-snapshot.retaining-paths-view').track({ resize: true })}`);\n        let splitWidgetResizer;\n        if (this.allocationStackView) {\n            this.tabbedPane = new UI.TabbedPane.TabbedPane();\n            this.tabbedPane.appendTab('retainers', i18nString(UIStrings.retainers), this.retainmentWidget);\n            this.tabbedPane.appendTab('allocation-stack', i18nString(UIStrings.allocationStack), this.allocationStackView);\n            splitWidgetResizer = this.tabbedPane.headerElement();\n            this.objectDetailsView = this.tabbedPane;\n        }\n        else {\n            const retainmentViewHeader = document.createElement('div');\n            retainmentViewHeader.classList.add('heap-snapshot-view-resizer');\n            const retainingPathsTitleDiv = retainmentViewHeader.createChild('div', 'title');\n            retainmentViewHeader.createChild('div', 'verticalResizerIcon');\n            const retainingPathsTitle = retainingPathsTitleDiv.createChild('span');\n            retainingPathsTitle.textContent = i18nString(UIStrings.retainers);\n            splitWidgetResizer = retainmentViewHeader;\n            this.objectDetailsView = new UI.Widget.VBox();\n            this.objectDetailsView.element.appendChild(retainmentViewHeader);\n            this.retainmentWidget.show(this.objectDetailsView.element);\n        }\n        this.splitWidget.hideDefaultResizer();\n        this.splitWidget.installResizer(splitWidgetResizer);\n        this.retainmentDataGrid.addEventListener(\"SelectedNode\" /* DataGrid.DataGrid.Events.SELECTED_NODE */, this.inspectedObjectChanged, this);\n        this.retainmentDataGrid.reset();\n        this.perspectives = [];\n        this.comparisonPerspective = new ComparisonPerspective();\n        this.perspectives.push(new SummaryPerspective());\n        if (profile.profileType() !== instance.trackingHeapSnapshotProfileType) {\n            this.perspectives.push(this.comparisonPerspective);\n        }\n        this.perspectives.push(new ContainmentPerspective());\n        if (this.allocationWidget) {\n            this.perspectives.push(new AllocationPerspective());\n        }\n        this.perspectives.push(new StatisticsPerspective());\n        this.perspectiveSelect = new UI.Toolbar.ToolbarComboBox(this.onSelectedPerspectiveChanged.bind(this), i18nString(UIStrings.perspective), undefined, 'profiler.heap-snapshot-perspective');\n        this.updatePerspectiveOptions();\n        this.baseSelect = new UI.Toolbar.ToolbarComboBox(this.changeBase.bind(this), i18nString(UIStrings.baseSnapshot), undefined, 'profiler.heap-snapshot-base');\n        this.baseSelect.setVisible(false);\n        this.updateBaseOptions();\n        this.filterSelect = new UI.Toolbar.ToolbarComboBox(this.changeFilter.bind(this), i18nString(UIStrings.filter), undefined, 'profiler.heap-snapshot-filter');\n        this.filterSelect.setVisible(false);\n        this.updateFilterOptions();\n        this.classNameFilter = new UI.Toolbar.ToolbarFilter(i18nString(UIStrings.filterByClass));\n        this.classNameFilter.setVisible(false);\n        this.constructorsDataGrid.setNameFilter(this.classNameFilter);\n        this.diffDataGrid.setNameFilter(this.classNameFilter);\n        this.selectedSizeText = new UI.Toolbar.ToolbarText();\n        const restoreIgnoredRetainers = i18nString(UIStrings.restoreIgnoredRetainers);\n        this.resetRetainersButton =\n            new UI.Toolbar.ToolbarButton(restoreIgnoredRetainers, 'clear-list', restoreIgnoredRetainers);\n        this.resetRetainersButton.setVisible(false);\n        this.resetRetainersButton.addEventListener(\"Click\" /* UI.Toolbar.ToolbarButton.Events.CLICK */, async () => {\n            // The reset retainers button acts upon whichever snapshot is currently shown in the Retainers pane.\n            await this.retainmentDataGrid.snapshot?.unignoreAllNodesInRetainersView();\n            await this.retainmentDataGrid.dataSourceChanged();\n        });\n        this.retainmentDataGrid.resetRetainersButton = this.resetRetainersButton;\n        this.popoverHelper = new UI.PopoverHelper.PopoverHelper(this.element, this.getPopoverRequest.bind(this), 'profiler.heap-snapshot-object');\n        this.popoverHelper.setDisableOnClick(true);\n        this.popoverHelper.setHasPadding(true);\n        this.element.addEventListener('scroll', this.popoverHelper.hidePopover.bind(this.popoverHelper), true);\n        this.currentPerspectiveIndex = 0;\n        this.currentPerspective = this.perspectives[0];\n        this.currentPerspective.activate(this);\n        this.dataGrid = this.currentPerspective.masterGrid(this);\n        void this.populate();\n        this.searchThrottler = new Common.Throttler.Throttler(0);\n        for (const existingProfile of this.profiles()) {\n            existingProfile.addEventListener(\"ProfileTitleChanged\" /* ProfileHeaderEvents.PROFILE_TITLE_CHANGED */, this.updateControls, this);\n        }\n    }\n    createOverview() {\n        const profileType = this.profile.profileType();\n        this.trackingOverviewGrid = new HeapTimelineOverview();\n        this.trackingOverviewGrid.addEventListener(\"IdsRangeChanged\" /* Events.IDS_RANGE_CHANGED */, this.onIdsRangeChanged.bind(this));\n        if (!this.profile.fromFile() && profileType.profileBeingRecorded() === this.profile) {\n            profileType\n                .addEventListener(\"HeapStatsUpdate\" /* TrackingHeapSnapshotProfileTypeEvents.HEAP_STATS_UPDATE */, this.onHeapStatsUpdate, this);\n            profileType\n                .addEventListener(\"TrackingStopped\" /* TrackingHeapSnapshotProfileTypeEvents.TRACKING_STOPPED */, this.onStopTracking, this);\n            this.trackingOverviewGrid.start();\n        }\n    }\n    onStopTracking() {\n        const profileType = this.profile.profileType();\n        profileType.removeEventListener(\"HeapStatsUpdate\" /* TrackingHeapSnapshotProfileTypeEvents.HEAP_STATS_UPDATE */, this.onHeapStatsUpdate, this);\n        profileType.removeEventListener(\"TrackingStopped\" /* TrackingHeapSnapshotProfileTypeEvents.TRACKING_STOPPED */, this.onStopTracking, this);\n        if (this.trackingOverviewGrid) {\n            this.trackingOverviewGrid.stop();\n        }\n    }\n    onHeapStatsUpdate({ data: samples }) {\n        if (this.trackingOverviewGrid) {\n            this.trackingOverviewGrid.setSamples(samples);\n        }\n    }\n    searchableView() {\n        return this.searchableViewInternal;\n    }\n    showProfile(profile) {\n        return this.parentDataDisplayDelegate.showProfile(profile);\n    }\n    showObject(snapshotObjectId, perspectiveName) {\n        if (Number(snapshotObjectId) <= this.profile.maxJSObjectId) {\n            void this.selectLiveObject(perspectiveName, snapshotObjectId);\n        }\n        else {\n            this.parentDataDisplayDelegate.showObject(snapshotObjectId, perspectiveName);\n        }\n    }\n    async linkifyObject(nodeIndex) {\n        const heapProfilerModel = this.profile.heapProfilerModel();\n        // heapProfilerModel is null if snapshot was loaded from file\n        if (!heapProfilerModel) {\n            return null;\n        }\n        const location = await this.profile.getLocation(nodeIndex);\n        if (!location) {\n            return null;\n        }\n        const debuggerModel = heapProfilerModel.runtimeModel().debuggerModel();\n        const rawLocation = debuggerModel.createRawLocationByScriptId(String(location.scriptId), location.lineNumber, location.columnNumber);\n        if (!rawLocation) {\n            return null;\n        }\n        const script = rawLocation.script();\n        const sourceURL = script && script.sourceURL;\n        return sourceURL && this.linkifier ? this.linkifier.linkifyRawLocation(rawLocation, sourceURL) : null;\n    }\n    async populate() {\n        const heapSnapshotProxy = await this.profile.loadPromise;\n        void this.retrieveStatistics(heapSnapshotProxy);\n        if (this.dataGrid) {\n            void this.dataGrid.setDataSource(heapSnapshotProxy, 0);\n        }\n        if (this.profile.profileType().id === TrackingHeapSnapshotProfileType.TypeId && this.profile.fromFile()) {\n            const samples = await heapSnapshotProxy.getSamples();\n            if (samples) {\n                console.assert(Boolean(samples.timestamps.length));\n                const profileSamples = new Samples();\n                profileSamples.sizes = samples.sizes;\n                profileSamples.ids = samples.lastAssignedIds;\n                profileSamples.timestamps = samples.timestamps;\n                profileSamples.max = samples.sizes;\n                profileSamples.totalTime = Math.max(samples.timestamps[samples.timestamps.length - 1] || 0, 10000);\n                if (this.trackingOverviewGrid) {\n                    this.trackingOverviewGrid.setSamples(profileSamples);\n                }\n            }\n        }\n        const list = this.profiles();\n        const profileIndex = list.indexOf(this.profile);\n        this.baseSelect.setSelectedIndex(Math.max(0, profileIndex - 1));\n        if (this.trackingOverviewGrid) {\n            this.trackingOverviewGrid.updateGrid();\n        }\n    }\n    async retrieveStatistics(heapSnapshotProxy) {\n        const statistics = await heapSnapshotProxy.getStatistics();\n        const records = [\n            { value: statistics.code, color: '#f77', title: i18nString(UIStrings.code) },\n            { value: statistics.strings, color: '#5e5', title: i18nString(UIStrings.strings) },\n            { value: statistics.jsArrays, color: '#7af', title: i18nString(UIStrings.jsArrays) },\n            { value: statistics.native, color: '#fc5', title: i18nString(UIStrings.typedArrays) },\n            { value: statistics.system, color: '#98f', title: i18nString(UIStrings.systemObjects) },\n        ];\n        this.statisticsView.setTotalAndRecords(statistics.total, records);\n        return statistics;\n    }\n    onIdsRangeChanged(event) {\n        const { minId, maxId } = event.data;\n        this.selectedSizeText.setText(i18nString(UIStrings.selectedSizeS, { PH1: Platform.NumberUtilities.bytesToString(event.data.size) }));\n        if (this.constructorsDataGrid.snapshot) {\n            this.constructorsDataGrid.setSelectionRange(minId, maxId);\n        }\n    }\n    async toolbarItems() {\n        const result = [this.perspectiveSelect, this.classNameFilter];\n        if (this.profile.profileType() !== instance.trackingHeapSnapshotProfileType) {\n            result.push(this.baseSelect, this.filterSelect);\n        }\n        result.push(this.selectedSizeText);\n        result.push(this.resetRetainersButton);\n        return result;\n    }\n    willHide() {\n        this.currentSearchResultIndex = -1;\n        this.popoverHelper.hidePopover();\n    }\n    supportsCaseSensitiveSearch() {\n        return true;\n    }\n    supportsRegexSearch() {\n        return false;\n    }\n    onSearchCanceled() {\n        this.currentSearchResultIndex = -1;\n        this.searchResults = [];\n    }\n    selectRevealedNode(node) {\n        if (node) {\n            node.select();\n        }\n    }\n    performSearch(searchConfig, shouldJump, jumpBackwards) {\n        const nextQuery = new HeapSnapshotModel.HeapSnapshotModel.SearchConfig(searchConfig.query.trim(), searchConfig.caseSensitive, searchConfig.isRegex, shouldJump, jumpBackwards || false);\n        void this.searchThrottler.schedule(this.performSearchInternal.bind(this, nextQuery));\n    }\n    async performSearchInternal(nextQuery) {\n        // Call onSearchCanceled since it will reset everything we need before doing a new search.\n        this.onSearchCanceled();\n        if (!this.currentPerspective.supportsSearch()) {\n            return;\n        }\n        this.currentQuery = nextQuery;\n        const query = nextQuery.query.trim();\n        if (!query) {\n            return;\n        }\n        if (query.charAt(0) === '@') {\n            const snapshotNodeId = parseInt(query.substring(1), 10);\n            if (isNaN(snapshotNodeId)) {\n                return;\n            }\n            if (!this.dataGrid) {\n                return;\n            }\n            const node = await this.dataGrid.revealObjectByHeapSnapshotId(String(snapshotNodeId));\n            this.selectRevealedNode(node);\n            return;\n        }\n        if (!this.profile.snapshotProxy || !this.dataGrid) {\n            return;\n        }\n        const filter = this.dataGrid.nodeFilter();\n        this.searchResults = filter ? await this.profile.snapshotProxy.search(this.currentQuery, filter) : [];\n        this.searchableViewInternal.updateSearchMatchesCount(this.searchResults.length);\n        if (this.searchResults.length) {\n            this.currentSearchResultIndex = nextQuery.jumpBackward ? this.searchResults.length - 1 : 0;\n        }\n        await this.jumpToSearchResult(this.currentSearchResultIndex);\n    }\n    jumpToNextSearchResult() {\n        if (!this.searchResults.length) {\n            return;\n        }\n        this.currentSearchResultIndex = (this.currentSearchResultIndex + 1) % this.searchResults.length;\n        void this.searchThrottler.schedule(this.jumpToSearchResult.bind(this, this.currentSearchResultIndex));\n    }\n    jumpToPreviousSearchResult() {\n        if (!this.searchResults.length) {\n            return;\n        }\n        this.currentSearchResultIndex =\n            (this.currentSearchResultIndex + this.searchResults.length - 1) % this.searchResults.length;\n        void this.searchThrottler.schedule(this.jumpToSearchResult.bind(this, this.currentSearchResultIndex));\n    }\n    async jumpToSearchResult(searchResultIndex) {\n        this.searchableViewInternal.updateCurrentMatchIndex(searchResultIndex);\n        if (searchResultIndex === -1) {\n            return;\n        }\n        if (!this.dataGrid) {\n            return;\n        }\n        const node = await this.dataGrid.revealObjectByHeapSnapshotId(String(this.searchResults[searchResultIndex]));\n        this.selectRevealedNode(node);\n    }\n    refreshVisibleData() {\n        if (!this.dataGrid) {\n            return;\n        }\n        let child = this.dataGrid.rootNode().children[0];\n        while (child) {\n            child.refresh();\n            child = child.traverseNextNode(false, null, true);\n        }\n    }\n    changeBase() {\n        if (this.baseProfile === this.profiles()[this.baseSelect.selectedIndex()]) {\n            return;\n        }\n        this.baseProfile = this.profiles()[this.baseSelect.selectedIndex()];\n        const dataGrid = this.dataGrid;\n        // Change set base data source only if main data source is already set.\n        if (dataGrid.snapshot) {\n            void this.baseProfile.loadPromise.then(dataGrid.setBaseDataSource.bind(dataGrid));\n        }\n        if (!this.currentQuery || !this.searchResults) {\n            return;\n        }\n        // The current search needs to be performed again. First negate out previous match\n        // count by calling the search finished callback with a negative number of matches.\n        // Then perform the search again with the same query and callback.\n        this.performSearch(this.currentQuery, false);\n    }\n    static ALWAYS_AVAILABLE_FILTERS = [\n        { uiName: i18nString(UIStrings.duplicatedStrings), filterName: 'duplicatedStrings' },\n        { uiName: i18nString(UIStrings.objectsRetainedByDetachedDomNodes), filterName: 'objectsRetainedByDetachedDomNodes' },\n        { uiName: i18nString(UIStrings.objectsRetainedByConsole), filterName: 'objectsRetainedByConsole' },\n    ];\n    changeFilter() {\n        let selectedIndex = this.filterSelect.selectedIndex();\n        let filterName = undefined;\n        const indexOfFirstAlwaysAvailableFilter = this.filterSelect.size() - HeapSnapshotView.ALWAYS_AVAILABLE_FILTERS.length;\n        if (selectedIndex >= indexOfFirstAlwaysAvailableFilter) {\n            filterName =\n                HeapSnapshotView.ALWAYS_AVAILABLE_FILTERS[selectedIndex - indexOfFirstAlwaysAvailableFilter].filterName;\n            selectedIndex = 0;\n        }\n        const profileIndex = selectedIndex - 1;\n        if (!this.dataGrid) {\n            return;\n        }\n        this.dataGrid\n            .filterSelectIndexChanged(this.profiles(), profileIndex, filterName);\n        if (!this.currentQuery || !this.searchResults) {\n            return;\n        }\n        // The current search needs to be performed again. First negate out previous match\n        // count by calling the search finished callback with a negative number of matches.\n        // Then perform the search again with the same query and callback.\n        this.performSearch(this.currentQuery, false);\n    }\n    profiles() {\n        return this.profile.profileType().getProfiles();\n    }\n    selectionChanged(event) {\n        const selectedNode = event.data;\n        this.setSelectedNodeForDetailsView(selectedNode);\n        this.inspectedObjectChanged(event);\n    }\n    onSelectAllocationNode(event) {\n        const selectedNode = event.data;\n        this.constructorsDataGrid.setAllocationNodeId(selectedNode.allocationNodeId());\n        this.setSelectedNodeForDetailsView(null);\n    }\n    inspectedObjectChanged(event) {\n        const selectedNode = event.data;\n        const heapProfilerModel = this.profile.heapProfilerModel();\n        if (heapProfilerModel && selectedNode instanceof HeapSnapshotGenericObjectNode) {\n            void heapProfilerModel.addInspectedHeapObject(String(selectedNode.snapshotNodeId));\n        }\n    }\n    setSelectedNodeForDetailsView(nodeItem) {\n        const dataSource = nodeItem && nodeItem.retainersDataSource();\n        if (dataSource) {\n            void this.retainmentDataGrid.setDataSource(dataSource.snapshot, dataSource.snapshotNodeIndex, dataSource.snapshotNodeId);\n            if (this.allocationStackView) {\n                void this.allocationStackView.setAllocatedObject(dataSource.snapshot, dataSource.snapshotNodeIndex);\n            }\n        }\n        else {\n            if (this.allocationStackView) {\n                this.allocationStackView.clear();\n            }\n            this.retainmentDataGrid.reset();\n        }\n    }\n    async changePerspectiveAndWait(perspectiveTitle) {\n        const perspectiveIndex = this.perspectives.findIndex(perspective => perspective.title() === perspectiveTitle);\n        if (perspectiveIndex === -1 || this.currentPerspectiveIndex === perspectiveIndex) {\n            return;\n        }\n        const dataGrid = this.perspectives[perspectiveIndex].masterGrid(this);\n        if (!dataGrid) {\n            return;\n        }\n        const promise = dataGrid.once(HeapSnapshotSortableDataGridEvents.ContentShown);\n        const option = this.perspectiveSelect.options().find(option => option.value === String(perspectiveIndex));\n        this.perspectiveSelect.select(option);\n        this.changePerspective(perspectiveIndex);\n        await promise;\n    }\n    async updateDataSourceAndView() {\n        const dataGrid = this.dataGrid;\n        if (!dataGrid || dataGrid.snapshot) {\n            return;\n        }\n        const snapshotProxy = await this.profile.loadPromise;\n        if (this.dataGrid !== dataGrid) {\n            return;\n        }\n        if (dataGrid.snapshot !== snapshotProxy) {\n            void dataGrid.setDataSource(snapshotProxy, 0);\n        }\n        if (dataGrid !== this.diffDataGrid) {\n            return;\n        }\n        if (!this.baseProfile) {\n            this.baseProfile = this.profiles()[this.baseSelect.selectedIndex()];\n        }\n        const baseSnapshotProxy = await this.baseProfile.loadPromise;\n        if (this.diffDataGrid.baseSnapshot !== baseSnapshotProxy) {\n            this.diffDataGrid.setBaseDataSource(baseSnapshotProxy);\n        }\n    }\n    onSelectedPerspectiveChanged(event) {\n        this.changePerspective(Number(event.target.selectedOptions[0].value));\n    }\n    changePerspective(selectedIndex) {\n        if (selectedIndex === this.currentPerspectiveIndex) {\n            return;\n        }\n        this.currentPerspectiveIndex = selectedIndex;\n        this.currentPerspective.deactivate(this);\n        const perspective = this.perspectives[selectedIndex];\n        this.currentPerspective = perspective;\n        this.dataGrid = perspective.masterGrid(this);\n        perspective.activate(this);\n        this.refreshVisibleData();\n        if (this.dataGrid) {\n            this.dataGrid.updateWidths();\n        }\n        void this.updateDataSourceAndView();\n        if (!this.currentQuery || !this.searchResults) {\n            return;\n        }\n        // The current search needs to be performed again. First negate out previous match\n        // count by calling the search finished callback with a negative number of matches.\n        // Then perform the search again the with same query and callback.\n        this.performSearch(this.currentQuery, false);\n    }\n    async selectLiveObject(perspectiveName, snapshotObjectId) {\n        await this.changePerspectiveAndWait(perspectiveName);\n        if (!this.dataGrid) {\n            return;\n        }\n        const node = await this.dataGrid.revealObjectByHeapSnapshotId(snapshotObjectId);\n        if (node) {\n            node.select();\n        }\n        else {\n            Common.Console.Console.instance().error('Cannot find corresponding heap snapshot node');\n        }\n    }\n    getPopoverRequest(event) {\n        const span = UI.UIUtils.enclosingNodeOrSelfWithNodeName(event.target, 'span');\n        const row = UI.UIUtils.enclosingNodeOrSelfWithNodeName(event.target, 'tr');\n        if (!row) {\n            return null;\n        }\n        if (!this.dataGrid) {\n            return null;\n        }\n        const node = this.dataGrid.dataGridNodeFromNode(row) || this.containmentDataGrid.dataGridNodeFromNode(row) ||\n            this.constructorsDataGrid.dataGridNodeFromNode(row) || this.diffDataGrid.dataGridNodeFromNode(row) ||\n            (this.allocationDataGrid && this.allocationDataGrid.dataGridNodeFromNode(row)) ||\n            this.retainmentDataGrid.dataGridNodeFromNode(row);\n        const heapProfilerModel = this.profile.heapProfilerModel();\n        if (!node || !span || !heapProfilerModel) {\n            return null;\n        }\n        let objectPopoverHelper;\n        return {\n            // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n            // @ts-expect-error\n            box: span.boxInWindow(),\n            show: async (popover) => {\n                if (!heapProfilerModel) {\n                    return false;\n                }\n                const remoteObject = await node.queryObjectContent(heapProfilerModel, 'popover');\n                if (remoteObject instanceof SDK.RemoteObject.RemoteObject) {\n                    objectPopoverHelper =\n                        await ObjectUI.ObjectPopoverHelper.ObjectPopoverHelper.buildObjectPopover(remoteObject, popover);\n                }\n                else {\n                    objectPopoverHelper = ObjectUI.ObjectPopoverHelper.ObjectPopoverHelper.buildDescriptionPopover(remoteObject.description, remoteObject.link, popover);\n                }\n                if (!objectPopoverHelper) {\n                    heapProfilerModel.runtimeModel().releaseObjectGroup('popover');\n                    return false;\n                }\n                return true;\n            },\n            hide: () => {\n                heapProfilerModel.runtimeModel().releaseObjectGroup('popover');\n                if (objectPopoverHelper) {\n                    objectPopoverHelper.dispose();\n                }\n            },\n        };\n    }\n    updatePerspectiveOptions() {\n        const multipleSnapshots = this.profiles().length > 1;\n        this.perspectiveSelect.removeOptions();\n        this.perspectives.forEach((perspective, index) => {\n            if (multipleSnapshots || perspective !== this.comparisonPerspective) {\n                const option = this.perspectiveSelect.createOption(perspective.title(), String(index));\n                if (perspective === this.currentPerspective) {\n                    this.perspectiveSelect.select(option);\n                }\n            }\n        });\n    }\n    updateBaseOptions() {\n        const list = this.profiles();\n        const selectedIndex = this.baseSelect.selectedIndex();\n        this.baseSelect.removeOptions();\n        for (const item of list) {\n            this.baseSelect.createOption(item.title);\n        }\n        if (selectedIndex > -1) {\n            this.baseSelect.setSelectedIndex(selectedIndex);\n        }\n    }\n    updateFilterOptions() {\n        const list = this.profiles();\n        const selectedIndex = this.filterSelect.selectedIndex();\n        const originalSize = this.filterSelect.size();\n        this.filterSelect.removeOptions();\n        this.filterSelect.createOption(i18nString(UIStrings.allObjects));\n        for (let i = 0; i < list.length; ++i) {\n            let title;\n            if (!i) {\n                title = i18nString(UIStrings.objectsAllocatedBeforeS, { PH1: list[i].title });\n            }\n            else {\n                title = i18nString(UIStrings.objectsAllocatedBetweenSAndS, { PH1: list[i - 1].title, PH2: list[i].title });\n            }\n            this.filterSelect.createOption(title);\n        }\n        // Create a dividing line using em dashes.\n        const dividerIndex = this.filterSelect.size();\n        const divider = this.filterSelect.createOption('\\u2014'.repeat(18));\n        divider.disabled = true;\n        for (const filter of HeapSnapshotView.ALWAYS_AVAILABLE_FILTERS) {\n            this.filterSelect.createOption(filter.uiName);\n        }\n        const newSize = this.filterSelect.size();\n        if (selectedIndex > -1) {\n            const distanceFromEnd = originalSize - selectedIndex;\n            if (distanceFromEnd <= HeapSnapshotView.ALWAYS_AVAILABLE_FILTERS.length) {\n                // If one of the always-available filters was selected, then select the\n                // same filter again even though its index may have changed.\n                this.filterSelect.setSelectedIndex(newSize - distanceFromEnd);\n            }\n            else if (selectedIndex >= dividerIndex) {\n                // If the select list is now shorter than it was, such that we can't\n                // keep the index unchanged, set it to -1, which causes it to be blank.\n                this.filterSelect.setSelectedIndex(-1);\n            }\n            else {\n                this.filterSelect.setSelectedIndex(selectedIndex);\n            }\n        }\n    }\n    updateControls() {\n        this.updatePerspectiveOptions();\n        this.updateBaseOptions();\n        this.updateFilterOptions();\n    }\n    onReceiveSnapshot(event) {\n        this.updateControls();\n        const profile = event.data;\n        profile.addEventListener(\"ProfileTitleChanged\" /* ProfileHeaderEvents.PROFILE_TITLE_CHANGED */, this.updateControls, this);\n    }\n    onProfileHeaderRemoved(event) {\n        const profile = event.data;\n        profile.removeEventListener(\"ProfileTitleChanged\" /* ProfileHeaderEvents.PROFILE_TITLE_CHANGED */, this.updateControls, this);\n        if (this.profile === profile) {\n            this.detach();\n            this.profile.profileType().removeEventListener(\"SnapshotReceived\" /* HeapSnapshotProfileTypeEvents.SNAPSHOT_RECEIVED */, this.onReceiveSnapshot, this);\n            this.profile.profileType().removeEventListener(\"remove-profile-header\" /* ProfileTypeEvents.REMOVE_PROFILE_HEADER */, this.onProfileHeaderRemoved, this);\n            this.dispose();\n        }\n        else {\n            this.updateControls();\n        }\n    }\n    dispose() {\n        this.linkifier.dispose();\n        this.popoverHelper.dispose();\n        if (this.allocationStackView) {\n            this.allocationStackView.clear();\n            if (this.allocationDataGrid) {\n                this.allocationDataGrid.dispose();\n            }\n        }\n        this.onStopTracking();\n        if (this.trackingOverviewGrid) {\n            this.trackingOverviewGrid.removeEventListener(\"IdsRangeChanged\" /* Events.IDS_RANGE_CHANGED */, this.onIdsRangeChanged.bind(this));\n        }\n    }\n}\nexport class Perspective {\n    titleInternal;\n    constructor(title) {\n        this.titleInternal = title;\n    }\n    activate(_heapSnapshotView) {\n    }\n    deactivate(heapSnapshotView) {\n        heapSnapshotView.baseSelect.setVisible(false);\n        heapSnapshotView.filterSelect.setVisible(false);\n        heapSnapshotView.classNameFilter.setVisible(false);\n        if (heapSnapshotView.trackingOverviewGrid) {\n            heapSnapshotView.trackingOverviewGrid.detach();\n        }\n        if (heapSnapshotView.allocationWidget) {\n            heapSnapshotView.allocationWidget.detach();\n        }\n        if (heapSnapshotView.statisticsView) {\n            heapSnapshotView.statisticsView.detach();\n        }\n        heapSnapshotView.splitWidget.detach();\n        heapSnapshotView.splitWidget.detachChildWidgets();\n    }\n    masterGrid(_heapSnapshotView) {\n        return null;\n    }\n    title() {\n        return this.titleInternal;\n    }\n    supportsSearch() {\n        return false;\n    }\n}\nexport class SummaryPerspective extends Perspective {\n    constructor() {\n        super(i18nString(UIStrings.summary));\n    }\n    activate(heapSnapshotView) {\n        heapSnapshotView.splitWidget.setMainWidget(heapSnapshotView.constructorsWidget);\n        heapSnapshotView.splitWidget.setSidebarWidget(heapSnapshotView.objectDetailsView);\n        heapSnapshotView.splitWidget.show(heapSnapshotView.searchableViewInternal.element);\n        heapSnapshotView.filterSelect.setVisible(true);\n        heapSnapshotView.classNameFilter.setVisible(true);\n        if (!heapSnapshotView.trackingOverviewGrid) {\n            return;\n        }\n        heapSnapshotView.trackingOverviewGrid.show(heapSnapshotView.searchableViewInternal.element, heapSnapshotView.splitWidget.element);\n        heapSnapshotView.trackingOverviewGrid.update();\n        heapSnapshotView.trackingOverviewGrid.updateGrid();\n    }\n    masterGrid(heapSnapshotView) {\n        return heapSnapshotView.constructorsDataGrid;\n    }\n    supportsSearch() {\n        return true;\n    }\n}\nexport class ComparisonPerspective extends Perspective {\n    constructor() {\n        super(i18nString(UIStrings.comparison));\n    }\n    activate(heapSnapshotView) {\n        heapSnapshotView.splitWidget.setMainWidget(heapSnapshotView.diffWidget);\n        heapSnapshotView.splitWidget.setSidebarWidget(heapSnapshotView.objectDetailsView);\n        heapSnapshotView.splitWidget.show(heapSnapshotView.searchableViewInternal.element);\n        heapSnapshotView.baseSelect.setVisible(true);\n        heapSnapshotView.classNameFilter.setVisible(true);\n    }\n    masterGrid(heapSnapshotView) {\n        return heapSnapshotView.diffDataGrid;\n    }\n    supportsSearch() {\n        return true;\n    }\n}\nexport class ContainmentPerspective extends Perspective {\n    constructor() {\n        super(i18nString(UIStrings.containment));\n    }\n    activate(heapSnapshotView) {\n        heapSnapshotView.splitWidget.setMainWidget(heapSnapshotView.containmentWidget);\n        heapSnapshotView.splitWidget.setSidebarWidget(heapSnapshotView.objectDetailsView);\n        heapSnapshotView.splitWidget.show(heapSnapshotView.searchableViewInternal.element);\n    }\n    masterGrid(heapSnapshotView) {\n        return heapSnapshotView.containmentDataGrid;\n    }\n}\nexport class AllocationPerspective extends Perspective {\n    allocationSplitWidget;\n    constructor() {\n        super(i18nString(UIStrings.allocation));\n        this.allocationSplitWidget =\n            new UI.SplitWidget.SplitWidget(false, true, 'heap-snapshot-allocation-split-view-state', 200, 200);\n        this.allocationSplitWidget.setSidebarWidget(new UI.Widget.VBox());\n    }\n    activate(heapSnapshotView) {\n        if (heapSnapshotView.allocationWidget) {\n            this.allocationSplitWidget.setMainWidget(heapSnapshotView.allocationWidget);\n        }\n        heapSnapshotView.splitWidget.setMainWidget(heapSnapshotView.constructorsWidget);\n        heapSnapshotView.splitWidget.setSidebarWidget(heapSnapshotView.objectDetailsView);\n        const allocatedObjectsView = new UI.Widget.VBox();\n        const resizer = document.createElement('div');\n        resizer.classList.add('heap-snapshot-view-resizer');\n        const title = resizer.createChild('div', 'title').createChild('span');\n        resizer.createChild('div', 'verticalResizerIcon');\n        title.textContent = i18nString(UIStrings.liveObjects);\n        this.allocationSplitWidget.hideDefaultResizer();\n        this.allocationSplitWidget.installResizer(resizer);\n        allocatedObjectsView.element.appendChild(resizer);\n        heapSnapshotView.splitWidget.show(allocatedObjectsView.element);\n        this.allocationSplitWidget.setSidebarWidget(allocatedObjectsView);\n        this.allocationSplitWidget.show(heapSnapshotView.searchableViewInternal.element);\n        heapSnapshotView.constructorsDataGrid.clear();\n        if (heapSnapshotView.allocationDataGrid) {\n            const selectedNode = heapSnapshotView.allocationDataGrid.selectedNode;\n            if (selectedNode) {\n                heapSnapshotView.constructorsDataGrid.setAllocationNodeId(selectedNode.allocationNodeId());\n            }\n        }\n    }\n    deactivate(heapSnapshotView) {\n        this.allocationSplitWidget.detach();\n        super.deactivate(heapSnapshotView);\n    }\n    masterGrid(heapSnapshotView) {\n        return heapSnapshotView.allocationDataGrid;\n    }\n}\nexport class StatisticsPerspective extends Perspective {\n    constructor() {\n        super(i18nString(UIStrings.statistics));\n    }\n    activate(heapSnapshotView) {\n        heapSnapshotView.statisticsView.show(heapSnapshotView.searchableViewInternal.element);\n    }\n    masterGrid(_heapSnapshotView) {\n        return null;\n    }\n}\nexport class HeapSnapshotProfileType extends Common.ObjectWrapper.eventMixin(ProfileType) {\n    exposeInternals;\n    customContentInternal;\n    constructor(id, title) {\n        super(id || HeapSnapshotProfileType.TypeId, title || i18nString(UIStrings.heapSnapshot));\n        SDK.TargetManager.TargetManager.instance().observeModels(SDK.HeapProfilerModel.HeapProfilerModel, this);\n        SDK.TargetManager.TargetManager.instance().addModelListener(SDK.HeapProfilerModel.HeapProfilerModel, \"ResetProfiles\" /* SDK.HeapProfilerModel.Events.RESET_PROFILES */, this.resetProfiles, this);\n        SDK.TargetManager.TargetManager.instance().addModelListener(SDK.HeapProfilerModel.HeapProfilerModel, \"AddHeapSnapshotChunk\" /* SDK.HeapProfilerModel.Events.ADD_HEAP_SNAPSHOT_CHUNK */, this.addHeapSnapshotChunk, this);\n        SDK.TargetManager.TargetManager.instance().addModelListener(SDK.HeapProfilerModel.HeapProfilerModel, \"ReportHeapSnapshotProgress\" /* SDK.HeapProfilerModel.Events.REPORT_HEAP_SNAPSHOT_PROGRESS */, this.reportHeapSnapshotProgress, this);\n        this.exposeInternals = Common.Settings.Settings.instance().createSetting('expose-internals', false);\n        this.customContentInternal = null;\n    }\n    modelAdded(heapProfilerModel) {\n        void heapProfilerModel.enable();\n    }\n    modelRemoved(_heapProfilerModel) {\n    }\n    getProfiles() {\n        return super.getProfiles();\n    }\n    fileExtension() {\n        return '.heapsnapshot';\n    }\n    get buttonTooltip() {\n        return i18nString(UIStrings.takeHeapSnapshot);\n    }\n    isInstantProfile() {\n        return true;\n    }\n    buttonClicked() {\n        void this.takeHeapSnapshot();\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.ProfilesHeapProfileTaken);\n        return false;\n    }\n    get treeItemTitle() {\n        return i18nString(UIStrings.heapSnapshots);\n    }\n    get description() {\n        return i18nString(UIStrings.heapSnapshotProfilesShowMemory);\n    }\n    customContent() {\n        const showOptionToExposeInternalsInHeapSnapshot = Root.Runtime.experiments.isEnabled('show-option-tp-expose-internals-in-heap-snapshot');\n        const omitParagraphElement = true;\n        const exposeInternalsInHeapSnapshotCheckbox = UI.SettingsUI.createSettingCheckbox(i18nString(UIStrings.exposeInternals), this.exposeInternals, omitParagraphElement);\n        this.customContentInternal = exposeInternalsInHeapSnapshotCheckbox;\n        return showOptionToExposeInternalsInHeapSnapshot ? exposeInternalsInHeapSnapshotCheckbox : null;\n    }\n    setCustomContentEnabled(enable) {\n        if (this.customContentInternal) {\n            this.customContentInternal.checkboxElement.disabled = !enable;\n        }\n    }\n    createProfileLoadedFromFile(title) {\n        return new HeapProfileHeader(null, this, title);\n    }\n    async takeHeapSnapshot() {\n        if (this.profileBeingRecorded()) {\n            return;\n        }\n        const heapProfilerModel = UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel);\n        if (!heapProfilerModel) {\n            return;\n        }\n        let profile = new HeapProfileHeader(heapProfilerModel, this);\n        this.setProfileBeingRecorded(profile);\n        this.addProfile(profile);\n        profile.updateStatus(i18nString(UIStrings.snapshotting));\n        await heapProfilerModel.takeHeapSnapshot({\n            reportProgress: true,\n            captureNumericValue: true,\n            exposeInternals: this.exposeInternals.get(),\n        });\n        profile = this.profileBeingRecorded();\n        if (!profile) {\n            return;\n        }\n        profile.title = i18nString(UIStrings.snapshotD, { PH1: profile.uid });\n        profile.finishLoad();\n        this.setProfileBeingRecorded(null);\n        this.dispatchEventToListeners(\"profile-complete\" /* ProfileTypeEvents.PROFILE_COMPLETE */, profile);\n    }\n    addHeapSnapshotChunk(event) {\n        const profile = this.profileBeingRecorded();\n        if (!profile) {\n            return;\n        }\n        profile.transferChunk(event.data);\n    }\n    reportHeapSnapshotProgress(event) {\n        const profile = this.profileBeingRecorded();\n        if (!profile) {\n            return;\n        }\n        const { done, total, finished } = event.data;\n        profile.updateStatus(i18nString(UIStrings.percentagePlaceholder, { PH1: ((done / total) * 100).toFixed(0) }), true);\n        if (finished) {\n            profile.prepareToLoad();\n        }\n    }\n    resetProfiles(event) {\n        const heapProfilerModel = event.data;\n        for (const profile of this.getProfiles()) {\n            if (profile.heapProfilerModel() === heapProfilerModel) {\n                this.removeProfile(profile);\n            }\n        }\n    }\n    snapshotReceived(profile) {\n        if (this.profileBeingRecorded() === profile) {\n            this.setProfileBeingRecorded(null);\n        }\n        this.dispatchEventToListeners(\"SnapshotReceived\" /* HeapSnapshotProfileTypeEvents.SNAPSHOT_RECEIVED */, profile);\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    static TypeId = 'HEAP';\n    // TODO(crbug.com/1228674): Remove event string once its no longer used in web tests.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    static SnapshotReceived = 'SnapshotReceived';\n}\nexport class TrackingHeapSnapshotProfileType extends Common.ObjectWrapper.eventMixin(HeapSnapshotProfileType) {\n    recordAllocationStacksSettingInternal;\n    customContentInternal;\n    recording;\n    profileSamples;\n    constructor() {\n        super(TrackingHeapSnapshotProfileType.TypeId, i18nString(UIStrings.allocationInstrumentationOn));\n        this.recordAllocationStacksSettingInternal =\n            Common.Settings.Settings.instance().createSetting('record-allocation-stacks', false);\n        this.customContentInternal = null;\n        this.recording = false;\n    }\n    modelAdded(heapProfilerModel) {\n        super.modelAdded(heapProfilerModel);\n        heapProfilerModel.addEventListener(\"HeapStatsUpdate\" /* SDK.HeapProfilerModel.Events.HEAP_STATS_UPDATED */, this.heapStatsUpdate, this);\n        heapProfilerModel.addEventListener(\"LastSeenObjectId\" /* SDK.HeapProfilerModel.Events.LAST_SEEN_OBJECT_ID */, this.lastSeenObjectId, this);\n    }\n    modelRemoved(heapProfilerModel) {\n        super.modelRemoved(heapProfilerModel);\n        heapProfilerModel.removeEventListener(\"HeapStatsUpdate\" /* SDK.HeapProfilerModel.Events.HEAP_STATS_UPDATED */, this.heapStatsUpdate, this);\n        heapProfilerModel.removeEventListener(\"LastSeenObjectId\" /* SDK.HeapProfilerModel.Events.LAST_SEEN_OBJECT_ID */, this.lastSeenObjectId, this);\n    }\n    heapStatsUpdate(event) {\n        if (!this.profileSamples) {\n            return;\n        }\n        const samples = event.data;\n        let index;\n        for (let i = 0; i < samples.length; i += 3) {\n            index = samples[i];\n            const size = samples[i + 2];\n            this.profileSamples.sizes[index] = size;\n            if (!this.profileSamples.max[index]) {\n                this.profileSamples.max[index] = size;\n            }\n        }\n    }\n    lastSeenObjectId(event) {\n        const profileSamples = this.profileSamples;\n        if (!profileSamples) {\n            return;\n        }\n        const { lastSeenObjectId, timestamp } = event.data;\n        const currentIndex = Math.max(profileSamples.ids.length, profileSamples.max.length - 1);\n        profileSamples.ids[currentIndex] = lastSeenObjectId;\n        if (!profileSamples.max[currentIndex]) {\n            profileSamples.max[currentIndex] = 0;\n            profileSamples.sizes[currentIndex] = 0;\n        }\n        profileSamples.timestamps[currentIndex] = timestamp;\n        if (profileSamples.totalTime < timestamp - profileSamples.timestamps[0]) {\n            profileSamples.totalTime *= 2;\n        }\n        if (this.profileSamples) {\n            this.dispatchEventToListeners(\"HeapStatsUpdate\" /* TrackingHeapSnapshotProfileTypeEvents.HEAP_STATS_UPDATE */, this.profileSamples);\n        }\n        const profile = this.profileBeingRecorded();\n        if (profile) {\n            profile.updateStatus(null, true);\n        }\n    }\n    hasTemporaryView() {\n        return true;\n    }\n    get buttonTooltip() {\n        return this.recording ? i18nString(UIStrings.stopRecordingHeapProfile) :\n            i18nString(UIStrings.startRecordingHeapProfile);\n    }\n    isInstantProfile() {\n        return false;\n    }\n    buttonClicked() {\n        return this.toggleRecording();\n    }\n    startRecordingProfile() {\n        if (this.profileBeingRecorded()) {\n            return;\n        }\n        const heapProfilerModel = this.addNewProfile();\n        if (!heapProfilerModel) {\n            return;\n        }\n        void heapProfilerModel.startTrackingHeapObjects(this.recordAllocationStacksSettingInternal.get());\n    }\n    customContent() {\n        const checkboxSetting = UI.SettingsUI.createSettingCheckbox(i18nString(UIStrings.recordAllocationStacksExtra), this.recordAllocationStacksSettingInternal, true);\n        this.customContentInternal = checkboxSetting;\n        return checkboxSetting;\n    }\n    setCustomContentEnabled(enable) {\n        if (this.customContentInternal) {\n            this.customContentInternal.checkboxElement.disabled = !enable;\n        }\n    }\n    recordAllocationStacksSetting() {\n        return this.recordAllocationStacksSettingInternal;\n    }\n    addNewProfile() {\n        const heapProfilerModel = UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel);\n        if (!heapProfilerModel) {\n            return null;\n        }\n        this.setProfileBeingRecorded(new HeapProfileHeader(heapProfilerModel, this, undefined));\n        this.profileSamples = new Samples();\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.profileBeingRecorded()._profileSamples = this.profileSamples;\n        this.recording = true;\n        this.addProfile(this.profileBeingRecorded());\n        this.profileBeingRecorded().updateStatus(i18nString(UIStrings.recording));\n        this.dispatchEventToListeners(\"TrackingStarted\" /* TrackingHeapSnapshotProfileTypeEvents.TRACKING_STARTED */);\n        return heapProfilerModel;\n    }\n    async stopRecordingProfile() {\n        let profile = this.profileBeingRecorded();\n        profile.updateStatus(i18nString(UIStrings.snapshotting));\n        const stopPromise = profile.heapProfilerModel().stopTrackingHeapObjects(true);\n        this.recording = false;\n        this.dispatchEventToListeners(\"TrackingStopped\" /* TrackingHeapSnapshotProfileTypeEvents.TRACKING_STOPPED */);\n        await stopPromise;\n        profile = this.profileBeingRecorded();\n        if (!profile) {\n            return;\n        }\n        profile.finishLoad();\n        this.profileSamples = null;\n        this.setProfileBeingRecorded(null);\n        this.dispatchEventToListeners(\"profile-complete\" /* ProfileTypeEvents.PROFILE_COMPLETE */, profile);\n    }\n    toggleRecording() {\n        if (this.recording) {\n            void this.stopRecordingProfile();\n        }\n        else {\n            this.startRecordingProfile();\n        }\n        return this.recording;\n    }\n    fileExtension() {\n        return '.heaptimeline';\n    }\n    get treeItemTitle() {\n        return i18nString(UIStrings.allocationTimelines);\n    }\n    get description() {\n        return i18nString(UIStrings.AllocationTimelinesShowInstrumented);\n    }\n    resetProfiles(event) {\n        const wasRecording = this.recording;\n        // Clear current profile to avoid stopping backend.\n        this.setProfileBeingRecorded(null);\n        super.resetProfiles(event);\n        this.profileSamples = null;\n        if (wasRecording) {\n            this.addNewProfile();\n        }\n    }\n    profileBeingRecordedRemoved() {\n        void this.stopRecordingProfile();\n        this.profileSamples = null;\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    static TypeId = 'HEAP-RECORD';\n    // TODO(crbug.com/1228674): Remove event strings once they are no longer used in web tests.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    static HeapStatsUpdate = 'HeapStatsUpdate';\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    static TrackingStarted = 'TrackingStarted';\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    static TrackingStopped = 'TrackingStopped';\n}\nexport class HeapProfileHeader extends ProfileHeader {\n    heapProfilerModelInternal;\n    maxJSObjectId;\n    workerProxy;\n    receiver;\n    snapshotProxy;\n    loadPromise;\n    fulfillLoad;\n    totalNumberOfChunks;\n    bufferedWriter;\n    onTempFileReady;\n    failedToCreateTempFile;\n    wasDisposed;\n    fileName;\n    constructor(heapProfilerModel, type, title) {\n        super(type, title || i18nString(UIStrings.snapshotD, { PH1: type.nextProfileUid() }));\n        this.heapProfilerModelInternal = heapProfilerModel;\n        this.maxJSObjectId = -1;\n        this.workerProxy = null;\n        this.receiver = null;\n        this.snapshotProxy = null;\n        this.loadPromise = new Promise(resolve => {\n            this.fulfillLoad = resolve;\n        });\n        this.totalNumberOfChunks = 0;\n        this.bufferedWriter = null;\n        this.onTempFileReady = null;\n    }\n    heapProfilerModel() {\n        return this.heapProfilerModelInternal;\n    }\n    async getLocation(nodeIndex) {\n        if (!this.snapshotProxy) {\n            return null;\n        }\n        return this.snapshotProxy.getLocation(nodeIndex);\n    }\n    createSidebarTreeElement(dataDisplayDelegate) {\n        return new ProfileSidebarTreeElement(dataDisplayDelegate, this, 'heap-snapshot-sidebar-tree-item');\n    }\n    createView(dataDisplayDelegate) {\n        return new HeapSnapshotView(dataDisplayDelegate, this);\n    }\n    prepareToLoad() {\n        console.assert(!this.receiver, 'Already loading');\n        this.setupWorker();\n        this.updateStatus(i18nString(UIStrings.loading), true);\n    }\n    finishLoad() {\n        if (!this.wasDisposed && this.receiver) {\n            void this.receiver.close();\n        }\n        if (!this.bufferedWriter) {\n            return;\n        }\n        this.didWriteToTempFile(this.bufferedWriter);\n    }\n    didWriteToTempFile(tempFile) {\n        if (this.wasDisposed) {\n            if (tempFile) {\n                tempFile.remove();\n            }\n            return;\n        }\n        this.tempFile = tempFile;\n        if (!tempFile) {\n            this.failedToCreateTempFile = true;\n        }\n        if (this.onTempFileReady) {\n            this.onTempFileReady();\n            this.onTempFileReady = null;\n        }\n    }\n    setupWorker() {\n        console.assert(!this.workerProxy, 'HeapSnapshotWorkerProxy already exists');\n        this.workerProxy = new HeapSnapshotWorkerProxy(this.handleWorkerEvent.bind(this));\n        this.workerProxy.addEventListener(\"Wait\" /* HeapSnapshotWorkerProxy.Events.WAIT */, event => {\n            this.updateStatus(null, event.data);\n        }, this);\n        this.receiver = this.workerProxy.createLoader(this.uid, this.snapshotReceived.bind(this));\n    }\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    handleWorkerEvent(eventName, data) {\n        if (HeapSnapshotModel.HeapSnapshotModel.HeapSnapshotProgressEvent.BrokenSnapshot === eventName) {\n            const error = data;\n            Common.Console.Console.instance().error(error);\n            return;\n        }\n        if (HeapSnapshotModel.HeapSnapshotModel.HeapSnapshotProgressEvent.Update !== eventName) {\n            return;\n        }\n        const serializedMessage = data;\n        const messageObject = i18n.i18n.deserializeUIString(serializedMessage);\n        // We know all strings from the worker are declared inside a single file so we can\n        // use a custom function.\n        this.updateStatus(moduleI18nString(messageObject.string, messageObject.values));\n    }\n    dispose() {\n        if (this.workerProxy) {\n            this.workerProxy.dispose();\n        }\n        this.removeTempFile();\n        this.wasDisposed = true;\n    }\n    didCompleteSnapshotTransfer() {\n        if (!this.snapshotProxy) {\n            return;\n        }\n        this.updateStatus(Platform.NumberUtilities.bytesToString(this.snapshotProxy.totalSize), false);\n    }\n    transferChunk(chunk) {\n        if (!this.bufferedWriter) {\n            this.bufferedWriter = new Bindings.TempFile.TempFile();\n        }\n        this.bufferedWriter.write([chunk]);\n        ++this.totalNumberOfChunks;\n        if (this.receiver) {\n            void this.receiver.write(chunk);\n        }\n    }\n    snapshotReceived(snapshotProxy) {\n        if (this.wasDisposed) {\n            return;\n        }\n        this.receiver = null;\n        this.snapshotProxy = snapshotProxy;\n        this.maxJSObjectId = snapshotProxy.maxJSObjectId();\n        this.didCompleteSnapshotTransfer();\n        if (this.workerProxy) {\n            this.workerProxy.startCheckingForLongRunningCalls();\n        }\n        this.notifySnapshotReceived();\n    }\n    notifySnapshotReceived() {\n        if (this.snapshotProxy && this.fulfillLoad) {\n            this.fulfillLoad(this.snapshotProxy);\n        }\n        this.profileType().snapshotReceived(this);\n    }\n    canSaveToFile() {\n        return !this.fromFile();\n    }\n    async saveToFile() {\n        await this.loadPromise;\n        const fileOutputStream = new Bindings.FileUtils.FileOutputStream();\n        this.fileName = this.fileName ||\n            'Heap-' + Platform.DateUtilities.toISO8601Compact(new Date()) + this.profileType().fileExtension();\n        const onOpen = async (accepted) => {\n            if (!accepted) {\n                return;\n            }\n            if (this.failedToCreateTempFile) {\n                Common.Console.Console.instance().error('Failed to open temp file with heap snapshot');\n                void fileOutputStream.close();\n                return;\n            }\n            if (this.tempFile) {\n                const error = await this.tempFile.copyToOutputStream(fileOutputStream, this.onChunkTransferred.bind(this));\n                if (error) {\n                    Common.Console.Console.instance().error('Failed to read heap snapshot from temp file: ' + error.message);\n                }\n                this.didCompleteSnapshotTransfer();\n                return;\n            }\n            this.onTempFileReady = () => {\n                void onOpen(accepted);\n            };\n            this.updateSaveProgress(0, 1);\n        };\n        await fileOutputStream.open(this.fileName).then(onOpen.bind(this));\n    }\n    onChunkTransferred(reader) {\n        this.updateSaveProgress(reader.loadedSize(), reader.fileSize());\n    }\n    updateSaveProgress(value, total) {\n        const percentValue = ((total && value / total) * 100).toFixed(0);\n        this.updateStatus(i18nString(UIStrings.savingD, { PH1: percentValue }));\n    }\n    async loadFromFile(file) {\n        this.updateStatus(i18nString(UIStrings.loading), true);\n        this.setupWorker();\n        const reader = new Bindings.FileUtils.ChunkedFileReader(file, 10000000);\n        const success = await reader.read(this.receiver);\n        if (!success) {\n            const error = reader.error();\n            if (error) {\n                this.updateStatus(error.message);\n            }\n        }\n        return success ? null : reader.error();\n    }\n    profileType() {\n        return super.profileType();\n    }\n}\nexport class HeapSnapshotStatisticsView extends UI.Widget.VBox {\n    pieChart;\n    constructor() {\n        super();\n        this.element.classList.add('heap-snapshot-statistics-view');\n        this.element.setAttribute('jslog', `${VisualLogging.pane('profiler.heap-snapshot-statistics-view').track({ resize: true })}`);\n        this.pieChart = new PerfUI.PieChart.PieChart();\n        this.setTotalAndRecords(0, []);\n        this.pieChart.classList.add('heap-snapshot-stats-pie-chart');\n        this.element.appendChild(this.pieChart);\n    }\n    static valueFormatter(value) {\n        const formatter = new Intl.NumberFormat(i18n.DevToolsLocale.DevToolsLocale.instance().locale, {\n            style: 'unit',\n            unit: 'kilobyte',\n        });\n        return formatter.format(Math.round(value / 1000));\n    }\n    setTotalAndRecords(total, records) {\n        this.pieChart.data = {\n            chartName: i18nString(UIStrings.heapMemoryUsage),\n            size: 150,\n            formatter: HeapSnapshotStatisticsView.valueFormatter,\n            showLegend: true,\n            total,\n            slices: records,\n        };\n    }\n}\nexport class HeapAllocationStackView extends UI.Widget.Widget {\n    heapProfilerModel;\n    linkifier;\n    frameElements;\n    constructor(heapProfilerModel) {\n        super();\n        this.heapProfilerModel = heapProfilerModel;\n        this.linkifier = new Components.Linkifier.Linkifier();\n        this.frameElements = [];\n    }\n    onContextMenu(link, event) {\n        const contextMenu = new UI.ContextMenu.ContextMenu(event);\n        contextMenu.appendApplicableItems(link);\n        void contextMenu.show();\n        event.consume(true);\n    }\n    onStackViewKeydown(event) {\n        const target = event.target;\n        if (!target) {\n            return;\n        }\n        if (event.key === 'Enter') {\n            const link = stackFrameToURLElement.get(target);\n            if (!link) {\n                return;\n            }\n            const linkInfo = Components.Linkifier.Linkifier.linkInfo(link);\n            if (!linkInfo) {\n                return;\n            }\n            if (Components.Linkifier.Linkifier.invokeFirstAction(linkInfo)) {\n                event.consume(true);\n            }\n            return;\n        }\n        let navDown;\n        const keyboardEvent = event;\n        if (keyboardEvent.key === 'ArrowUp') {\n            navDown = false;\n        }\n        else if (keyboardEvent.key === 'ArrowDown') {\n            navDown = true;\n        }\n        else {\n            return;\n        }\n        const index = this.frameElements.indexOf(target);\n        if (index === -1) {\n            return;\n        }\n        const nextIndex = navDown ? index + 1 : index - 1;\n        if (nextIndex < 0 || nextIndex >= this.frameElements.length) {\n            return;\n        }\n        const nextFrame = this.frameElements[nextIndex];\n        nextFrame.tabIndex = 0;\n        target.tabIndex = -1;\n        nextFrame.focus();\n        event.consume(true);\n    }\n    async setAllocatedObject(snapshot, snapshotNodeIndex) {\n        this.clear();\n        const frames = await snapshot.allocationStack(snapshotNodeIndex);\n        if (!frames) {\n            const stackDiv = this.element.createChild('div', 'no-heap-allocation-stack');\n            UI.UIUtils.createTextChild(stackDiv, i18nString(UIStrings.stackWasNotRecordedForThisObject));\n            return;\n        }\n        const stackDiv = this.element.createChild('div', 'heap-allocation-stack');\n        stackDiv.addEventListener('keydown', this.onStackViewKeydown.bind(this), false);\n        for (const frame of frames) {\n            const frameDiv = stackDiv.createChild('div', 'stack-frame');\n            this.frameElements.push(frameDiv);\n            frameDiv.tabIndex = -1;\n            const name = frameDiv.createChild('div');\n            name.textContent = UI.UIUtils.beautifyFunctionName(frame.functionName);\n            if (!frame.scriptId) {\n                continue;\n            }\n            const target = this.heapProfilerModel ? this.heapProfilerModel.target() : null;\n            const options = { columnNumber: frame.column - 1, inlineFrameIndex: 0 };\n            const urlElement = this.linkifier.linkifyScriptLocation(target, String(frame.scriptId), frame.scriptName, frame.line - 1, options);\n            frameDiv.appendChild(urlElement);\n            stackFrameToURLElement.set(frameDiv, urlElement);\n            frameDiv.addEventListener('contextmenu', this.onContextMenu.bind(this, urlElement));\n        }\n        this.frameElements[0].tabIndex = 0;\n    }\n    clear() {\n        this.element.removeChildren();\n        this.frameElements = [];\n        this.linkifier.reset();\n    }\n}\nconst stackFrameToURLElement = new WeakMap();\n//# sourceMappingURL=HeapSnapshotView.js.map","// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport { DetachedElementsProfileType } from './HeapDetachedElementsView.js';\nimport { SamplingHeapProfileType } from './HeapProfileView.js';\nimport { HeapSnapshotProfileType, TrackingHeapSnapshotProfileType } from './HeapSnapshotView.js';\nexport class ProfileTypeRegistry {\n    heapSnapshotProfileType;\n    samplingHeapProfileType;\n    trackingHeapSnapshotProfileType;\n    detachedElementProfileType;\n    constructor() {\n        this.heapSnapshotProfileType = new HeapSnapshotProfileType();\n        this.samplingHeapProfileType = new SamplingHeapProfileType();\n        this.trackingHeapSnapshotProfileType = new TrackingHeapSnapshotProfileType();\n        this.detachedElementProfileType = new DetachedElementsProfileType();\n    }\n}\nexport const instance = new ProfileTypeRegistry();\n//# sourceMappingURL=ProfileTypeRegistry.js.map","// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport { ProfilesPanel } from './ProfilesPanel.js';\nimport { instance } from './ProfileTypeRegistry.js';\nconst UIStrings = {\n    /**\n     *@description A context menu item in the Heap Profiler Panel of a profiler tool\n     */\n    revealInSummaryView: 'Reveal in Summary view',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapProfilerPanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet heapProfilerPanelInstance;\nexport class HeapProfilerPanel extends ProfilesPanel {\n    constructor() {\n        const registry = instance;\n        const profileTypes = [\n            registry.heapSnapshotProfileType,\n            registry.trackingHeapSnapshotProfileType,\n            registry.samplingHeapProfileType,\n            registry.detachedElementProfileType,\n        ];\n        super('heap-profiler', profileTypes, 'profiler.heap-toggle-recording');\n    }\n    static instance() {\n        if (!heapProfilerPanelInstance) {\n            heapProfilerPanelInstance = new HeapProfilerPanel();\n        }\n        return heapProfilerPanelInstance;\n    }\n    appendApplicableItems(_event, contextMenu, object) {\n        if (!this.isShowing()) {\n            return;\n        }\n        if (!object.objectId) {\n            return;\n        }\n        const objectId = object.objectId;\n        const heapProfiles = instance.heapSnapshotProfileType.getProfiles();\n        if (!heapProfiles.length) {\n            return;\n        }\n        const heapProfilerModel = object.runtimeModel().heapProfilerModel();\n        if (!heapProfilerModel) {\n            return;\n        }\n        function revealInView(viewName) {\n            void heapProfilerModel.snapshotObjectIdForObjectId(objectId).then(result => {\n                if (this.isShowing() && result) {\n                    this.showObject(result, viewName);\n                }\n            });\n        }\n        contextMenu.revealSection().appendItem(i18nString(UIStrings.revealInSummaryView), revealInView.bind(this, 'Summary'), { jslogContext: 'reveal-in-summary' });\n    }\n    handleAction(_context, _actionId) {\n        const panel = UI.Context.Context.instance().flavor(HeapProfilerPanel);\n        console.assert(Boolean(panel) && panel instanceof HeapProfilerPanel);\n        if (panel) {\n            panel.toggleRecord();\n        }\n        return true;\n    }\n    wasShown() {\n        super.wasShown();\n        UI.Context.Context.instance().setFlavor(HeapProfilerPanel, this);\n        // Record the memory tool load time.\n        Host.userMetrics.panelLoaded('heap-profiler', 'DevTools.Launch.HeapProfiler');\n    }\n    willHide() {\n        UI.Context.Context.instance().setFlavor(HeapProfilerPanel, null);\n        super.willHide();\n    }\n    showObject(snapshotObjectId, perspectiveName) {\n        const registry = instance;\n        const heapProfiles = registry.heapSnapshotProfileType.getProfiles();\n        for (let i = 0; i < heapProfiles.length; i++) {\n            const profile = heapProfiles[i];\n            // FIXME: allow to choose snapshot if there are several options.\n            if (profile.maxJSObjectId >= parseInt(snapshotObjectId, 10)) {\n                this.showProfile(profile);\n                const view = this.viewForProfile(profile);\n                void view.selectLiveObject(perspectiveName, snapshotObjectId);\n                break;\n            }\n        }\n    }\n}\n//# sourceMappingURL=HeapProfilerPanel.js.map","// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(\n`/*\n * Copyright 2019 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.data-grid {\n  border: none;\n}\n\n.data-grid td .size-units {\n  margin-left: 4px;\n  font-size: 75%;\n}\n\n.data-grid tr:not(.selected) td .size-units {\n  color: var(--sys-color-token-subtle);\n}\n\n.toolbar {\n  border-bottom: 1px solid var(--sys-color-divider);\n}\n\n/*# sourceURL=liveHeapProfile.css */\n`);\n\nexport default styles;\n","// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport liveHeapProfileStyles from './liveHeapProfile.css.js';\nconst UIStrings = {\n    /**\n     *@description Text for a heap profile type\n     */\n    jsHeap: 'JS Heap',\n    /**\n     *@description Text in Live Heap Profile View of a profiler tool\n     */\n    allocatedJsHeapSizeCurrentlyIn: 'Allocated JS heap size currently in use',\n    /**\n     *@description Text in Live Heap Profile View of a profiler tool\n     */\n    vms: 'VMs',\n    /**\n     *@description Text in Live Heap Profile View of a profiler tool\n     */\n    numberOfVmsSharingTheSameScript: 'Number of VMs sharing the same script source',\n    /**\n     *@description Text in Live Heap Profile View of a profiler tool\n     */\n    scriptUrl: 'Script URL',\n    /**\n     *@description Text in Live Heap Profile View of a profiler tool\n     */\n    urlOfTheScriptSource: 'URL of the script source',\n    /**\n     *@description Data grid name for Heap Profile data grids\n     */\n    heapProfile: 'Heap Profile',\n    /**\n     *@description Text in Live Heap Profile View of a profiler tool\n     *@example {1} PH1\n     */\n    anonymousScriptS: '(Anonymous Script {PH1})',\n    /**\n     *@description A unit\n     */\n    kb: 'kB',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/LiveHeapProfileView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet liveHeapProfileViewInstance;\nexport class LiveHeapProfileView extends UI.Widget.VBox {\n    gridNodeByUrl;\n    setting;\n    toggleRecordAction;\n    toggleRecordButton;\n    startWithReloadButton;\n    dataGrid;\n    currentPollId;\n    constructor() {\n        super(true);\n        this.gridNodeByUrl = new Map();\n        this.setting = Common.Settings.Settings.instance().moduleSetting('memory-live-heap-profile');\n        const toolbar = new UI.Toolbar.Toolbar('live-heap-profile-toolbar', this.contentElement);\n        this.toggleRecordAction =\n            UI.ActionRegistry.ActionRegistry.instance().getAction('live-heap-profile.toggle-recording');\n        this.toggleRecordButton =\n            UI.Toolbar.Toolbar.createActionButton(this.toggleRecordAction);\n        this.toggleRecordButton.setToggled(this.setting.get());\n        toolbar.appendToolbarItem(this.toggleRecordButton);\n        const mainTarget = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n        if (mainTarget && mainTarget.model(SDK.ResourceTreeModel.ResourceTreeModel)) {\n            const startWithReloadAction = UI.ActionRegistry.ActionRegistry.instance().getAction('live-heap-profile.start-with-reload');\n            this.startWithReloadButton = UI.Toolbar.Toolbar.createActionButton(startWithReloadAction);\n            toolbar.appendToolbarItem(this.startWithReloadButton);\n        }\n        this.dataGrid = this.createDataGrid();\n        this.dataGrid.asWidget().show(this.contentElement);\n        this.currentPollId = 0;\n    }\n    static instance() {\n        if (!liveHeapProfileViewInstance) {\n            liveHeapProfileViewInstance = new LiveHeapProfileView();\n        }\n        return liveHeapProfileViewInstance;\n    }\n    createDataGrid() {\n        const defaultColumnConfig = {\n            id: '',\n            title: Common.UIString.LocalizedEmptyString,\n            width: undefined,\n            fixedWidth: true,\n            sortable: true,\n            align: \"right\" /* DataGrid.DataGrid.Align.RIGHT */,\n            sort: DataGrid.DataGrid.Order.Descending,\n            titleDOMFragment: undefined,\n            editable: undefined,\n            nonSelectable: undefined,\n            longText: undefined,\n            disclosure: undefined,\n            weight: undefined,\n            allowInSortByEvenWhenHidden: undefined,\n            dataType: undefined,\n            defaultWeight: undefined,\n        };\n        const columns = [\n            {\n                ...defaultColumnConfig,\n                id: 'size',\n                title: i18nString(UIStrings.jsHeap),\n                width: '72px',\n                fixedWidth: true,\n                sortable: true,\n                align: \"right\" /* DataGrid.DataGrid.Align.RIGHT */,\n                sort: DataGrid.DataGrid.Order.Descending,\n                tooltip: i18nString(UIStrings.allocatedJsHeapSizeCurrentlyIn),\n            },\n            {\n                ...defaultColumnConfig,\n                id: 'isolates',\n                title: i18nString(UIStrings.vms),\n                width: '40px',\n                fixedWidth: true,\n                align: \"right\" /* DataGrid.DataGrid.Align.RIGHT */,\n                tooltip: i18nString(UIStrings.numberOfVmsSharingTheSameScript),\n            },\n            {\n                ...defaultColumnConfig,\n                id: 'url',\n                title: i18nString(UIStrings.scriptUrl),\n                fixedWidth: false,\n                sortable: true,\n                tooltip: i18nString(UIStrings.urlOfTheScriptSource),\n            },\n        ];\n        const dataGrid = new DataGrid.SortableDataGrid.SortableDataGrid({\n            displayName: i18nString(UIStrings.heapProfile),\n            columns,\n            editCallback: undefined,\n            deleteCallback: undefined,\n            refreshCallback: undefined,\n        });\n        dataGrid.setResizeMethod(\"last\" /* DataGrid.DataGrid.ResizeMethod.LAST */);\n        dataGrid.element.classList.add('flex-auto');\n        dataGrid.element.addEventListener('keydown', this.onKeyDown.bind(this), false);\n        dataGrid.addEventListener(\"OpenedNode\" /* DataGrid.DataGrid.Events.OPENED_NODE */, this.revealSourceForSelectedNode, this);\n        dataGrid.addEventListener(\"SortingChanged\" /* DataGrid.DataGrid.Events.SORTING_CHANGED */, this.sortingChanged, this);\n        for (const info of columns) {\n            const headerCell = dataGrid.headerTableHeader(info.id);\n            if (headerCell) {\n                headerCell.setAttribute('title', info.tooltip);\n            }\n        }\n        return dataGrid;\n    }\n    wasShown() {\n        super.wasShown();\n        void this.poll();\n        this.registerCSSFiles([liveHeapProfileStyles]);\n        this.setting.addChangeListener(this.settingChanged, this);\n    }\n    willHide() {\n        ++this.currentPollId;\n        this.setting.removeChangeListener(this.settingChanged, this);\n    }\n    settingChanged(value) {\n        this.toggleRecordButton.setToggled(value.data);\n    }\n    async poll() {\n        const pollId = this.currentPollId;\n        do {\n            const isolates = Array.from(SDK.IsolateManager.IsolateManager.instance().isolates());\n            const profiles = await Promise.all(isolates.map(isolate => {\n                const heapProfilerModel = isolate.heapProfilerModel();\n                if (!heapProfilerModel) {\n                    return null;\n                }\n                return heapProfilerModel.getSamplingProfile();\n            }));\n            if (this.currentPollId !== pollId) {\n                return;\n            }\n            this.update(isolates, profiles);\n            await new Promise(r => window.setTimeout(r, 3000));\n        } while (this.currentPollId === pollId);\n    }\n    update(isolates, profiles) {\n        const dataByUrl = new Map();\n        profiles.forEach((profile, index) => {\n            if (profile) {\n                processNodeTree(isolates[index], '', profile.head);\n            }\n        });\n        const rootNode = this.dataGrid.rootNode();\n        const exisitingNodes = new Set();\n        for (const pair of dataByUrl) {\n            const url = pair[0];\n            const size = pair[1].size;\n            const isolateCount = pair[1].isolates.size;\n            if (!url) {\n                console.info(`Node with empty URL: ${size} bytes`); // eslint-disable-line no-console\n                continue;\n            }\n            let node = this.gridNodeByUrl.get(url);\n            if (node) {\n                node.updateNode(size, isolateCount);\n            }\n            else {\n                node = new GridNode(url, size, isolateCount);\n                this.gridNodeByUrl.set(url, node);\n                rootNode.appendChild(node);\n            }\n            exisitingNodes.add(node);\n        }\n        for (const node of rootNode.children.slice()) {\n            const gridNode = node;\n            if (!exisitingNodes.has(gridNode)) {\n                gridNode.remove();\n            }\n            this.gridNodeByUrl.delete(gridNode.url);\n        }\n        this.sortingChanged();\n        function processNodeTree(isolate, parentUrl, node) {\n            const url = node.callFrame.url || parentUrl || systemNodeName(node) || anonymousScriptName(node);\n            node.children.forEach(processNodeTree.bind(null, isolate, url));\n            if (!node.selfSize) {\n                return;\n            }\n            let data = dataByUrl.get(url);\n            if (!data) {\n                data = { size: 0, isolates: new Set() };\n                dataByUrl.set(url, data);\n            }\n            data.size += node.selfSize;\n            data.isolates.add(isolate);\n        }\n        function systemNodeName(node) {\n            const name = node.callFrame.functionName;\n            return name.startsWith('(') && name !== '(root)' ? name : '';\n        }\n        function anonymousScriptName(node) {\n            return Number(node.callFrame.scriptId) ? i18nString(UIStrings.anonymousScriptS, { PH1: node.callFrame.scriptId }) :\n                '';\n        }\n    }\n    onKeyDown(event) {\n        if (!(event.key === 'Enter')) {\n            return;\n        }\n        event.consume(true);\n        this.revealSourceForSelectedNode();\n    }\n    revealSourceForSelectedNode() {\n        const node = this.dataGrid.selectedNode;\n        if (!node || !node.url) {\n            return;\n        }\n        const sourceCode = Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(node.url);\n        if (sourceCode) {\n            void Common.Revealer.reveal(sourceCode);\n        }\n    }\n    sortingChanged() {\n        const columnId = this.dataGrid.sortColumnId();\n        if (!columnId) {\n            return;\n        }\n        function sortByUrl(a, b) {\n            return b.url.localeCompare(a.url);\n        }\n        function sortBySize(a, b) {\n            return b.size - a.size;\n        }\n        const sortFunction = columnId === 'url' ? sortByUrl : sortBySize;\n        this.dataGrid.sortNodes(sortFunction, this.dataGrid.isSortOrderAscending());\n    }\n    toggleRecording() {\n        const enable = !this.setting.get();\n        if (enable) {\n            this.startRecording(false);\n        }\n        else {\n            void this.stopRecording();\n        }\n    }\n    startRecording(reload) {\n        this.setting.set(true);\n        if (!reload) {\n            return;\n        }\n        const mainTarget = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n        if (!mainTarget) {\n            return;\n        }\n        const resourceTreeModel = mainTarget.model(SDK.ResourceTreeModel.ResourceTreeModel);\n        if (resourceTreeModel) {\n            resourceTreeModel.reloadPage();\n        }\n    }\n    async stopRecording() {\n        this.setting.set(false);\n    }\n}\nexport class GridNode extends DataGrid.SortableDataGrid.SortableDataGridNode {\n    url;\n    size;\n    isolateCount;\n    constructor(url, size, isolateCount) {\n        super();\n        this.url = url;\n        this.size = size;\n        this.isolateCount = isolateCount;\n    }\n    updateNode(size, isolateCount) {\n        if (this.size === size && this.isolateCount === isolateCount) {\n            return;\n        }\n        this.size = size;\n        this.isolateCount = isolateCount;\n        this.refresh();\n    }\n    createCell(columnId) {\n        const cell = this.createTD(columnId);\n        switch (columnId) {\n            case 'url':\n                cell.textContent = this.url;\n                break;\n            case 'size':\n                cell.textContent = Platform.NumberUtilities.withThousandsSeparator(Math.round(this.size / 1e3));\n                cell.createChild('span', 'size-units').textContent = i18nString(UIStrings.kb);\n                break;\n            case 'isolates':\n                cell.textContent = `${this.isolateCount}`;\n                break;\n        }\n        return cell;\n    }\n}\nexport class ActionDelegate {\n    handleAction(_context, actionId) {\n        void (async () => {\n            const profileViewId = 'live-heap-profile';\n            await UI.ViewManager.ViewManager.instance().showView(profileViewId);\n            const view = UI.ViewManager.ViewManager.instance().view(profileViewId);\n            if (view) {\n                const widget = await view.widget();\n                this.innerHandleAction(widget, actionId);\n            }\n        })();\n        return true;\n    }\n    innerHandleAction(profilerView, actionId) {\n        switch (actionId) {\n            case 'live-heap-profile.toggle-recording':\n                profilerView.toggleRecording();\n                break;\n            case 'live-heap-profile.start-with-reload':\n                profilerView.startRecording(true);\n                break;\n            default:\n                console.assert(false, `Unknown action: ${actionId}`);\n        }\n    }\n}\n//# sourceMappingURL=LiveHeapProfileView.js.map"],"names":["TempFile","#lastBlob","pieces","startOffset","endOffset","Common.Console.Console","blob","reader","resolve","reject","error","outputStream","progress","ChunkedFileReader","success","UIStrings","str_","i18n.i18n.registerUIStrings","i18nString","i18n.i18n.getLocalizedString","ProfileDataGridNode","DataGrid.DataGrid.DataGridNode","profileNode","owningTree","hasChildren","UI.UIUtils.beautifyFunctionName","gridNodeGroups","comparator","force","gridNodeGroupIndex","gridNodes","count","index","gridNode","children","childCount","childIndex","container","child","shouldAbsorb","orphanedChild","existingChild","currentComparator","columnId","cell","warningIcon","IconButton.Icon.Icon","UI.Tooltip.Tooltip","UI.UIUtils.createTextChild","urlElement","value","percent","div","valueSpan","valueText","percentSpan","percentText","valueAccessibleText","sortComparator","profileDataGridNode","node","ProfileDataGridTree","formatter","searchableView","total","property","isAscending","propertyComparators","lhs","rhs","_profileDataGridNode","childToInsert","searchConfig","query","greaterThan","lessThan","equalTo","percentUnits","millisecondsUnits","secondsUnits","queryNumber","queryNumberMilliseconds","matcher","Platform.StringUtilities.createPlainTextSearchRegex","matchesQuery","shouldJump","jumpBackwards","deepSearch","current","item","i","searchResult","BottomUpProfileDataGridNode","remainingNodeInfos","nodeInfo","ancestor","focusNode","totalAccountedFor","parent","aCallUID","BottomUpProfileDataGridTree","rootProfileNode","profileNodeUIDs","profileNodeGroups","visitedProfileNodesForCallUID","profileNodeGroupIndex","parentProfileNodes","profileNodes","profileNodeUIDValues","visitedNodes","parentCount","parentIndex","parentUID","uid","currentNode","excludedCallUID","excludedTopLevelChild","Platform.ArrayUtilities.removeElement","styles","ProfileHeader","Common.ObjectWrapper.ObjectWrapper","profileType","title","subtitle","wait","StatusUpdate","_dataDisplayDelegate","_file","_profile","ProfileType","id","name","isFinished","profile","_enable","file","fileExtension","_title","IsolateSelector","UI.Widget.VBox","UI.ListModel.ListModel","UI.ListControl.ListControl","UI.ListControl.ListMode","UI.ARIAUtils.setLabel","trendIntervalMinutes","SDK.IsolateManager.MemoryTrendWindowMs","SDK.IsolateManager.IsolateManager","SDK.TargetManager.TargetManager","isolate","ListItem","event","model","SDK.RuntimeModel.RuntimeModel","listItem","trend","Platform.NumberUtilities.bytesToString","trendValueMs","element","changeRateBytesPerSecond","changeRateText","changeText","changeLabel","_item","_fromElement","_toElement","_from","to","fromElement","toElement","UI.Context.Context","SDK.HeapProfilerModel.HeapProfilerModel","SDK.CPUProfilerModel.CPUProfilerModel","UI.ARIAUtils.markAsOption","modelCountByName","target","parsedURL","Common.ParsedURL.ParsedURL","domain","titleDiv","ProfileLauncherView","Common.ObjectWrapper.eventMixin","profilesPanel","profileTypeSelectorElement","Common.Settings.Settings","UI.ARIAUtils.markAsRadioGroup","isolateSelectorElement","isolateSelector","isolateSelectorElementChild","buttonsDiv","UI.UIUtils.createTextButton","Buttons.Button.Button","UI.ActionRegistry.ActionRegistry","UI.UIUtils.anotherProfilerActiveLabel","optionElement","recordButtonEnabled","labelElement","UI.UIUtils.createRadioLabel","descriptionElement","UI.ARIAUtils.setDescription","customContent","headerText","typeId","optionElementAndProfileType","type","enabled","profileLauncherViewStyles","ProfileSidebarTreeElement","UI.TreeOutline.TreeElement","dataDisplayDelegate","className","VisualLogging.value","VisualLogging.dropDown","statusUpdate","eventTarget","config","UI.InplaceEditor.Config","UI.InplaceEditor.InplaceEditor","newTitle","contextMenu","UI.ContextMenu.ContextMenu","small","ProfilesPanel","UI.Panel.PanelWithSidebar","#saveToFileAction","profileTypes","recordingActionId","mainContainer","ProfilesSidebarTreeElement","UI.TreeOutline.TreeOutlineInShadow","toolbarContainerLeft","VisualLogging.toolbar","toolbar","UI.Toolbar.Toolbar","types","ev","handled","visibleView","UI.UIUtils.createFileSelectorElement","fileName","extensions","ext","UI.UIUtils.MessageDialog","toggleButton","Platform.DOMUtilities.deepActiveElement","isProfiling","toggled","hasSelectedTarget","enable","profileTypeSection","ProfileTypeSidebarSection","onAddProfileHeader","onRemoveProfileHeader","profileComplete","profiles","view","sidebarElement","items","_snapshotObjectId","_perspectiveName","_nodeIndex","objectValueStyles","profilesPanelStyles","heapProfilerStyles","profilesSidebarTreeStyles","sidebarParent","profileTreeElement","profileTitle","group","ProfileGroup","groupSize","ProfileGroupSidebarTreeElement","firstProfileTreeElement","selected","groupElements","pos","elements","lastChild","panel","IconButton.Icon.create","ActionDelegate$1","context","actionId","HeapDetachedElementsDataGrid","DataGrid.DataGrid.DataGridImpl","columns","HeapDetachedElementsDataGridNode","detachedElementInfo","domModel","retainedNodeId","DOMNode","SDK.DOMModel.DOMNode","#nodeRenderer","size","#getNodeSize","queue","treeOutline","Elements.ElementsTreeOutline.ElementsTreeOutline","firstChild","nodes","descendantNode","descendantsChildren","treeElement","icon","colorGeneratorInstance","ProfileFlameChartDataProvider","#font","PerfUI.Font.DEFAULT_FONT_SIZE","PerfUI.Font.getFontFamilyForCanvas","Common.Color.Generator","precision","i18n.TimeUtilities.preciseMillisToString","_entryIndex","entryIndex","boldFont","_context","_text","_barX","_barY","_barWidth","_barHeight","ProfileFlameChart","dataProvider","OverviewPane","PerfUI.FlameChart.FlameChart","windowLeft","windowRight","timeLeft","timeRight","eventIndex","_shouldJump","selectedEntryIndex","entriesCount","OverviewCalculator$1","overviewPane","totalTime","time","OverviewCalculator","PerfUI.OverviewGrid.OverviewGrid","windowStartTime","windowEndTime","_startTime","_endTime","_flameChart","_group","startTime","windowPosition","PerfUI.FlameChart.RulerHeight","canvasWidth","canvasHeight","drawData","offsetFromBottom","lineWidth","yScaleFactor","x","width","timelineData","entryStartTimes","entryTotalTimes","entryLevels","length","minimumBoundary","scaleFactor","start","finish","height","ratio","TopDownProfileDataGridNode","childrenLength","TopDownProfileDataGridTree","ProfileView","UI.View.SimpleView","UI.SearchableView.SearchableView","DataGrid.DataGrid.Order","UI.Toolbar.ToolbarComboBox","UI.Toolbar.ToolbarButton","Components.Linkifier.Linkifier","maxLinkLength","entryInfo","table","entry","row","nodeFormatter","viewTypes","optionNames","options","optionName","option","_columnId","selectedProfileNode","debuggerModel","script","location","uiLocation","Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding","Common.Revealer.reveal","isFlame","Host.userMetrics","Host.UserMetrics.Action","selectedNode","sortAscending","sortColumnId","sortProperty","WritableProfileHeader","#profileReceivedPromise","#profileReceivedFulfill","_reader","text","fileOutputStream","Bindings.FileUtils.FileOutputStream","now","Platform.DateUtilities.toISO8601Compact","data","fileReader","Bindings.FileUtils.ChunkedFileReader","e","Bindings.TempFile.TempFile","DetachedElementsProfileView","UI.Toolbar.ToolbarText","objectId","perspectiveName","detachedElements","SDK.DOMModel.DOMModel","detachedElement","DetachedElementsProfileType","description","heapProfilerModel","DetachedElementsProfileHeader","HeapTimelineOverview","VisualLogging.section","SmoothScale","Samples","drawFrame","samples","profileSamples","sizes","topSizes","timestamps","maxSize","aggregateAndCall","callback","currentX","maxSizeCallback","maybeContext","gridY","gridValue","gridLabelHeight","maxGridValue","drawBarCallback","label","labelPadding","labelX","labelY","labelWidth","ids","minIndex","Platform.ArrayUtilities.lowerBound","Platform.ArrayUtilities.DEFAULT_COMPARATOR","maxIndex","Platform.ArrayUtilities.upperBound","minId","maxId","timeDeltaMs","maxChangePerDelta","scaleChange","Platform.NumberUtilities.clamp","chart","i18n.TimeUtilities.secondsToString","convertToSamplingHeapProfile","profileHeader","HeapProfileView","NodeFormatter","SamplingHeapProfileModel","Root.Runtime.experiments","profileData","sample","bucket","Common.UIString.LocalizedEmptyString","HeapFlameChartDataProvider","SamplingHeapProfileTypeBase","SamplingHeapProfileHeader","warnings","UI.InspectorView.InspectorView","recordedProfile","wasClearedDuringRecording","samplingHeapProfileTypeInstance","SamplingHeapProfileType","recordingProfile","samplingProfile","SamplingHeapProfileNode","CPUProfile.ProfileTreeModel.ProfileNode","callFrame","CPUProfile.ProfileTreeModel.ProfileTreeModel","minOrdinal","maxOrdinal","nodeIdToSizeMap","translateProfileTree","root","resultRoot","sourceNodeStack","targetNodeStack","sourceNode","targetNode","targetChild","pruneEmptyBranches","profileView","Platform.NumberUtilities.withThousandsSeparator","_node","_precision","nodesCount","entryNodes","depth","maxDepth","position","addNode","PerfUI.FlameChart.FlameChartTimelineData","pushEntryInfoRow","linkifier","link","HeapSnapshotProgressEvent","baseSystemDistance","baseUnreachableDistance","Node","distance","nodeIndex","retainedSize","selfSize","Edge","edgeIndex","ComparatorConfig","fieldName1","ascending1","fieldName2","ascending2","ItemsRange","startPosition","endPosition","totalLength","NodeFilter","minNodeId","maxNodeId","o","SearchConfig","caseSensitive","isRegex","jumpBackward","_global","HeapSnapshotGridNodeBase","HeapSnapshotGridNode","tree","_heapProfilerModel","_objectGroupName","_contextMenu","num","HeapSnapshotModel.HeapSnapshotModel.baseSystemDistance","nodePosition","indexOfFirstChildInRange","range","jslog","VisualLogging.tableCell","UI.Fragment.html","dataGrid","percentColumn","UI.ARIAUtils.markAsHidden","entity","fromPosition","toPosition","firstNotSerializedPosition","serializeNextChunk","end","itemsRange","childrenRetrieved","insertRetrievedChild","insertionIndex","hash","insertShowMoreButton","from","button","DataGrid.ShowMoreDataGridNode.ShowMoreDataGridNode","itemIndex","itemPosition","rangeIndex","found","skipCount","nextRange","newEndOfRange","l","instanceCount","Events","HeapSnapshotGenericObjectNode","snapshot","shallowSizePercent","retainedSizePercent","valueStyle","fragment","UI.Fragment.Fragment","frameIcon","_div","linkContainer","objectGroupName","baseLink","isEmpty","fullName","hasObjectId","startPos","endPos","fullURL","url","Platform.StringUtilities.trimURL","Platform.StringUtilities.trimMiddle","match","objectName","snapshotNodeId","remoteObject","SDK.ConsoleModel.ConsoleModel","SDK.RuntimeModel.ExecutionContext","HeapSnapshotObjectNode","edge","parentObjectNode","HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig","nameClass","HeapSnapshotRetainingObjectNode","#ignored","parentRetainingObjectNode","snapshotNodeIndex","HeapSnapshotModel.HeapSnapshotModel.baseUnreachableDistance","maxExpandLevels","retainer","HeapSnapshotSortableDataGridEvents","result","HeapSnapshotInstanceNode","isDeletedNode","HeapSnapshotConstructorNode","aggregate","nodeFilter","snapshotObjectId","filterValue","HeapSnapshotDiffNodesProvider","addedNodesProvider","deletedNodesProvider","addedCount","removedCount","beginPosition","addedItems","HeapSnapshotModel.HeapSnapshotModel.ItemsRange","HeapSnapshotDiffNode","diffForClass","delta","AllocationGridNode","callers","callersChain","parentNode","caller","callersBranch","allocationNode","adjacencyMap","HeapSnapshotSortableDataGridBase","HeapSnapshotSortableDataGrid","dataGridParameters","tooltips","info","headerCell","HeapSnapshotModel.HeapSnapshotModel.NodeFilter","_snapshot","nameFilterValue","nameFilter","_heapSnapshotObjectId","_sortColumnId","_ascending","sortFields","sortByTwoFields","nodeA","nodeB","field1","field2","sortFunction","revealed","_force","HeapSnapshotViewportDataGrid","_child","scrollHeight","scrollTop","scrollBottom","viewPortHeight","hysteresisHeight","topBound","bottomBound","topPadding","newTop","bottomPadding","pathToReveal","scrollGap","j","viewportTop","viewportBottom","elemTop","_event","HeapSnapshotContainmentDataGrid","displayName","nodeId","HeapSnapshotModel.HeapSnapshotModel.Node","fakeEdge","HeapSnapshotModel.HeapSnapshotModel.Edge","rootNode","HeapSnapshotRetainmentDataGrid","sortColumn","HeapSnapshotRetainmentDataGridEvents","HeapSnapshotConstructorsDataGrid","classNode","allocationNodeId","aggregates","constructor","maybeNodeFilter","profileIndex","filterName","HeapSnapshotDiffDataGrid","baseSnapshot","interfaceDefinitions","aggregatesForDiff","diffByClassName","diff","AllocationDataGrid","tops","top","fieldName","compareResult","compare","a","b","HeapSnapshotWorkerProxy","eventHandler","Common.Worker.WorkerWrapper","profileUid","snapshotReceivedCallback","proxy","HeapSnapshotLoaderProxy","callId","methodName","proxyConstructor","methodArguments","newObjectId","remoteResult","hasLongRunningCalls","message","HeapSnapshotProxyObject","worker","args","chunk","snapshotProxy","HeapSnapshotProxy","filter","baseSnapshotId","baseSnapshotAggregates","HeapSnapshotProviderProxy","nodeIndexes","moduleUIstr_","ModuleUIStrings.UIStrings","moduleI18nString","HeapSnapshotView","isHeapTimeline","TrackingHeapSnapshotProfileType","hasAllocationStacks","instance","UI.SplitWidget.SplitWidget","HeapSnapshotStatisticsView","VisualLogging.pane","HeapAllocationStackView","UI.TabbedPane.TabbedPane","splitWidgetResizer","retainmentViewHeader","retainingPathsTitleDiv","retainingPathsTitle","ComparisonPerspective","SummaryPerspective","ContainmentPerspective","AllocationPerspective","StatisticsPerspective","UI.Toolbar.ToolbarFilter","restoreIgnoredRetainers","UI.PopoverHelper.PopoverHelper","Common.Throttler.Throttler","existingProfile","rawLocation","sourceURL","heapSnapshotProxy","statistics","records","nextQuery","HeapSnapshotModel.HeapSnapshotModel.SearchConfig","searchResultIndex","selectedIndex","indexOfFirstAlwaysAvailableFilter","nodeItem","dataSource","perspectiveTitle","perspectiveIndex","perspective","promise","baseSnapshotProxy","span","UI.UIUtils.enclosingNodeOrSelfWithNodeName","objectPopoverHelper","popover","SDK.RemoteObject.RemoteObject","ObjectUI.ObjectPopoverHelper.ObjectPopoverHelper","multipleSnapshots","list","originalSize","dividerIndex","divider","newSize","distanceFromEnd","Perspective","_heapSnapshotView","heapSnapshotView","allocatedObjectsView","resizer","HeapSnapshotProfileType","showOptionToExposeInternalsInHeapSnapshot","exposeInternalsInHeapSnapshotCheckbox","UI.SettingsUI.createSettingCheckbox","HeapProfileHeader","done","finished","lastSeenObjectId","timestamp","currentIndex","checkboxSetting","stopPromise","wasRecording","tempFile","eventName","HeapSnapshotModel.HeapSnapshotModel.HeapSnapshotProgressEvent","messageObject","i18n.i18n.deserializeUIString","onOpen","accepted","percentValue","PerfUI.PieChart.PieChart","i18n.DevToolsLocale.DevToolsLocale","UI.Widget.Widget","stackFrameToURLElement","linkInfo","navDown","keyboardEvent","nextIndex","nextFrame","frames","stackDiv","frame","frameDiv","ProfileTypeRegistry","heapProfilerPanelInstance","HeapProfilerPanel","registry","object","revealInView","viewName","_actionId","heapProfiles","liveHeapProfileViewInstance","LiveHeapProfileView","mainTarget","SDK.ResourceTreeModel.ResourceTreeModel","startWithReloadAction","defaultColumnConfig","DataGrid.SortableDataGrid.SortableDataGrid","liveHeapProfileStyles","pollId","isolates","r","dataByUrl","processNodeTree","exisitingNodes","pair","isolateCount","GridNode","parentUrl","systemNodeName","anonymousScriptName","sourceCode","Workspace.Workspace.WorkspaceImpl","sortByUrl","sortBySize","reload","resourceTreeModel","DataGrid.SortableDataGrid.SortableDataGridNode","ActionDelegate","profileViewId","UI.ViewManager.ViewManager","widget","profilerView"],"mappings":"shEA+BO,MAAMA,EAAS,CAClBC,GACA,aAAc,CACV,KAAKA,GAAY,IACpB,CACD,MAAMC,EAAQ,CACN,KAAKD,IACLC,EAAO,QAAQ,KAAKD,EAAS,EAEjC,KAAKA,GAAY,IAAI,KAAKC,EAAQ,CAAE,KAAM,YAAY,CAAE,CAC3D,CACD,MAAO,CACH,OAAO,KAAK,WACf,CACD,MAAO,CACH,OAAO,KAAKD,GAAY,KAAKA,GAAU,KAAO,CACjD,CACD,MAAM,UAAUE,EAAaC,EAAW,CACpC,GAAI,CAAC,KAAKH,GACNI,OAAAA,EAAuB,SAAQ,EAAG,MAAM,oDAAoD,EACrF,GAEX,MAAMC,EAAO,OAAOH,GAAgB,UAAY,OAAOC,GAAc,SACjE,KAAKH,GAAU,MAAME,EAAaC,CAAS,EAC3C,KAAKH,GACHM,EAAS,IAAI,WACnB,GAAI,CACA,MAAM,IAAI,QAAQ,CAACC,EAASC,IAAW,CACnCF,EAAO,UAAYC,EACnBD,EAAO,QAAUE,EACjBF,EAAO,WAAWD,CAAI,CACtC,CAAa,CACJ,OACMI,EAAO,CACVL,EAAuB,SAAQ,EAAG,MAAM,kCAAoCK,EAAM,OAAO,CAC5F,CACD,OAAOH,EAAO,MACjB,CACD,MAAM,mBAAmBI,EAAcC,EAAU,CAC7C,GAAI,CAAC,KAAKX,GACN,OAAKU,EAAa,QACX,KAEX,MAAMJ,EAAS,IAAIM,GAAkB,KAAKZ,GAAW,GAAK,IAAO,IAAMW,CAAQ,EAC/E,OAAOL,EAAO,KAAKI,CAAY,EAAE,KAAKG,GAAWA,EAAU,KAAOP,EAAO,MAAO,CAAA,CACnF,CACD,QAAS,CACL,KAAKN,GAAY,IACpB,CACL,CChDA,MAAMc,GAAY,CAQd,cAAe,uBAMf,2BAA4B,cAChC,EACMC,GAAOC,EAA4B,qCAAsCF,EAAS,EAClFG,GAAaC,EAA6B,KAAK,OAAWH,EAAI,EAC7D,MAAMI,UAA4BC,EAA+B,CACpE,wBACA,yBACA,4BACA,YACA,KACA,kBACA,eACA,QACA,KACA,MACA,aACA,YACA,IACA,YACA,UACA,UACA,WACA,cACA,YAAYC,EAAaC,EAAYC,EAAa,CAC9C,MAAM,KAAMA,CAAW,EACvB,KAAK,wBAA0B,GAC/B,KAAK,yBAA2B,GAChC,KAAK,4BAA8B,GACnC,KAAK,YAAcF,EACnB,KAAK,KAAOC,EACZ,KAAK,kBAAoB,IAAI,IAC7B,KAAK,eAAiB,KACtB,KAAK,QAAUD,EAAY,QAC3B,KAAK,KAAOA,EAAY,KACxB,KAAK,MAAQA,EAAY,MACzB,KAAK,aAAeG,GAAgCH,EAAY,YAAY,EAC5E,KAAK,YAAcA,EAAY,aAAe,GAC9C,KAAK,IAAMA,EAAY,IACvB,KAAK,YAAc,KACnB,KAAK,UAAY,EACpB,CACD,OAAO,KAAKI,EAAgBC,EAAYC,EAAO,CAC3C,QAASC,EAAqB,EAAGA,EAAqBH,EAAe,OAAQ,EAAEG,EAAoB,CAC/F,MAAMC,EAAYJ,EAAeG,CAAkB,EAC7CE,EAAQD,EAAU,OACxB,QAASE,EAAQ,EAAGA,EAAQD,EAAO,EAAEC,EAAO,CACxC,MAAMC,EAAWH,EAAUE,CAAK,EAGhC,GAAI,CAACJ,IAAU,CAACK,EAAS,UAAYA,EAAS,iBAAmBN,GAAa,CACtEM,EAAS,SAAS,SAClBA,EAAS,sBAAwB,IAErC,QACH,CACDA,EAAS,eAAiBN,EAC1B,MAAMO,EAAWD,EAAS,SACpBE,EAAaD,EAAS,OAC5B,GAAIC,EAAY,CAGZD,EAAS,KAAKP,CAAU,EACxB,QAASS,EAAa,EAAGA,EAAaD,EAAY,EAAEC,EAChDF,EAASE,CAAU,EAAE,oBAAoBA,CAAU,EAEvDV,EAAe,KAAKQ,CAAQ,CAC/B,CACJ,CACJ,CACJ,CACD,OAAO,MAAMG,EAAWC,EAAOC,EAAc,CACzCF,EAAU,MAAQC,EAAM,KACnBC,IACDF,EAAU,OAASC,EAAM,OAE7B,IAAIJ,EAAWG,EAAU,SAAS,MAAK,EACvCA,EAAU,eAAc,EACxB,IAAIN,EAAQG,EAAS,OACrB,QAASF,EAAQ,EAAGA,EAAQD,EAAO,EAAEC,GAC7B,CAACO,GAAgBL,EAASF,CAAK,IAAMM,IACrCD,EAAU,YAAYH,EAASF,CAAK,CAAC,EAG7CE,EAAWI,EAAM,SAAS,QAC1BP,EAAQG,EAAS,OACjB,QAASF,EAAQ,EAAGA,EAAQD,EAAO,EAAEC,EAAO,CACxC,MAAMQ,EAAgBN,EAASF,CAAK,EAC9BS,EAAgBJ,EAAU,kBAAkB,IAAIG,EAAc,OAAO,EACvEC,EACAA,EAAc,MAAMD,EAAe,EAAK,EAGxCH,EAAU,YAAYG,CAAa,CAE1C,CACJ,CACD,OAAO,SAASH,EAAW,CACvB,GAAIA,EAAU,UACV,OAEJA,EAAU,UAAY,GACtBA,EAAU,iBAAgB,EAC1B,MAAMK,EAAoBL,EAAU,KAAK,eACrCK,GACAL,EAAU,KAAKK,EAAmB,EAAI,CAE7C,CACD,WAAWC,EAAU,CACjB,OAAQA,EAAQ,CACZ,IAAK,OAAQ,CACT,MAAMC,EAAO,KAAK,gBAAgB,KAAK,KAAM,KAAK,YAAaD,CAAQ,EACvE,OAAAC,EAAK,UAAU,OAAO,YAAa,KAAK,uBAAuB,EACxDA,CACV,CACD,IAAK,QAAS,CACV,MAAMA,EAAO,KAAK,gBAAgB,KAAK,MAAO,KAAK,aAAcD,CAAQ,EACzE,OAAAC,EAAK,UAAU,OAAO,YAAa,KAAK,wBAAwB,EACzDA,CACV,CACD,IAAK,WAAY,CACb,MAAMA,EAAO,KAAK,SAASD,CAAQ,EAEnC,GADAC,EAAK,UAAU,OAAO,YAAa,KAAK,2BAA2B,EAC/D,KAAK,YAAa,CAClBA,EAAK,UAAU,IAAI,eAAe,EAClC,MAAMC,EAAc,IAAIC,GACxBD,EAAY,KAAO,CAAE,SAAU,iBAAkB,MAAO,sBAAuB,MAAO,OAAQ,OAAQ,MAAM,EAC5GA,EAAY,UAAU,IAAI,qBAAqB,EAC/CE,EAAmB,QAAQF,EAAa3B,GAAWH,GAAU,cAAe,CAAE,IAAK,KAAK,WAAW,CAAE,CAAC,EACtG6B,EAAK,YAAYC,CAAW,CAC/B,CAED,GADAG,GAA2BJ,EAAM,KAAK,YAAY,EAC9C,KAAK,YAAY,WAAa,IAC9B,OAAOA,EAEX,MAAMK,EAAa,KAAK,KAAK,UAAU,YAAY,IAAI,EACvD,OAAKA,IAGLA,EAAW,MAAM,SAAW,MAC5BL,EAAK,YAAYK,CAAU,EAC3B,KAAK,YAAcA,GACZL,CACV,CACJ,CACD,OAAO,MAAM,WAAWD,CAAQ,CACnC,CACD,gBAAgBO,EAAOC,EAASR,EAAU,CACtC,MAAMC,EAAO,SAAS,cAAc,IAAI,EACxCA,EAAK,UAAU,IAAI,gBAAgB,EACnC,MAAMQ,EAAMR,EAAK,YAAY,MAAO,yBAAyB,EACvDS,EAAYD,EAAI,YAAY,MAAM,EAClCE,EAAY,KAAK,KAAK,UAAU,YAAYJ,EAAO,IAAI,EAC7DG,EAAU,YAAcC,EACxB,MAAMC,EAAcH,EAAI,YAAY,OAAQ,gBAAgB,EACtDI,EAAc,KAAK,KAAK,UAAU,cAAcL,EAAS,IAAI,EACnEI,EAAY,YAAcC,EAC1B,MAAMC,EAAsB,KAAK,KAAK,UAAU,0BAA0BP,EAAO,IAAI,EACrF,YAAK,sBAAsBhC,GAAWH,GAAU,2BAA4B,CAAE,IAAK0C,EAAqB,IAAKD,CAAW,CAAE,EAAGZ,EAAMD,CAAQ,EACpIC,CACV,CACD,KAAKjB,EAAYC,EAAO,CACpB,MAAM8B,EAAiB/B,EACvB,OAAOP,EAAoB,KAAK,CAAC,CAAC,IAAI,CAAC,EAAGsC,EAAgB9B,CAAK,CAClE,CACD,YAAYU,EAAON,EAAO,CACtB,MAAM2B,EAAsBrB,EAC5B,MAAM,YAAYqB,EAAqB3B,CAAK,EAC5C,KAAK,kBAAkB,IAAI2B,EAAoB,QAASA,CAAmB,CAC9E,CACD,YAAYA,EAAqB,CAC7B,MAAM,YAAYA,CAAmB,EACrC,KAAK,kBAAkB,OAAOA,EAAoB,OAAO,CAC5D,CACD,gBAAiB,CACb,MAAM,eAAc,EACpB,KAAK,kBAAkB,OAC1B,CACD,UAAUC,EAAM,CACZ,OAAKA,GAGE,KAAK,kBAAkB,IAAIA,EAAK,OAAO,GAAK,IACtD,CACD,IAAI,aAAc,CACd,OAAO,KAAK,KAAO,KAAK,KAAK,MAAQ,GACxC,CACD,IAAI,cAAe,CACf,OAAO,KAAK,MAAQ,KAAK,KAAK,MAAQ,GACzC,CACD,UAAW,CACPxC,EAAoB,SAAS,IAAI,CACpC,CACD,kBAAmB,CAElB,CAGD,MAAO,CACC,KAAK,gBAGT,KAAK,UAAY,KAAK,KACtB,KAAK,WAAa,KAAK,MACvB,KAAK,cAAgB,KAAK,SAAS,MAAK,EAC3C,CAKD,SAAU,CACN,GAAI,CAAC,KAAK,cACN,OAEA,KAAK,WAAa,KAAK,aACvB,KAAK,KAAO,KAAK,UACjB,KAAK,MAAQ,KAAK,YAEtB,KAAK,eAAc,EACnB,MAAMc,EAAW,KAAK,cAChBH,EAAQG,EAAS,OACvB,QAASF,EAAQ,EAAGA,EAAQD,EAAO,EAAEC,EACjCE,EAASF,CAAK,EAAE,UAChB,KAAK,YAAYE,EAASF,CAAK,CAAC,CAEvC,CACD,MAAMM,EAAOC,EAAc,CACvBnB,EAAoB,MAAM,KAAMkB,EAAOC,CAAY,CACtD,CACL,CACO,MAAMsB,EAAoB,CAC7B,KACA,KACA,SACA,UACA,eACA,MACA,eACA,kBACA,WACA,UACA,cACA,WACA,cACA,kBAAoB,GACpB,YAAYC,EAAWC,EAAgBC,EAAO,CAC1C,KAAK,KAAO,KACZ,KAAK,KAAO,EACZ,KAAK,SAAW,GAChB,KAAK,UAAYF,EACjB,KAAK,eAAiBC,EACtB,KAAK,MAAQC,EACb,KAAK,eAAiB,KACtB,KAAK,kBAAoB,IAAI,IAC7B,KAAK,WAAa,GAClB,KAAK,UAAY,EACpB,CACD,OAAO,mBAAmBC,EAAUC,EAAa,CAC7C,IAAIvC,EAAawC,GAAqBD,EAAc,EAAI,CAAC,EAAGD,CAAQ,EACpE,OAAKtC,IACGuC,EACAvC,EAAa,SAAUyC,EAAKC,EAAK,CAC7B,OAAID,EAAIH,CAAQ,EAAII,EAAIJ,CAAQ,EACrB,GAEPG,EAAIH,CAAQ,EAAII,EAAIJ,CAAQ,EACrB,EAEJ,CAC3B,EAGgBtC,EAAa,SAAUyC,EAAKC,EAAK,CAC7B,OAAID,EAAIH,CAAQ,EAAII,EAAIJ,CAAQ,EACrB,GAEPG,EAAIH,CAAQ,EAAII,EAAIJ,CAAQ,EACrB,EAEJ,CAC3B,EAEYE,GAAqBD,EAAc,EAAI,CAAC,EAAGD,CAAQ,EAAItC,GAEpDA,CACV,CACD,IAAI,UAAW,CACX,MAAO,EACV,CACD,YAAYW,EAAO,CACf,KAAK,YAAYA,EAAO,KAAK,SAAS,MAAM,CAC/C,CACD,MAAMgC,EAAsB,CAC3B,CACD,QAAQA,EAAsB,CAC7B,CACD,YAAYhC,EAAON,EAAO,CACtB,MAAMuC,EAAgBjC,EACtB,KAAK,SAAS,OAAON,EAAO,EAAGuC,CAAa,EAC5C,KAAK,kBAAkB,IAAIA,EAAc,QAASjC,CAAK,CAC1D,CACD,gBAAiB,CACb,KAAK,SAAW,GAChB,KAAK,kBAAkB,OAC1B,CACD,kBAAmB,CAElB,CACD,UAAUsB,EAAM,CACZ,OAAKA,GAGE,KAAK,kBAAkB,IAAIA,EAAK,OAAO,GAAK,IACtD,CACD,KAAKjC,EAAYC,EAAO,CAGpB,OAAOR,EAAoB,KAAK,CAAC,CAAC,IAAI,CAAC,EAAGO,EAAYC,CAAK,CAC9D,CACD,MAAO,CACC,KAAK,gBAGT,KAAK,WAAa,KAAK,MACvB,KAAK,cAAgB,KAAK,SAAS,MAAK,EAC3C,CACD,SAAU,CACN,GAAI,CAAC,KAAK,cACN,OAEJ,KAAK,SAAW,KAAK,cACjB,KAAK,aACL,KAAK,MAAQ,KAAK,YAEtB,MAAMM,EAAW,KAAK,SAChBH,EAAQG,EAAS,OACvB,QAASF,EAAQ,EAAGA,EAAQD,EAAO,EAAEC,EACjCE,EAASF,CAAK,EAAE,UAEpB,KAAK,cAAgB,IACxB,CACD,cAAcwC,EAAc,CACxB,MAAMC,EAAQD,EAAa,MAAM,KAAI,EACrC,GAAI,CAACC,EAAM,OACP,OAAO,KAEX,MAAMC,EAAeD,EAAM,WAAW,GAAG,EACnCE,EAAYF,EAAM,WAAW,GAAG,EACtC,IAAIG,EAAWH,EAAM,WAAW,GAAG,IAAOC,GAAeC,IAAaF,EAAM,QAAQ,GAAG,IAAM,EAC7F,MAAMI,EAAgBJ,EAAM,SAAS,GAAG,EAClCK,EAAqBL,EAAM,OAAS,GAAKA,EAAM,SAAS,IAAI,EAC5DM,EAAgB,CAACD,GAAqBL,EAAM,SAAS,GAAG,EAC9D,IAAIO,EAAc,WAAWP,CAAK,GAC9BC,GAAeC,GAAYC,KACvBA,IAAYF,GAAeC,GAC3BK,EAAc,WAAWP,EAAM,UAAU,CAAC,CAAC,EAG3CO,EAAc,WAAWP,EAAM,UAAU,CAAC,CAAC,GAGnD,MAAMQ,EAA2BF,EAAgBC,EAAc,IAAQA,EAEnE,CAAC,MAAMA,CAAW,GAAK,EAAEN,GAAeC,KACxCC,EAAU,IAEd,MAAMM,EAAUC,GAAoDV,EAAO,GAAG,EAC9E,SAASW,EAAazB,EAAqB,CA4DvC,OA3DAA,EAAoB,wBAA0B,GAC9CA,EAAoB,yBAA2B,GAC/CA,EAAoB,4BAA8B,GAC9CkB,GACIF,GACIhB,EAAoB,YAAcqB,IAClCrB,EAAoB,wBAA0B,IAE9CA,EAAoB,aAAeqB,IACnCrB,EAAoB,yBAA2B,KAG9Ce,IACDf,EAAoB,YAAcqB,IAClCrB,EAAoB,wBAA0B,IAE9CA,EAAoB,aAAeqB,IACnCrB,EAAoB,yBAA2B,KAGnDiB,IACIjB,EAAoB,cAAgBqB,IACpCrB,EAAoB,wBAA0B,IAE9CA,EAAoB,eAAiBqB,IACrCrB,EAAoB,yBAA2B,OAIlDmB,GAAqBC,KACtBJ,GACIhB,EAAoB,KAAOsB,IAC3BtB,EAAoB,wBAA0B,IAE9CA,EAAoB,MAAQsB,IAC5BtB,EAAoB,yBAA2B,KAG9Ce,IACDf,EAAoB,KAAOsB,IAC3BtB,EAAoB,wBAA0B,IAE9CA,EAAoB,MAAQsB,IAC5BtB,EAAoB,yBAA2B,KAGnDiB,IACIjB,EAAoB,OAASsB,IAC7BtB,EAAoB,wBAA0B,IAE9CA,EAAoB,QAAUsB,IAC9BtB,EAAoB,yBAA2B,OAIvDA,EAAoB,aAAa,MAAMuB,CAAO,GAC7CvB,EAAoB,KAAOA,EAAoB,IAAI,MAAMuB,CAAO,KACjEvB,EAAoB,4BAA8B,IAElDA,EAAoB,yBAA2BA,EAAoB,0BACnEA,EAAoB,6BACpBA,EAAoB,QAAO,EACpB,IAEJ,EACV,CACD,OAAOyB,CACV,CACD,cAAcZ,EAAca,EAAYC,EAAe,CACnD,KAAK,iBAAgB,EACrB,MAAMF,EAAe,KAAK,cAAcZ,CAAY,EACpD,GAAI,CAACY,EACD,OAEJ,KAAK,cAAgB,GACrB,MAAMG,EAAa,KAAK,WACxB,IAAIC,EACJ,IAAKA,EAAU,KAAK,SAAS,CAAC,EAAGA,EAASA,EAAUA,EAAQ,iBAAiB,CAACD,EAAY,KAAM,CAACA,CAAU,EAAG,CAC1G,MAAME,EAAOD,EACb,GAAI,CAACC,EACD,MAEAL,EAAaK,CAAI,GACjB,KAAK,cAAc,KAAK,CAAE,YAAaA,CAAM,CAAA,CAEpD,CACD,KAAK,kBAAoBH,EAAgB,EAAI,KAAK,cAAc,OAAS,EACzE,KAAK,eAAe,yBAAyB,KAAK,cAAc,MAAM,EACtE,KAAK,eAAe,wBAAwB,KAAK,iBAAiB,CACrE,CACD,kBAAmB,CACf,GAAI,KAAK,cACL,QAASI,EAAI,EAAGA,EAAI,KAAK,cAAc,OAAQ,EAAEA,EAAG,CAChD,MAAMpE,EAAc,KAAK,cAAcoE,CAAC,EAAE,YAC1CpE,EAAY,wBAA0B,GACtCA,EAAY,yBAA2B,GACvCA,EAAY,4BAA8B,GAC1CA,EAAY,QAAO,CACtB,CAEL,KAAK,cAAgB,GACrB,KAAK,kBAAoB,EAC5B,CACD,wBAAyB,CACjB,CAAC,KAAK,eAAiB,CAAC,KAAK,cAAc,SAG/C,KAAK,mBAAqB,KAAK,kBAAoB,GAAK,KAAK,cAAc,OAC3E,KAAK,mBAAmB,KAAK,iBAAiB,EACjD,CACD,4BAA6B,CACrB,CAAC,KAAK,eAAiB,CAAC,KAAK,cAAc,SAG/C,KAAK,mBAAqB,KAAK,kBAAoB,EAAI,KAAK,cAAc,QAAU,KAAK,cAAc,OACvG,KAAK,mBAAmB,KAAK,iBAAiB,EACjD,CACD,6BAA8B,CAC1B,MAAO,EACV,CACD,qBAAsB,CAClB,MAAO,EACV,CACD,mBAAmBU,EAAO,CACtB,MAAM2D,EAAe,KAAK,cAAc3D,CAAK,EAC7C,GAAI,CAAC2D,EACD,OAEgBA,EAAa,YACrB,gBAAe,EAC3B,KAAK,eAAe,wBAAwB3D,CAAK,CACpD,CACL,CACA,MAAMmC,GAAsB,CAAC,CAAE,EAAE,EAAE,6IChgB5B,MAAMyB,WAAoCxE,CAAoB,CACjE,mBACA,YAAYE,EAAaC,EAAY,CACjC,MAAMD,EAAaC,EAAYD,EAAY,SAAW,MAAQ,EAAQA,EAAY,OAAO,MAAO,EAChG,KAAK,mBAAqB,EAC7B,CACD,OAAO,eAAee,EAAW,CAC7B,GAAIA,EAAU,qBAAuB,OACjC,OAEJ,MAAMwD,EAAqBxD,EAAU,mBAC/BN,EAAQ8D,EAAmB,OACjC,QAAS7D,EAAQ,EAAGA,EAAQD,EAAO,EAAEC,EAAO,CACxC,MAAM8D,EAAWD,EAAmB7D,CAAK,EACnC+D,EAAWD,EAAS,SACpBE,EAAYF,EAAS,UAC3B,IAAIxD,EAAQD,EAAU,UAAU0D,CAAQ,EAExC,GAAIzD,EAAO,CACP,MAAM2D,EAAoBH,EAAS,kBACnCxD,EAAM,MAAQ0D,EAAU,KACnBC,IACD3D,EAAM,OAAS0D,EAAU,MAEhC,MAEG1D,EAAQ,IAAIsD,GAA4BG,EAAU1D,EAAU,IAAI,EAC5D0D,IAAaC,IAEb1D,EAAM,KAAO0D,EAAU,KACvB1D,EAAM,MAAQ0D,EAAU,OAE5B3D,EAAU,YAAYC,CAAK,EAE/B,MAAM4D,EAASH,EAAS,OACpBG,GAAUA,EAAO,SACjBJ,EAAS,SAAWI,EACf5D,EAAM,qBACPA,EAAM,mBAAqB,IAE/BA,EAAM,mBAAmB,KAAKwD,CAAQ,EAE7C,CACD,OAAOzD,EAAU,kBACpB,CACD,sCAAsCsB,EAAqB,CACvD,KAAK,KAAI,EACT,KAAK,KAAOA,EAAoB,KAChC,KAAK,MAAQA,EAAoB,KACpC,CAID,cAAcrB,EAAO,CACjB,KAAK,KAAI,EACT,KAAK,eAAc,EACnB,KAAK,YAAYA,CAAK,CACzB,CACD,QAAQ6D,EAAU,CACV,KAAK,oBACL,KAAK,SAAQ,EAEjB,KAAK,KAAI,EACT,MAAMjE,EAAW,KAAK,SACtB,IAAIF,EAAQ,KAAK,SAAS,OAC1B,KAAOA,KACHE,EAASF,CAAK,EAAE,QAAQmE,CAAQ,EAEpC,MAAM7D,EAAQ,KAAK,kBAAkB,IAAI6D,CAAQ,EAC7C7D,GACA,KAAK,MAAMA,EAAO,EAAI,CAE7B,CACD,SAAU,CACN,MAAM,QAAO,EACR,KAAK,SAAS,QACf,KAAK,eAAe,KAAK,iBAAiB,KAAK,WAAW,CAAC,CAElE,CACD,MAAMA,EAAOC,EAAc,CACvB,KAAK,MAAQD,EAAM,KACnB,MAAM,MAAMA,EAAOC,CAAY,CAClC,CACD,kBAAmB,CACfqD,GAA4B,eAAe,IAAI,CAClD,CACD,iBAAiBtE,EAAa,CAG1B,MAAO,GAAQA,EAAY,QAAUA,EAAY,OAAO,OAC3D,CACL,CACO,MAAM8E,WAAoCvC,EAAoB,CACjE,WACA,mBACA,YAAYC,EAAWC,EAAgBsC,EAAiBrC,EAAO,CAC3D,MAAMF,EAAWC,EAAgBC,CAAK,EACtC,KAAK,WAAa,GAElB,IAAIsC,EAAkB,EACtB,MAAMC,EAAoB,CAAC,CAAA,EAAI,CAACF,CAAe,CAAC,EAC1CG,EAAgC,IAAI,IAC1C,KAAK,mBAAqB,GAC1B,QAASC,EAAwB,EAAGA,EAAwBF,EAAkB,OAAQ,EAAEE,EAAuB,CAC3G,MAAMC,EAAqBH,EAAkBE,CAAqB,EAC5DE,EAAeJ,EAAkB,EAAEE,CAAqB,EACxD1E,EAAQ4E,EAAa,OACrBC,EAAuB,IAAI,QACjC,QAAS5E,EAAQ,EAAGA,EAAQD,EAAO,EAAEC,EAAO,CACxC,MAAMV,EAAcqF,EAAa3E,CAAK,EAItC,GAHK4E,EAAqB,IAAItF,CAAW,GACrCsF,EAAqB,IAAItF,EAAa,EAAEgF,CAAe,EAEvDhF,EAAY,OAAQ,CAEpB,IAAIuF,EAAeL,EAA8B,IAAIlF,EAAY,OAAO,EACpE2E,EAAoB,GACxB,GAAI,CAACY,EACDA,EAAe,IAAI,IACnBL,EAA8B,IAAIlF,EAAY,QAASuF,CAAY,MAElE,CAGD,MAAMC,EAAcJ,EAAmB,OACvC,QAASK,EAAc,EAAGA,EAAcD,EAAa,EAAEC,EAAa,CAChE,MAAMC,EAAYJ,EAAqB,IAAIF,EAAmBK,CAAW,CAAC,EAC1E,GAAIC,GAAaH,EAAa,IAAIG,CAAS,EAAG,CAC1Cf,EAAoB,GACpB,KACH,CACJ,CACJ,CACD,MAAMgB,EAAML,EAAqB,IAAItF,CAAW,EAC5C2F,GACAJ,EAAa,IAAII,CAAG,EAExB,KAAK,mBAAmB,KAAK,CAAE,SAAU3F,EAAa,UAAWA,EAAa,kBAAA2E,CAAiB,CAAE,CACpG,CACD,MAAM/D,EAAWZ,EAAY,SACzBY,EAAS,SACTqE,EAAkB,KAAKG,EAAmB,OAAO,CAACpF,CAAW,CAAC,CAAC,EAC/DiF,EAAkB,KAAKrE,CAAQ,EAEtC,CACJ,CAED,OAAAd,EAAoB,SAAS,IAAI,EAC1B,IACV,CAID,MAAMuC,EAAqB,CACvB,GAAI,CAACA,EACD,OAEJ,KAAK,KAAI,EACT,IAAIuD,EAAcvD,EACdqC,EAAYrC,EAChB,KAAOuD,EAAY,QAAWA,aAAuBtB,IACjDsB,EAAY,sCAAsCvD,CAAmB,EACrEqC,EAAYkB,EACZA,EAAcA,EAAY,OACtBA,aAAuBtB,IACvBsB,EAAY,cAAclB,CAAS,EAG3C,KAAK,SAAW,CAACA,CAAS,EAC1B,KAAK,MAAQrC,EAAoB,KACpC,CACD,QAAQA,EAAqB,CACzB,GAAI,CAACA,EACD,OAEJ,KAAK,KAAI,EACT,MAAMwD,EAAkBxD,EAAoB,QACtCyD,EAAwB,KAAK,kBAAkB,IAAID,CAAe,EAGpEC,GACAC,GAAsC,KAAK,SAAUD,CAAqB,EAE9E,MAAMlF,EAAW,KAAK,SAChBH,EAAQG,EAAS,OACvB,QAASF,EAAQ,EAAGA,EAAQD,EAAO,EAAEC,EACjCE,EAASF,CAAK,EAAE,QAAQmF,CAAe,EAEvC,KAAK,gBACL,KAAK,KAAK,KAAK,eAAgB,EAAI,CAE1C,CACD,kBAAmB,CACfvB,GAA4B,eAAe,IAAI,CAClD,CACL,iQChOM0B,GAAS,IAAI,cACnsBC,EAAmC,CAClE,oBACA,MACA,IACA,iBACA,SACA,YAAYC,EAAaC,EAAO,CAC5B,QACA,KAAK,oBAAsBD,EAC3B,KAAK,MAAQC,EACb,KAAK,IAAMD,EAAY,sBACvB,KAAK,iBAAmB,GACxB,KAAK,SAAW,IACnB,CACD,SAASC,EAAO,CACZ,KAAK,MAAQA,EACb,KAAK,yBAAyB,sBAA0D,IAAI,CAC/F,CACD,aAAc,CACV,OAAO,KAAK,mBACf,CACD,aAAaC,EAAUC,EAAM,CACzB,KAAK,yBAAyB,eAA2C,IAAIC,GAAaF,EAAUC,CAAI,CAAC,CAC5G,CAID,yBAAyBE,EAAsB,CAC3C,MAAM,IAAI,MAAM,kBAAkB,CACrC,CACD,WAAWA,EAAsB,CAC7B,MAAM,IAAI,MAAM,kBAAkB,CACrC,CACD,gBAAiB,CACT,KAAK,UACL,KAAK,SAAS,QAErB,CACD,SAAU,CACT,CACD,eAAgB,CACZ,MAAO,EACV,CACD,YAAa,CACT,MAAM,IAAI,MAAM,kBAAkB,CACrC,CACD,aAAaC,EAAO,CAChB,MAAM,IAAI,MAAM,kBAAkB,CACrC,CACD,UAAW,CACP,OAAO,KAAK,gBACf,CACD,aAAc,CACV,KAAK,iBAAmB,EAC3B,CACD,WAAWC,EAAU,CACpB,CACL,CACO,MAAMH,EAAa,CACtB,SACA,KACA,YAAYF,EAAUC,EAAM,CACxB,KAAK,SAAWD,EAChB,KAAK,KAAOC,CACf,CACL,CACO,MAAMK,WAAoBT,EAAmC,CAChE,WACA,aACA,SACA,6BACA,uBACA,YAAYU,EAAIC,EAAM,CAClB,QACA,KAAK,WAAaD,EAClB,KAAK,aAAeC,EACpB,KAAK,SAAW,GAChB,KAAK,6BAA+B,KACpC,KAAK,uBAAyB,EACzB,OAAO,QACR,OAAO,iBAAiB,WAAY,KAAK,iBAAiB,KAAK,IAAI,EAAG,EAAK,CAElF,CACD,UAAW,CACP,MAAO,EACV,CACD,gBAAiB,CACb,OAAO,KAAK,sBACf,CACD,qBAAsB,CAClB,OAAO,KAAK,wBACf,CACD,kBAAmB,CACf,MAAO,EACV,CACD,eAAgB,CACZ,OAAO,IACV,CACD,IAAI,eAAgB,CAChB,MAAO,EACV,CACD,IAAI,IAAK,CACL,OAAO,KAAK,UACf,CACD,IAAI,eAAgB,CAChB,OAAO,KAAK,YACf,CACD,IAAI,MAAO,CACP,OAAO,KAAK,YACf,CACD,eAAgB,CACZ,MAAO,EACV,CACD,IAAI,aAAc,CACd,MAAO,EACV,CACD,kBAAmB,CACf,MAAO,EACV,CACD,WAAY,CACR,MAAO,EACV,CACD,aAAc,CACV,SAASC,EAAWC,EAAS,CACzB,OAAO,KAAK,+BAAiCA,CAChD,CACD,OAAO,KAAK,SAAS,OAAOD,EAAW,KAAK,IAAI,CAAC,CACpD,CACD,eAAgB,CACZ,OAAO,IACV,CACD,wBAAwBE,EAAS,CAChC,CACD,WAAWrB,EAAK,CACZ,QAASvB,EAAI,EAAGA,EAAI,KAAK,SAAS,OAAQ,EAAEA,EACxC,GAAI,KAAK,SAASA,CAAC,EAAE,MAAQuB,EACzB,OAAO,KAAK,SAASvB,CAAC,EAG9B,OAAO,IACV,CACD,aAAa6C,EAAM,CACf,IAAIJ,EAAOI,EAAK,KAChB,MAAMC,EAAgB,KAAK,gBACvBA,GAAiBL,EAAK,SAASK,CAAa,IAC5CL,EAAOA,EAAK,OAAO,EAAGA,EAAK,OAASK,EAAc,MAAM,GAE5D,MAAMH,EAAU,KAAK,4BAA4BF,CAAI,EACrD,OAAAE,EAAQ,YAAW,EACnB,KAAK,wBAAwBA,CAAO,EACpC,KAAK,WAAWA,CAAO,EAChBA,EAAQ,aAAaE,CAAI,CACnC,CACD,4BAA4BE,EAAQ,CAChC,MAAM,IAAI,MAAM,iBAAiB,CACpC,CACD,WAAWJ,EAAS,CAChB,KAAK,SAAS,KAAKA,CAAO,EAC1B,KAAK,yBAAyB,qBAA6DA,CAAO,CACrG,CACD,cAAcA,EAAS,CACnB,MAAMrG,EAAQ,KAAK,SAAS,QAAQqG,CAAO,EACvCrG,IAAU,KAGd,KAAK,SAAS,OAAOA,EAAO,CAAC,EAC7B,KAAK,eAAeqG,CAAO,EAC9B,CACD,kBAAmB,CACf,QAAS3C,EAAI,EAAGA,EAAI,KAAK,SAAS,OAAQ,EAAEA,EACxC,KAAK,SAASA,CAAC,EAAE,eAAc,CAEtC,CACD,sBAAuB,CACnB,OAAO,KAAK,4BACf,CACD,wBAAwB2C,EAAS,CAC7B,KAAK,6BAA+BA,CACvC,CACD,6BAA8B,CAC7B,CACD,OAAQ,CACJ,UAAWA,KAAW,KAAK,SAAS,MAAK,EACrC,KAAK,eAAeA,CAAO,EAE/B,KAAK,SAAW,GAChB,KAAK,uBAAyB,CACjC,CACD,eAAeA,EAAS,CACpB,KAAK,yBAAyB,wBAAmEA,CAAO,EACxGA,EAAQ,QAAO,EACX,KAAK,+BAAiCA,IACtC,KAAK,4BAA2B,EAChC,KAAK,wBAAwB,IAAI,EAExC,CACL,qJChMMtH,EAAY,CAId,sBAAuB,0BAIvB,gBAAiB,qBAKjB,+BAAgC,oEAIhC,+BAAgC,mDAKhC,WAAY,UAKZ,uBAAwB,iCAKxB,uBAAwB,iCAIxB,6BAA8B,uCAK9B,gCAAiC,sDAIjC,MAAO,SACX,EACMC,GAAOC,EAA4B,qCAAsCF,CAAS,EAClFG,EAAaC,EAA6B,KAAK,OAAWH,EAAI,EAC7D,MAAM0H,WAAwBC,CAAe,CAChD,MACA,KACA,cACA,aACA,cACA,cACA,aAAc,CACV,MAAM,EAAK,EACX,KAAK,MAAQ,IAAIC,GACjB,KAAK,KAAO,IAAIC,GAA2B,KAAK,MAAO,KAAMC,GAAwB,WAAW,EAChG,KAAK,KAAK,QAAQ,UAAU,IAAI,8BAA8B,EAC9DC,GAAsB,KAAK,KAAK,QAAS7H,EAAWH,EAAU,qBAAqB,CAAC,EACpF,KAAK,eAAe,YAAY,KAAK,KAAK,OAAO,EACjD,KAAK,cAAgB,IAAI,IACzB,KAAK,aAAe,SAAS,cAAc,KAAK,EAChD,KAAK,aAAa,UAAU,IAAI,2BAA2B,EAC3D,KAAK,aAAa,UAAU,IAAI,MAAM,EACtC,KAAK,cAAgB,KAAK,aAAa,YAAY,MAAO,gCAAgC,EAC1F,KAAK,cAAgB,KAAK,aAAa,YAAY,MAAO,iCAAiC,EAC3F,KAAK,aAAa,YAAY,KAAK,EAAE,YAAcG,EAAWH,EAAU,eAAe,EACvF,MAAMiI,EAAuB,KAAK,MAAMC,GAAyC,GAAI,EACrFlG,EAAmB,QAAQ,KAAK,cAAe7B,EAAWH,EAAU,+BAAgC,CAAE,IAAKiI,CAAoB,CAAE,CAAC,EAClIjG,EAAmB,QAAQ,KAAK,cAAe7B,EAAWH,EAAU,8BAA8B,CAAC,EACnGmI,GAAkC,SAAQ,EAAG,gBAAgB,IAAI,EACjEC,EAAgC,SAAQ,EAAG,iBAAiB,cAA2D,KAAK,cAAe,IAAI,EAC/IA,EAAgC,SAAQ,EAAG,iBAAiB,sBAA4E,KAAK,cAAe,IAAI,CACnK,CACD,UAAW,CACP,MAAM,SAAQ,EACdD,GAAkC,SAAQ,EAAG,iBAAiB,gBAAgE,KAAK,iBAAkB,IAAI,CAC5J,CACD,UAAW,CACPA,GAAkC,SAAQ,EAAG,oBAAoB,gBAAgE,KAAK,iBAAkB,IAAI,CAC/J,CACD,aAAaE,EAAS,CAClB,KAAK,KAAK,QAAQ,SAAW,EAC7B,MAAM3D,EAAO,IAAI4D,GAASD,CAAO,EAE3BpH,EAAQyD,EAAK,MAAK,EAAG,OAAQ,IAC/B0D,EAAgC,SAAU,EAAC,kBAAmB,EAC9D,EACA,KAAK,MAAM,OACf,KAAK,MAAM,OAAOnH,EAAOyD,CAAI,EAC7B,KAAK,cAAc,IAAI2D,EAAS3D,CAAI,EAEhCzD,IAAU,GACV,KAAK,KAAK,WAAWyD,CAAI,EAE7B,KAAK,OAAM,CACd,CACD,eAAe2D,EAAS,CACpB,MAAM3D,EAAO,KAAK,cAAc,IAAI2D,CAAO,EACvC3D,GACAA,EAAK,YAAW,EAEpB,KAAK,OAAM,CACd,CACD,eAAe2D,EAAS,CACpB,MAAM3D,EAAO,KAAK,cAAc,IAAI2D,CAAO,EACvC3D,GACA,KAAK,MAAM,OAAO,KAAK,MAAM,QAAQA,CAAI,CAAC,EAE9C,KAAK,cAAc,OAAO2D,CAAO,EAC7B,KAAK,MAAM,SAAW,IACtB,KAAK,KAAK,QAAQ,SAAW,IAEjC,KAAK,OAAM,CACd,CACD,cAAcE,EAAO,CAEjB,MAAMC,EADSD,EAAM,KACA,MAAME,EAA6B,EACxD,GAAI,CAACD,EACD,OAEJ,MAAMH,EAAUF,GAAkC,SAAU,EAAC,eAAeK,CAAK,EAC3E9D,EAAO2D,GAAW,KAAK,cAAc,IAAIA,CAAO,EAClD3D,GACAA,EAAK,YAAW,CAEvB,CACD,iBAAiB6D,EAAO,CACpB,MAAMF,EAAUE,EAAM,KAChBG,EAAW,KAAK,cAAc,IAAIL,CAAO,EAC3CK,GACAA,EAAS,YAAW,EAExB,KAAK,YAAW,CACnB,CACD,aAAc,CACV,IAAIzF,EAAQ,EACR0F,EAAQ,EACZ,UAAWN,KAAWF,GAAkC,SAAU,EAAC,SAAQ,EACvElF,GAASoF,EAAQ,eACjBM,GAASN,EAAQ,uBAErB,KAAK,cAAc,YAAcO,EAAuC3F,CAAK,EAC7E0E,GAAgB,mBAAmBgB,EAAO,KAAK,aAAa,CAC/D,CACD,OAAO,mBAAmBE,EAAcC,EAAS,CAC7C,MAAMC,EAA2BF,EAAe,IAEhD,GAAI,KAAK,IAAIE,CAAwB,EADK,IAEtC,OAEJ,MAAMC,EAAiBJ,EAAuC,KAAK,IAAIG,CAAwB,CAAC,EAChG,IAAIE,EAAYC,EACZH,EAA2B,GAC3BE,EAAa,IAAW9I,EAAWH,EAAU,WAAY,CAAE,IAAKgJ,CAAc,CAAE,EAChFF,EAAQ,UAAU,OAAO,aAAc,EAAI,EAC3CI,EAAc/I,EAAWH,EAAU,uBAAwB,CAAE,IAAKgJ,CAAc,CAAE,IAGlFC,EAAa,IAAW9I,EAAWH,EAAU,WAAY,CAAE,IAAKgJ,CAAc,CAAE,EAChFF,EAAQ,UAAU,OAAO,aAAc,EAAK,EAC5CI,EAAc/I,EAAWH,EAAU,uBAAwB,CAAE,IAAKgJ,CAAc,CAAE,GAEtFF,EAAQ,YAAcG,EACtBjB,GAAsBc,EAASI,CAAW,CAC7C,CACD,oBAAqB,CACjB,OAAO,KAAK,YACf,CACD,qBAAqBxE,EAAM,CACvB,OAAOA,EAAK,OACf,CACD,cAAcyE,EAAO,CACjB,eAAQ,OAAO,GAAO,sBAAsB,EACrC,CACV,CACD,uBAAuBC,EAAcC,EAAY,CAC7C,MAAO,EACV,CACD,iBAAiBF,EAAO,CACpB,MAAO,EACV,CACD,oBAAoBG,EAAOC,EAAIC,EAAaC,EAAW,CAC/CD,GACAA,EAAY,UAAU,OAAO,UAAU,EAEvCC,GACAA,EAAU,UAAU,IAAI,UAAU,EAEtC,MAAMjB,EAAQe,GAAMA,EAAG,MAAK,EAC5BG,EAAmB,SAAU,EAAC,UAAUC,EAAyCnB,GAASA,EAAM,kBAAiB,CAAE,EACnHkB,EAAmB,SAAQ,EAAG,UAAUE,GAAuCpB,GAASA,EAAM,OAAQ,EAAC,MAAMoB,EAAqC,CAAC,CACtJ,CACD,QAAS,CACL,KAAK,YAAW,EAChB,KAAK,KAAK,gBAAgB,EAAG,KAAK,MAAM,MAAM,CACjD,CACL,CACO,MAAMtB,EAAS,CAClB,QACA,QACA,QACA,SACA,QACA,YAAYD,EAAS,CACjB,KAAK,QAAUA,EACf,MAAMJ,EAAuB,KAAK,MAAMC,GAAyC,GAAI,EACrF,KAAK,QAAU,SAAS,cAAc,KAAK,EAC3C,KAAK,QAAQ,UAAU,IAAI,2BAA2B,EACtD,KAAK,QAAQ,UAAU,IAAI,MAAM,EACjC2B,GAA0B,KAAK,OAAO,EACtC,KAAK,QAAU,KAAK,QAAQ,YAAY,MAAO,gCAAgC,EAC/E7H,EAAmB,QAAQ,KAAK,QAAS7B,EAAWH,EAAU,4BAA4B,CAAC,EAC3F,KAAK,SAAW,KAAK,QAAQ,YAAY,MAAO,iCAAiC,EACjFgC,EAAmB,QAAQ,KAAK,SAAU7B,EAAWH,EAAU,gCAAiC,CAAE,IAAKiI,CAAoB,CAAE,CAAC,EAC9H,KAAK,QAAU,KAAK,QAAQ,YAAY,MAAO,gCAAgC,EAC/E,KAAK,YAAW,CACnB,CACD,OAAQ,CACJ,OAAO,KAAK,QAAQ,cACvB,CACD,aAAc,CACV,KAAK,QAAQ,YAAcW,EAAuC,KAAK,QAAQ,aAAY,CAAE,EAC7FjB,GAAgB,mBAAmB,KAAK,QAAQ,uBAAwB,KAAK,QAAQ,CACxF,CACD,aAAc,CACV,MAAMmC,EAAmB,IAAI,IAC7B,UAAWtB,KAAS,KAAK,QAAQ,OAAM,EAAI,CACvC,MAAMuB,EAASvB,EAAM,SACfpB,EAAOgB,EAAgC,WAAW,sBAAwB2B,EAASA,EAAO,KAAM,EAAG,GACnGC,EAAY,IAAIC,GAA2BF,EAAO,aAAc,CAAA,EAChEG,EAASF,EAAU,QAAUA,EAAU,OAAQ,EAAG,GAClDrD,EAAQoD,EAAO,cAAcG,GAAU9C,EAAO,GAAG8C,CAAM,KAAK9C,CAAI,GAAKA,GAAQ8C,GAAU/J,EAAWH,EAAU,KAAK,CAAC,EACxH8J,EAAiB,IAAInD,GAAQmD,EAAiB,IAAInD,CAAK,GAAK,GAAK,CAAC,CACrE,CACD,KAAK,QAAQ,iBAEb,SAAW,CAACS,EAAMpG,CAAK,IAAK8I,EAAkB,CAC1C,MAAMnD,EAAQ3F,EAAQ,EAAI,GAAGoG,CAAI,KAAKpG,CAAK,IAAMoG,EAE3C+C,EAAW,KAAK,QAAQ,YAAY,KAAK,EAC/CA,EAAS,YAAcxD,EACvB3E,EAAmB,QAAQmI,EAAU,OAAOxD,CAAK,CAAC,CACrD,CACJ,CACL,oIC3PMJ,GAAS,IAAI,cACnqKC,ECzID,MAAMvG,GAAY,CAId,2BAA4B,gCAI5B,KAAM,eAIN,aAAc,gBAId,KAAM,OAIN,MAAO,QAIP,oBAAqB,uBACzB,EACMC,GAAOC,EAA4B,yCAA0CF,EAAS,EACtFG,GAAaC,EAA6B,KAAK,OAAWH,EAAI,EAC7D,MAAMmK,WAA4BC,EAAgCzC,CAAc,CAAE,CACrF,MACA,uBACA,2BACA,yBACA,wBACA,cACA,WACA,oBACA,oCACA,YACA,iBACA,UACA,YAAY0C,EAAe,CACvB,QACA,KAAK,MAAQA,EACb,KAAK,QAAQ,UAAU,IAAI,uBAAuB,EAClD,KAAK,uBACD,KAAK,QAAQ,YAAY,MAAO,oCAAoC,EACxE,MAAMC,EAA6B,KAAK,uBAAuB,YAAY,MAAO,MAAM,EACxF,KAAK,2BAA6BC,GAAyB,SAAU,EAAC,cAAc,wBAAyB,KAAK,EAClH,KAAK,yBAA2BD,EAA2B,YAAY,IAAI,EAC3E,KAAK,wBAA0BA,EAA2B,YAAY,MAAM,EAC5EE,GAA8B,KAAK,uBAAuB,EAC1D,MAAMC,EAAyB,KAAK,uBAAuB,YAAY,MAAO,qCAAqC,EACnHA,EAAuB,YAAY,IAAI,EAAE,YAAcvK,GAAWH,GAAU,0BAA0B,EACtG,MAAM2K,EAAkB,IAAIhD,GACtBiD,EAA8BF,EAAuB,YAAY,MAAO,mCAAmC,EACjHE,EAA4B,UAAU,IAAI,wCAAwC,EAClFD,EAAgB,KAAKC,CAA2B,EAChDF,EAAuB,YAAYC,EAAgB,mBAAoB,CAAA,EACvE,MAAME,EAAa,KAAK,uBAAuB,YAAY,MAAO,+BAA+B,EACjG,KAAK,cAAgBC,GAA4B,GAAI,KAAK,qBAAqB,KAAK,IAAI,EAAG,CACvF,aAAc,iCACd,QAAS,SACrB,CAAS,EACD,KAAK,WAAa,IAAIC,GACtB,KAAK,WACA,KAAO,CAAE,SAAU,SAAU,QAAS,WAAkD,aAAc,2BAC3G,KAAK,WAAW,YAAc5K,GAAWH,GAAU,IAAI,EACvD,KAAK,WAAW,iBAAiB,QAAS,KAAK,kBAAkB,KAAK,IAAI,CAAC,EAC3E6K,EAAW,YAAY,KAAK,UAAU,EACtCA,EAAW,YAAY,KAAK,aAAa,EACzC,KAAK,oBAAsB,GAC3B,KAAK,oCAAsC,IAAI,GAClD,CACD,mBAAoB,CACWG,GAAiC,SAAU,EAAC,UAAU,yBAAyB,EAClF,SAC3B,CACD,gBAAiB,CACT,KAAK,WAAa,KAAK,oBACvB,KAAK,cAAc,gBAAgB,UAAU,EAG7C,KAAK,cAAc,aAAa,WAAY,EAAE,EAElDhJ,EAAmB,QAAQ,KAAK,cAAe,KAAK,oBAAsB,GAAKiJ,GAAqC,CAAE,EAClH,KAAK,kBACL,KAAK,cAAc,UAAU,OAAO,SAAS,EAC7C,KAAK,cAAc,YAAc9K,GAAWH,GAAU,YAAY,GAE7D,KAAK,aACV,KAAK,cAAc,UAAU,IAAI,SAAS,EAC1C,KAAK,cAAc,YAAcG,GAAWH,GAAU,IAAI,IAG1D,KAAK,cAAc,UAAU,OAAO,SAAS,EAC7C,KAAK,cAAc,YAAcG,GAAWH,GAAU,KAAK,GAE/D,SAAW,CAAE,cAAAkL,CAAe,IAAI,KAAK,oCAAoC,OAAM,EAC3EA,EAAc,SAAW,EAAQ,KAAK,WAE7C,CACD,gBAAiB,CACb,KAAK,YAAc,GACnB,KAAK,eAAc,CACtB,CACD,iBAAkB,CACd,KAAK,YAAc,GACnB,KAAK,eAAc,CACtB,CACD,kBAAkBxE,EAAayE,EAAqB,CAChD,KAAK,iBAAmBzE,EAAY,mBACpC,KAAK,oBAAsByE,EAC3B,KAAK,UAAYzE,EAAY,YAC7B,KAAK,eAAc,CACtB,CACD,eAAeA,EAAa,CACxB,MAAM0E,EAAeC,GAA4B,eAAgB3E,EAAY,KAAM,OAAW,uBAAuB,EACrH,KAAK,wBAAwB,YAAY0E,CAAY,EACrD,MAAMF,EAAgBE,EAAa,aACnC,KAAK,oCAAoC,IAAI1E,EAAY,GAAI,CAAE,cAAAwE,EAAe,YAAAxE,CAAW,CAAE,EAC3FwE,EAAc,iBAAiB,SAAU,KAAK,mBAAmB,KAAK,KAAMxE,CAAW,EAAG,EAAK,EAC/F,MAAM4E,EAAqB,KAAK,wBAAwB,YAAY,GAAG,EACvEA,EAAmB,YAAc5E,EAAY,YAC7C6E,GAA4BL,EAAexE,EAAY,WAAW,EAClE,MAAM8E,EAAgB9E,EAAY,gBAC9B8E,IACAA,EAAc,aAAa,OAAQ,OAAO,EAC1CA,EAAc,aAAa,kBAAmB,GAAGN,EAAc,EAAE,EAAE,EACnE,KAAK,wBAAwB,YAAY,GAAG,EAAE,YAAYM,CAAa,EACvE9E,EAAY,wBAAwB,EAAK,GAE7C,MAAM+E,EAAa,KAAK,oCAAoC,KAAO,EAAItL,GAAWH,GAAU,mBAAmB,EAC3G0G,EAAY,KAChB,KAAK,yBAAyB,YAAc+E,EAC5CzD,GAAsB,KAAK,wBAAyByD,CAAU,CACjE,CACD,4BAA6B,CACzB,IAAIC,EAAS,KAAK,2BAA2B,IAAG,EAC3C,KAAK,oCAAoC,IAAIA,CAAM,IACpDA,EAAS,KAAK,oCAAoC,KAAI,EAAG,KAAM,EAAC,MAChE,KAAK,2BAA2B,IAAIA,CAAM,GAE9C,MAAMC,EAA8B,KAAK,oCAAoC,IAAID,CAAM,EACvFC,EAA4B,cAAc,QAAU,GACpD,MAAMC,EAAOD,EAA4B,YACzC,SAAW,CAACxE,EAAI,CAAE,YAAAT,CAAW,CAAE,IAAK,KAAK,oCAAqC,CAC1E,MAAMmF,EAAW1E,IAAOuE,EACxBhF,EAAY,wBAAwBmF,CAAO,CAC9C,CACD,KAAK,yBAAyB,sBAA0DD,CAAI,CAC/F,CACD,sBAAuB,CACnB,KAAK,MAAM,cACd,CACD,mBAAmBlF,EAAa,CAC5B,MAAMgF,EAAS,KAAK,2BAA2B,IAAG,EACrC,KAAK,oCAAoC,IAAIA,CAAM,EAAE,YAC7D,wBAAwB,EAAK,EAClChF,EAAY,wBAAwB,EAAI,EACxC,KAAK,yBAAyB,sBAA0DA,CAAW,EACnG,KAAK,iBAAmBA,EAAY,mBACpC,KAAK,UAAYA,EAAY,YAC7B,KAAK,eAAc,EACnB,KAAK,2BAA2B,IAAIA,EAAY,EAAE,CACrD,CACD,UAAW,CACP,MAAM,SAAQ,EACd,KAAK,iBAAiB,CAACoF,EAAyB,CAAC,CACpD,CACL,4HCtMM9L,GAAY,CAId,eAAgB,iBACpB,EACMC,GAAOC,EAA4B,+CAAgDF,EAAS,EAC5FG,GAAaC,EAA6B,KAAK,OAAWH,EAAI,EAC7D,MAAM8L,WAAkCC,EAA2B,CACtE,YACA,cACA,YACA,eACA,aACA,gBACA,UACA,MACA,oBACA,QACA,gBACA,QACA,YAAYC,EAAqB3E,EAAS4E,EAAW,CACjD,MAAM,GAAI,EAAK,EACf,KAAK,YAAc,SAAS,cAAc,KAAK,EAC/C,KAAK,YAAY,UAAU,IAAI,MAAM,EACrC,KAAK,cAAgB,SAAS,cAAc,KAAK,EACjD,KAAK,cAAc,UAAU,IAAI,QAAQ,EACzC,KAAK,cAAc,UAAU,IAAI,aAAa,EAC9C,KAAK,cAAc,aAAa,QAAS,GAAGC,GAAoB,OAAO,EAAE,MAAM,CAAE,SAAU,GAAM,OAAQ,EAAM,CAAA,CAAC,EAAE,EAClH,KAAK,eAAiB,KAAK,cAAc,YAAY,OAAQ,iBAAiB,EAC9E,KAAK,aAAe,KAAK,eAAe,YAAY,OAAQ,OAAO,EACnE,KAAK,gBAAkB,KAAK,cAAc,YAAY,OAAQ,UAAU,EACxE,KAAK,YAAc,IAAIpB,GACvB,KAAK,YAAY,KAAO,CACpB,QAAS,OACT,SAAU,gBACV,MAAO5K,GAAWH,GAAU,cAAc,CACtD,EACQ,KAAK,YAAY,SAAW,GAC5B,KAAK,YAAY,iBAAiB,QAAS,KAAK,uBAAuB,KAAK,IAAI,CAAC,EACjF,KAAK,YAAY,aAAa,QAAS,GAAGoM,GAAuB,iBAAiB,EAAE,MAAM,CAAE,MAAO,EAAI,CAAE,CAAC,EAAE,EAC5GpK,EAAmB,QAAQ,KAAK,YAAa7B,GAAWH,GAAU,cAAc,CAAC,EACjF,KAAK,aAAa,YAAcsH,EAAQ,MACxC,KAAK,UAAY4E,EACjB,KAAK,MAAQ,GACb,KAAK,oBAAsBD,EAC3B,KAAK,QAAU3E,EACfA,EAAQ,iBAAiB,eAAwD,KAAK,aAAc,IAAI,CAC3G,CACD,aAAaiB,EAAO,CAChB,MAAM8D,EAAe9D,EAAM,KACvB8D,EAAa,WAAa,OAC1B,KAAK,gBAAgB,YAAcA,EAAa,SAAS,OAAS,EAAI,IAAIA,EAAa,QAAQ,IAAM,GACrG,KAAK,cAAc,UAAU,OAAO,cAAe,CAACA,EAAa,QAAQ,EACzErE,GAAsB,KAAK,gBAAiB,GAAG,KAAK,QAAQ,KAAK,KAAKqE,EAAa,QAAQ,EAAE,GAE7F,OAAOA,EAAa,MAAS,WAAa,KAAK,kBAC/C,KAAK,YAAY,UAAU,OAAO,UAAWA,EAAa,IAAI,EAC9D,KAAK,gBAAgB,UAAU,OAAO,OAAQA,EAAa,IAAI,EAEtE,CACD,WAAW9D,EAAO,CACd,OAAK,KAAK,SACN,KAAK,aAAaA,EAAM,MAAM,EAE3B,EACV,CACD,aAAa+D,EAAa,CACtB,MAAMhL,EAAYgL,EAAY,6BAA6B,OAAO,EAClE,GAAI,CAAChL,EACD,OAEJ,MAAMiL,EAAS,IAAIC,GAAwB,KAAK,iBAAiB,KAAK,IAAI,EAAG,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAC7G,KAAK,QAAUC,GAA+B,aAAanL,EAAWiL,CAAM,CAC/E,CACD,iBAAiBjL,EAAWoL,EAAU,CAClC,OAAO,KAAK,QACZ,KAAK,QAAQ,SAASA,CAAQ,CACjC,CACD,kBAAmB,CACf,OAAO,KAAK,OACf,CACD,SAAU,CACN,KAAK,QAAQ,oBAAoB,eAAwD,KAAK,aAAc,IAAI,CACnH,CACD,UAAW,CACP,YAAK,oBAAoB,YAAY,KAAK,OAAO,EAC1C,EACV,CACD,UAAW,CACP,YAAK,QAAQ,YAAW,EAAG,cAAc,KAAK,OAAO,EAC9C,EACV,CACD,UAAW,CACH,KAAK,WACL,KAAK,gBAAgB,UAAU,IAAI,KAAK,SAAS,EAEjD,KAAK,OACL,KAAK,gBAAgB,UAAU,IAAI,OAAO,EAE9C,KAAK,gBAAgB,OAAO,KAAK,YAAa,KAAK,cAAe,KAAK,WAAW,EAClF,KAAK,gBAAgB,iBAAiB,cAAe,KAAK,uBAAuB,KAAK,IAAI,EAAG,EAAI,EACjGnB,GAA4B,KAAK,gBAAiB,KAAK,QAAQ,YAAW,EAAG,IAAI,CACpF,CACD,uBAAuBhD,EAAO,CAC1B,MAAMoE,EAAc,IAAIC,GAA2BrE,CAAK,EACxDoE,EAAY,sBAAsB,cAAc,EAC3CA,EAAY,MACpB,CACD,SAASE,EAAO,CACZ,KAAK,MAAQA,EACT,KAAK,iBACL,KAAK,gBAAgB,UAAU,OAAO,QAAS,KAAK,KAAK,CAEhE,CACD,aAAalG,EAAO,CAChB,KAAK,aAAa,YAAcA,CACnC,CACL,kICxHMJ,GAAS,IAAI,cACnoKC,ECtKD,MAAMA,GAAS,IAAI,cACnkPC,EC/MD,MAAMvG,GAAY,CAKd,0BAA2B,yDAI3B,4BAA6B,8DAK7B,sBAAuB,iCAKvB,KAAM,YAIN,SAAU,UACd,EACMC,GAAOC,EAA4B,mCAAoCF,EAAS,EAChFG,GAAaC,EAA6B,KAAK,OAAWH,EAAI,EAC7D,MAAM6M,WAAsBC,EAA0B,CACzD,aACA,wBACA,YACA,aACA,eACA,mBACA,mBACAC,GACA,mBACA,cACA,aACA,YACA,cACA,uBACA,oBACA,oBACA,YAAY5F,EAAM6F,EAAcC,EAAmB,CAC/C,MAAM9F,CAAI,EACV,KAAK,aAAe6F,EACpB,MAAME,EAAgB,IAAIvF,EAC1B,KAAK,YAAW,EAAG,cAAcuF,CAAa,EAC9C,KAAK,wBAA0B,IAAIC,GAA2B,IAAI,EAClE,KAAK,YAAc,IAAIC,GACvB,KAAK,YAAY,QAAQ,UAAU,IAAI,2BAA2B,EAClE,KAAK,oBAAmB,EAAG,YAAY,KAAK,YAAY,OAAO,EAC/D,KAAK,YAAY,YAAY,KAAK,uBAAuB,EACzD,KAAK,YAAY,QAAQ,iBAAiB,UAAW,KAAK,UAAU,KAAK,IAAI,EAAG,EAAK,EACrF,KAAK,aAAe,SAAS,cAAc,KAAK,EAChD,KAAK,aAAa,GAAK,gBACvB,KAAK,aAAa,UAAU,IAAI,MAAM,EACtCF,EAAc,QAAQ,YAAY,KAAK,YAAY,EACnD,KAAK,eAAiB,SAAS,cAAc,KAAK,EAClD,KAAK,eAAe,UAAU,IAAI,kBAAkB,EACpDA,EAAc,QAAQ,aAAa,KAAK,eAAgBA,EAAc,QAAQ,UAAU,EACxF,KAAK,oBAAqB,EAAC,UAAU,IAAI,uBAAuB,EAChE,MAAMG,EAAuB,SAAS,cAAc,KAAK,EACzDA,EAAqB,UAAU,IAAI,kBAAkB,EACrDA,EAAqB,aAAa,QAAS,GAAGC,GAAsB,kBAAkB,CAAC,EAAE,EACzF,KAAK,oBAAqB,EAAC,aAAaD,EAAsB,KAAK,oBAAmB,EAAG,UAAU,EACnG,MAAME,EAAU,IAAIC,EAAmB,GAAIH,CAAoB,EAC/DE,EAAQ,cAAc,EAAI,EAC1B,KAAK,mBAAqBxC,GAAiC,SAAQ,EAAG,UAAUkC,CAAiB,EACjG,KAAK,mBAAqBO,EAAmB,mBAAmB,KAAK,kBAAkB,EACvFD,EAAQ,kBAAkB,KAAK,kBAAkB,EACjDA,EAAQ,kBAAkBC,EAAmB,wBAAwB,oBAAoB,CAAC,EAC1FD,EAAQ,gBAAe,EACvBA,EAAQ,kBAAkBC,EAAmB,wBAAwB,yBAAyB,CAAC,EAC/F,KAAKT,GAAoBhC,GAAiC,SAAQ,EAAG,UAAU,uBAAuB,EACtG,KAAKgC,GAAkB,WAAW,EAAK,EACvCQ,EAAQ,kBAAkBC,EAAmB,mBAAmB,KAAKT,EAAiB,CAAC,EACvFQ,EAAQ,gBAAe,EACvBA,EAAQ,kBAAkBC,EAAmB,wBAAwB,4BAA4B,CAAC,EAClG,KAAK,mBAAqB,IAAIA,EAAmB,GAAI,KAAK,cAAc,EACxE,KAAK,mBAAmB,cAAc,EAAI,EAC1C,KAAK,mBAAmB,QAAQ,aAAa,QAAS,GAAGF,GAAsB,cAAc,CAAC,EAAE,EAChG,KAAK,cAAgB,GACrB,KAAK,aAAe,IAAInD,GAAoB,IAAI,EAChD,KAAK,aAAa,iBAAiB,sBAAyE,KAAK,sBAAuB,IAAI,EAC5I,KAAK,cAAgB,GACrB,KAAK,uBAAyB,GAC9B,MAAMsD,EAAQ,KAAK,aACnB,QAAS/I,EAAI,EAAGA,EAAI+I,EAAM,OAAQ/I,IAC9B,KAAK,oBAAoB+I,EAAM/I,CAAC,CAAC,EAErC,KAAK,aAAa,6BAClB,KAAK,wBAAwB,SAC7B,KAAK,iBAAgB,EACrB,KAAK,0BAAyB,EAC9ByD,EAAgC,SAAQ,EAAG,iBAAiB,sBAA4E,KAAK,sBAAuB,IAAI,EACxKsB,EAAmB,SAAQ,EAAG,wBAAwBE,GAAuC,KAAK,4BAA6B,IAAI,EACnIF,EAAmB,SAAQ,EAAG,wBAAwBC,EAAyC,KAAK,4BAA6B,IAAI,CACxI,CACD,UAAUgE,EAAI,CACV,MAAMpF,EAAQoF,EACd,IAAIC,EAAU,GACVrF,EAAM,MAAQ,aAAe,CAACA,EAAM,OACpCqF,EAAU,KAAK,YAAY,aAEtBrF,EAAM,MAAQ,WAAa,CAACA,EAAM,SACvCqF,EAAU,KAAK,YAAY,kBAE3BA,GACArF,EAAM,QAAQ,EAAI,CAEzB,CACD,gBAAiB,CAGb,MAAMsF,EAAc,KAAK,YACzB,OAAOA,GAAeA,EAAY,eAAiBA,EAAY,eAAgB,EAAG,IACrF,CACD,2BAA4B,CACpB,KAAK,qBACL,KAAK,QAAQ,YAAY,KAAK,mBAAmB,EAErD,KAAK,oBAAsBC,GAAqC,KAAK,aAAa,KAAK,IAAI,CAAC,EAC5F,KAAK,QAAQ,YAAY,KAAK,mBAAmB,CACpD,CACD,2BAA2BC,EAAU,CACjC,OAAO,KAAK,aAAa,KAAKnC,GAAQ,EAAQA,EAAK,cAAe,GAAKmC,EAAS,SAASnC,EAAK,cAAe,GAAI,EAAE,CAAC,GAChH,IACP,CACD,MAAM,aAAapE,EAAM,CACrB,KAAK,0BAAyB,EAC9B,MAAMd,EAAc,KAAK,2BAA2Bc,EAAK,IAAI,EAC7D,GAAI,CAACd,EAAa,CACd,MAAMsH,EAAa,IAAI,IAAI,KAAK,aAAa,IAAIpC,GAAQA,EAAK,cAAe,CAAA,EAAE,OAAOqC,GAAOA,CAAG,CAAC,EACjG3O,EAAuB,SAAQ,EAAG,MAAMa,GAAWH,GAAU,0BAA2B,CAAE,IAAK,MAAM,KAAKgO,CAAU,EAAE,KAAK,MAAQ,CAAG,CAAA,CAAC,EACvI,MACH,CACD,GAAYtH,EAAY,qBAAoB,EAAK,CAC7CpH,EAAuB,SAAQ,EAAG,MAAMa,GAAWH,GAAU,2BAA2B,CAAC,EACzF,MACH,CACD,MAAML,EAAQ,MAAM+G,EAAY,aAAac,CAAI,EAC7C7H,GAAS,YAAaA,GACjBuO,GAAyB,KAAK/N,GAAWH,GAAU,sBAAuB,CAAE,IAAKL,EAAM,OAAS,CAAA,EAAG,OAAW,wBAAwB,CAElJ,CACD,cAAe,CACX,GAAI,CAAC,KAAK,mBAAmB,UACzB,MAAO,GAEX,MAAMwO,EAAeC,GAAwC,KAAK,QAAQ,aAAa,EACjFxC,EAAO,KAAK,oBAClB,GAAI,CAACA,EACD,MAAO,GAEX,MAAMyC,EAAczC,EAAK,gBACzB,YAAK,yBAAyByC,CAAW,EACrCA,GACA,KAAK,aAAa,iBACdzC,EAAK,oBACL,KAAK,YAAYA,EAAK,qBAAsB,CAAA,GAIhD,KAAK,aAAa,kBAElBuC,GACAA,EAAa,MAAK,EAEf,EACV,CACD,uBAAwB,CACpB,KAAK,yBAAyB,KAAK,mBAAmB,QAAS,CAAA,CAClE,CACD,yBAAyBG,EAAS,CAC9B,MAAMC,EAAoB,GAAQ7E,EAAmB,SAAU,EAAC,OAAOE,EAAqC,GACxGF,EAAmB,SAAU,EAAC,OAAOC,CAAuC,GAC1E6E,EAASF,GAAY,CAAClG,EAAgC,SAAQ,EAAG,oBAAmB,GAAMmG,EAChG,KAAK,mBAAmB,WAAWC,CAAM,EACzC,KAAK,mBAAmB,WAAWF,CAAO,EACtCE,EACA,KAAK,mBAAmB,SAAS,KAAK,oBAAsB,KAAK,oBAAoB,cAAgB,EAAE,EAGvG,KAAK,mBAAmB,SAASvD,GAAuC,CAAA,EAExE,KAAK,qBACL,KAAK,aAAa,kBAAkB,KAAK,oBAAqBuD,CAAM,CAE3E,CACD,6BAA8B,CAC1B,KAAK,yBAAyB,EAAK,EACnC,KAAK,aAAa,iBACrB,CACD,sBAAsBjG,EAAO,CACzB,KAAK,oBAAsBA,EAAM,KACjC,KAAK,4BAA2B,CACnC,CACD,6BAA8B,CAC1B,KAAK,yBAAyB,KAAK,mBAAmB,QAAS,CAAA,CAClE,CACD,OAAQ,CACJ,KAAK,aAAa,QAAQqD,GAAQA,EAAK,MAAK,CAAE,EAC9C,OAAO,KAAK,YACZ,KAAK,cAAgB,GACrB,KAAK,yBAAyB,EAAK,EACnC,KAAK,aAAa,kBAClB,KAAK,YAAY,QAAQ,UAAU,OAAO,iBAAiB,EAC3D,KAAK,aAAa,SAClB,KAAK,aAAa,iBAClB,KAAK,mBAAmB,qBACxB,KAAK,wBAAwB,SAC7B,KAAK,iBAAgB,CACxB,CACD,kBAAmB,CACf,KAAK,iBAAgB,EACrB,KAAK,mBAAmB,qBACxB,KAAK,aAAa,KAAK,KAAK,YAAY,EACxC,KAAK,YAAc,KAAK,aACxB,KAAK,eAAe,UAAU,IAAI,QAAQ,EAC1C,KAAKoB,GAAkB,WAAW,EAAK,CAC1C,CACD,oBAAoBtG,EAAa,CAC7B,KAAK,aAAa,eAAeA,CAAW,EAC5C,MAAM+H,EAAqB,IAAIC,GAA0B,KAAMhI,CAAW,EAC1E,KAAK,uBAAuBA,EAAY,EAAE,EAAI+H,EAC9C,KAAK,YAAY,YAAYA,CAAkB,EAC/C,SAASE,EAAmBpG,EAAO,CAC/B,KAAK,iBAAiBA,EAAM,IAAI,CACnC,CACD,SAASqG,EAAsBrG,EAAO,CAClC,KAAK,oBAAoBA,EAAM,IAAI,CACtC,CACD,SAASsG,EAAgBtG,EAAO,CAC5B,KAAK,YAAYA,EAAM,IAAI,CAC9B,CACD7B,EAAY,iBAAiB,eAAqD,KAAK,4BAA6B,IAAI,EACxHA,EAAY,iBAAiB,qBAAiEiI,EAAoB,IAAI,EACtHjI,EAAY,iBAAiB,wBAAuEkI,EAAuB,IAAI,EAC/HlI,EAAY,iBAAiB,mBAA6DmI,EAAiB,IAAI,EAC/G,MAAMC,EAAWpI,EAAY,cAC7B,QAAS/B,EAAI,EAAGA,EAAImK,EAAS,OAAQnK,IACjC,KAAK,iBAAiBmK,EAASnK,CAAC,CAAC,CAExC,CACD,wBAAyB,CACrB,KAAK,oBAAoB,OAC5B,CACD,iBAAiB2C,EAAS,CAEtB,MAAMoE,EADcpE,EAAQ,cACD,GAC3B,KAAK,uBAAuBoE,CAAM,EAAE,iBAAiBpE,CAAO,GACxD,CAAC,KAAK,aAAe,KAAK,cAAgB,KAAK,eAC/C,KAAK,YAAYA,CAAO,CAE/B,CACD,oBAAoBA,EAAS,CACrBA,EAAQ,YAAW,EAAG,qBAAoB,IAAOA,GACjD,KAAK,4BAA2B,EAEpC,MAAM3C,EAAI,KAAK,sBAAsB2C,CAAO,EACxC3C,IAAM,IACN,KAAK,cAAc,OAAOA,EAAG,CAAC,EAElC,MAAM+G,EAASpE,EAAQ,YAAW,EAAG,GACd,KAAK,uBAAuBoE,CAAM,EAAE,oBAAoBpE,CAAO,IAIlF,KAAK,wBAAwB,SAC7B,KAAK,iBAAgB,EAE5B,CACD,YAAYA,EAAS,CACjB,GAAI,CAACA,GACAA,EAAQ,YAAa,EAAC,qBAAsB,IAAKA,GAAY,CAACA,EAAQ,cAAc,mBACrF,OAAO,KAEX,MAAMyH,EAAO,KAAK,eAAezH,CAAO,EACxC,GAAIyH,IAAS,KAAK,YACd,OAAOA,EAEX,KAAK,iBAAgB,EACrBrF,EAAmB,SAAU,EAAC,UAAUlD,GAAec,CAAO,EAC9D,KAAK0F,GAAkB,WAAW1F,EAAQ,cAAe,CAAA,EACzDyH,EAAK,KAAK,KAAK,YAAY,EAC3B,KAAK,eAAe,UAAU,OAAO,QAAQ,EAC7C,KAAK,YAAcA,EAEnB,MAAMC,EADqB,KAAK,uBAAuB1H,EAAQ,YAAW,EAAG,EAAE,EACrC,yBAAyBA,CAAO,EAC1E,OAAI0H,GACAA,EAAe,gBAAe,EAElC,KAAK,mBAAmB,qBACnBD,EAAK,eAAe,KAAKE,GAAS,CACnCA,EAAM,IAAIvK,GAAQ,KAAK,mBAAmB,kBAAkBA,CAAI,CAAC,CAC7E,CAAS,EACMqK,CACV,CACD,WAAWG,EAAmBC,EAAkB,CAC/C,CACD,MAAM,cAAcC,EAAY,CAC5B,OAAO,IACV,CACD,eAAe9H,EAAS,CACpB,MAAMrG,EAAQ,KAAK,sBAAsBqG,CAAO,EAChD,GAAIrG,IAAU,GACV,OAAO,KAAK,cAAcA,CAAK,EAAE,KAErC,MAAM8N,EAAOzH,EAAQ,WAAW,IAAI,EACpC,OAAAyH,EAAK,QAAQ,UAAU,IAAI,cAAc,EACzC,KAAK,cAAc,KAAK,CAAE,QAAAzH,EAAS,KAAAyH,CAAM,CAAA,EAClCA,CACV,CACD,sBAAsBzH,EAAS,CAC3B,OAAO,KAAK,cAAc,UAAU5C,GAAQA,EAAK,UAAY4C,CAAO,CACvE,CACD,kBAAmB,CACfoC,EAAmB,SAAU,EAAC,UAAUlD,GAAe,IAAI,EAC3D,KAAKwG,GAAkB,WAAW,EAAK,EACnC,KAAK,aACL,KAAK,YAAY,SAErB,OAAO,KAAK,WACf,CACD,OAAQ,CACJ,KAAK,YAAY,OACpB,CACD,UAAW,CACP,MAAM,SAAQ,EACdtD,EAAmB,SAAU,EAAC,UAAUoD,GAAe,IAAI,EAC3D,KAAK,iBAAiB,CAACuC,GAAmBC,GAAqBC,EAAkB,CAAC,EAClF,KAAK,YAAY,iBAAiB,CAACC,EAAyB,CAAC,CAChE,CACD,UAAW,CACP9F,EAAmB,SAAU,EAAC,UAAUoD,GAAe,IAAI,EAC3D,MAAM,SAAQ,CACjB,CACL,CACO,MAAM4B,WAAkC1C,EAA2B,CACtE,oBACA,oBACA,cACA,YAAYC,EAAqBvF,EAAa,CAC1C,MAAMA,EAAY,cAAe,EAAI,EACrC,KAAK,WAAa,GAClB,KAAK,oBAAsBuF,EAC3B,KAAK,oBAAsB,GAC3B,KAAK,cAAgB,GACrB,KAAK,OAAM,EACX,KAAK,OAAS,GACd,KAAK,eAAe,EAAK,CAC5B,CACD,iBAAiB3E,EAAS,CACtB,KAAK,OAAS,GACd,MAAMZ,EAAcY,EAAQ,cAC5B,IAAImI,EAAgB,KACpB,MAAMC,EAAqBpI,EAAQ,yBAAyB,KAAK,mBAAmB,EAEpF,GADA,KAAK,oBAAoB,KAAKoI,CAAkB,EAC5C,CAACpI,EAAQ,SAAQ,GAAMZ,EAAY,qBAAsB,IAAKY,EAAS,CACvE,MAAMqI,EAAerI,EAAQ,MAC7B,IAAIsI,EAAQ,KAAK,cAAcD,CAAY,EACtCC,IACDA,EAAQ,IAAIC,GACZ,KAAK,cAAcF,CAAY,EAAIC,GAEvCA,EAAM,2BAA2B,KAAKF,CAAkB,EACxD,MAAMI,EAAYF,EAAM,2BAA2B,OACnD,GAAIE,IAAc,EAAG,CAEjBF,EAAM,mBAAqB,IAAIG,GAA+B,KAAK,oBAAqBzI,EAAQ,KAAK,EACrG,MAAM0I,EAA0BJ,EAAM,2BAA2B,CAAC,EAE5D3O,EAAQ,KAAK,SAAU,EAAC,QAAQ+O,CAAuB,EAC7D,KAAK,YAAYJ,EAAM,mBAAoB3O,CAAK,EAEhD,MAAMgP,EAAWD,EAAwB,SACzC,KAAK,YAAYA,CAAuB,EACxCJ,EAAM,mBAAmB,YAAYI,CAAuB,EACxDC,GACAD,EAAwB,gBAAe,EAE3CA,EAAwB,SAAS,EAAI,EACrCA,EAAwB,aAAa7P,GAAWH,GAAU,KAAM,CAAE,IAAK,CAAG,CAAA,CAAC,EACvE,KAAK,aACL,KAAK,YAAY,QAAQ,UAAU,IAAI,iBAAiB,CAE/D,CACG8P,GAAa,IACbL,EAAgBG,EAAM,mBACtBF,EAAmB,SAAS,EAAI,EAChCA,EAAmB,aAAavP,GAAWH,GAAU,KAAM,CAAE,IAAK8P,CAAW,CAAA,CAAC,EAErF,CACGL,GACAA,EAAc,YAAYC,CAAkB,CAEnD,CACD,oBAAoBpI,EAAS,CACzB,MAAMrG,EAAQ,KAAK,oBAAoBqG,CAAO,EAC9C,GAAIrG,IAAU,GACV,MAAO,GAEX,MAAMyO,EAAqB,KAAK,oBAAoBzO,CAAK,EACzD,KAAK,oBAAoB,OAAOA,EAAO,CAAC,EACxC,IAAIwO,EAAgB,KACpB,MAAMG,EAAQ,KAAK,cAActI,EAAQ,KAAK,EAC9C,GAAIsI,EAAO,CACP,MAAMM,EAAgBN,EAAM,2BAE5B,GADAM,EAAc,OAAOA,EAAc,QAAQR,CAAkB,EAAG,CAAC,EAC7DQ,EAAc,SAAW,EAAG,CAE5B,MAAMC,EAAMV,EAAc,SAAQ,EAAG,QAAQG,EAAM,kBAAkB,EACjEA,EAAM,oBACNA,EAAM,mBAAmB,YAAYM,EAAc,CAAC,CAAC,EAEzD,KAAK,YAAYA,EAAc,CAAC,EAAGC,CAAG,EACtCD,EAAc,CAAC,EAAE,SAAS,EAAK,EAC/BA,EAAc,CAAC,EAAE,aAAa5I,EAAQ,KAAK,EACvCsI,EAAM,oBACN,KAAK,YAAYA,EAAM,kBAAkB,CAEhD,CACGM,EAAc,SAAW,IACzBT,EAAgBG,EAAM,mBAE7B,CAKD,OAJIH,GACAA,EAAc,YAAYC,CAAkB,EAEhDA,EAAmB,QAAO,EACtB,KAAK,aACE,IAEX,KAAK,OAAS,GACP,GACV,CACD,yBAAyBpI,EAAS,CAC9B,MAAMrG,EAAQ,KAAK,oBAAoBqG,CAAO,EAC9C,OAAOrG,IAAU,GAAK,KAAO,KAAK,oBAAoBA,CAAK,CAC9D,CACD,oBAAoBqG,EAAS,CACzB,MAAM8I,EAAW,KAAK,oBACtB,QAAS,EAAI,EAAG,EAAIA,EAAS,OAAQ,IACjC,GAAIA,EAAS,CAAC,EAAE,UAAY9I,EACxB,OAAO,EAGf,MAAO,EACV,CACD,UAAW,CACP,KAAK,gBAAgB,UAAU,IAAI,uBAAuB,CAC7D,CACL,CACO,MAAMuI,EAAa,CACtB,2BACA,mBACA,aAAc,CACV,KAAK,2BAA6B,GAClC,KAAK,mBAAqB,IAC7B,CACL,CACO,MAAME,WAAuC/D,EAA2B,CAC3E,oBACA,aACA,cACA,YAAYC,EAAqBtF,EAAO,CACpC,MAAM,GAAI,EAAI,EACd,KAAK,WAAa,GAClB,KAAK,oBAAsBsF,EAC3B,KAAK,aAAetF,EACpB,KAAK,OAAM,EACX,KAAK,cAAgB,EACxB,CACD,UAAW,CACP,MAAMlG,EAAc,KAAK,WAAU,EAAK,EACxC,GAAIA,EAAa,CACb,MAAM4P,EAAY,KAAK,YACnBA,aAAqBtE,IACrB,KAAK,oBAAoB,YAAYsE,EAAU,OAAO,CAE7D,CACD,OAAO5P,CACV,CACD,UAAW,CACP,KAAK,gBAAgB,UAAU,IAAI,iCAAiC,EACpE,KAAK,gBAAgB,YAAY,MAAO,MAAM,EAC9C,KAAK,gBAAgB,YAAY,MAAO,oBAAoB,EACvD,YAAY,OAAQ,iBAAiB,EACrC,YAAY,OAAQ,OAAO,EAC3B,YAAc,KAAK,YAC3B,CACL,CACO,MAAM2M,WAAmCpB,EAA2B,CACvE,MACA,YAAYsE,EAAO,CACf,MAAM,GAAI,EAAK,EACf,KAAK,WAAa,GAClB,KAAK,MAAQA,CAChB,CACD,UAAW,CACP,YAAK,MAAM,mBACJ,EACV,CACD,UAAW,CACP,KAAK,gBAAgB,UAAU,IAAI,iCAAiC,EACpE,KAAK,gBAAgB,YAAY,MAAO,oBAAoB,EACvD,YAAY,OAAQ,iBAAiB,EACrC,YAAY,OAAQ,OAAO,EAC3B,YAAcnQ,GAAWH,GAAU,QAAQ,EAChD,KAAK,gBAAgB,CAACuQ,GAAuB,MAAM,CAAC,CAAC,CACxD,CACL,CACO,IAAAC,GAAA,KAAqB,CACxB,aAAaC,EAASC,EAAU,CAC5B,OAAQA,EAAQ,CACZ,IAAK,qBAAsB,CACvB,MAAMpG,EAAgBmG,EAAQ,OAAO3D,EAAa,EAClD,OAAIxC,IAAkB,MAClBA,EAAc,MAAK,EACZ,IAEJ,EACV,CACD,IAAK,0BAA2B,CAC5B,MAAMA,EAAgBmG,EAAQ,OAAO3D,EAAa,EAClD,OAAIxC,IAAkB,MAClBA,EAAc,uBAAsB,EAC7B,IAEJ,EACV,CACD,IAAK,wBAAyB,CAC1B,MAAMhD,EAAUmJ,EAAQ,OAAOjK,EAAa,EAC5C,OAAIc,IAAY,MACZA,EAAQ,WAAU,EACX,IAEJ,EACV,CACD,IAAK,0BAA2B,CAC5B,MAAMA,EAAUmJ,EAAQ,OAAOjK,EAAa,EAC5C,OAAIc,IAAY,MACZA,EAAQ,YAAW,EAAG,cAAcA,CAAO,EACpC,IAEJ,EACV,CACJ,CACD,MAAO,EACV,CACL,sPCzkBMtH,GAAY,CAId,cAAe,iBAIf,SAAU,aAIV,qBAAsB,wBAC1B,EACMC,GAAOC,EAA4B,kDAAmDF,EAAS,EAC/FG,GAAaC,EAA6B,KAAK,OAAWH,EAAI,EAC7D,MAAM0Q,WAAqCC,EAA+B,CAC7E,aAAc,CACV,MAAMC,EAAU,CAAA,EAChBA,EAAQ,KAAK,CACT,GAAI,gBACJ,MAAO1Q,GAAWH,GAAU,aAAa,EACzC,SAAU,EACtB,CAAS,EACD6Q,EAAQ,KAAK,CACT,GAAI,sBACJ,MAAO1Q,GAAWH,GAAU,QAAQ,EACpC,SAAU,GACV,WAAY,EACxB,CAAS,EACD,MAAM,CACF,YAAaG,GAAWH,GAAU,oBAAoB,EACtD,QAAA6Q,EACA,aAAc,OACd,eAAgB,OAChB,gBAAiB,MAC7B,CAAS,EACD,KAAK,WAAW,EAAI,CACvB,CACL,CACO,MAAMC,WAAyCxQ,EAA+B,CACjF,oBACA,SACA,gBAAkB,IAAI,IACtB,YAAYyQ,EAAqBC,EAAU,CACvC,MAAM,IAAI,EACV,KAAK,oBAAsBD,EAC3B,KAAK,SAAWC,EAChB,UAAWC,KAAkBF,EAAoB,gBAC7C,KAAK,gBAAgB,IAAIE,CAAc,CAE9C,CACD,WAAWrP,EAAU,CACjB,MAAMC,EAAO,KAAK,SAASD,CAAQ,EACnC,OAAQA,EAAQ,CACZ,IAAK,gBAAiB,CAClB,MAAMsP,EAAUC,GAAqB,OAAO,KAAK,SAAU,KAAM,GAAO,KAAK,oBAAoB,QAAQ,EACzG,OAAAtP,EAAK,YAAY,KAAKuP,GAAcF,CAAO,CAAC,EACrCrP,CACV,CACD,IAAK,sBAAuB,CACxB,MAAMwP,EAAO,KAAKC,GAAa,KAAK,mBAAmB,EACvDrP,OAAAA,GAA2BJ,EAAMwP,EAAK,SAAU,CAAA,EACzCxP,CACV,CACJ,CACD,OAAOA,CACV,CACDyP,GAAaP,EAAqB,CAC9B,IAAI/P,EAAQ,EACZ,MAAMuQ,EAAQ,CAAA,EACd,IAAI1O,EAEJ,IADA0O,EAAM,KAAKR,EAAoB,QAAQ,EAChCQ,EAAM,OAAS,IAClB1O,EAAO0O,EAAM,QACT,EAAC1O,IAML,GAHIA,EAAK,iBACL7B,GAAS6B,EAAK,gBAEdA,EAAK,SACL,UAAWtB,KAASsB,EAAK,SACrB0O,EAAM,KAAKhQ,CAAK,EAI5B,OAAOP,CACV,CACDoQ,GAAcvO,EAAM,CAChB,MAAM2O,EAAc,IAAIC,GACD,GAA4B,GAAyB,EAAI,EAChFD,EAAY,YAAc3O,EAC1B,MAAM6O,EAAaF,EAAY,cAC3B,CAACE,GAAeA,GAAc,CAACA,EAAW,aAAc,IACxDF,EAAY,QAAQ,UAAU,IAAI,aAAa,EAEnDA,EAAY,WAAW,EAAI,EAE3BA,EAAY,QAAQ,mBAAqBE,EACzCF,EAAY,gCAA4C,GAA6B,EAAI,EACzF,MAAMG,EAAQ,CAAC9O,CAAI,EAEnB,KAAO8O,EAAM,OAAS,GAAG,CACrB,MAAMC,EAAiBD,EAAM,QACvBE,EAAsBD,EAAe,WAC3C,GAAIC,EACA,UAAWtQ,KAASsQ,EAChBF,EAAM,KAAKpQ,CAAK,EAGxB,MAAMuQ,EAAcN,EAAY,gBAAgBI,CAAc,EAE9D,GAAIE,EACA,GAAI,KAAK,gBAAgB,IAAIF,EAAe,cAAe,CAAA,EAAG,CAC1D,MAAMG,EAAO,IAAIhQ,GAEjBgQ,EAAK,KAAO,CAAE,SAAU,mBAAoB,MAAO,oBAAqB,MAAO,OAAQ,OAAQ,MAAM,EACrGA,EAAK,MAAM,YAAY,iBAAkB,QAAQ,EACjDD,EAAY,gBAAgB,CAACC,CAAI,CAAC,EAClCD,EAAY,aAAa,UAAU,IAAI,iCAAiC,EACxEA,EAAY,aAAa,MAAM,YAAY,UAAW,aAAa,EACnEA,EAAY,aAAa,aAAa,QAAS,eAAe,CACjE,MAEGA,EAAY,aAAa,aAAa,QAAS,MAAM,CAGhE,CACD,OAAAN,EAAY,gBAAgB3O,CAAI,GAAG,aAAa,aAAa,QAAS,oBAAoB,EACnF2O,EAAY,OACtB,CACL,CC3GA,IAAIQ,GAAyB,KACtB,MAAMC,EAA8B,CACvC,uBACA,sBACA,qBACA,WACAC,GACA,SACA,aAAc,CACV,KAAK,uBAAyBD,GAA8B,iBAC5D,KAAK,sBAAwB,EAC7B,KAAK,qBAAuB,KAC5B,KAAK,WAAa,GAClB,KAAKC,GAAQ,GAAGC,EAA6B,IAAIC,GAAoC,CAAA,EACxF,CACD,OAAO,gBAAiB,CACpB,OAAKJ,KACDA,GAAyB,IAAIK,GAAuB,CAAE,IAAK,GAAI,IAAK,IAAK,MAAO,MAAW,EAAE,CAAE,IAAK,GAAI,IAAK,GAAI,MAAO,CAAC,EAAI,CAAE,IAAK,GAAI,IAAK,GAAI,MAAO,CAAG,CAAA,EAC3JL,GAAuB,cAAc,SAAU,iBAAiB,EAChEA,GAAuB,cAAc,YAAa,iBAAiB,EACnEA,GAAuB,cAAc,sBAAuB,iBAAiB,GAE1EA,EACV,CACD,iBAAkB,CACd,KAAM,kBACT,CACD,WAAY,CACR,KAAM,kBACT,CACD,YAAY7P,EAAOmQ,EAAW,CAC1B,OAAOC,GAAyCpQ,EAAOmQ,CAAS,CACnE,CACD,eAAgB,CACZ,OAAO,KAAK,qBACf,CACD,2BAA4B,CACxB,MAAO,EACV,CACD,cAAe,CACX,OAAO,KAAK,sBAAwB,KAAK,sBAAqB,CACjE,CACD,uBAAwB,CACpB,KAAM,kBACT,CACD,4BAA4BE,EAAa,CACrC,KAAM,kBACT,CACD,eAAeC,EAAY,CACvB,OAAO,KAAK,WAAWA,CAAU,EAAE,WAAa,GACnD,CACD,WAAWA,EAAY,CACnB,MAAM5P,EAAO,KAAK,WAAW4P,CAAU,EACvC,OAAO/R,GAAgCmC,EAAK,YAAY,CAC3D,CACD,UAAU4P,EAAY,CAClB,MAAMC,EAAW,QAAU,KAAKR,GAChC,OAAO,KAAK,oBAAoBO,CAAU,EAAIC,EAAW,KAAKR,EACjE,CACD,oBAAoBM,EAAa,CAC7B,KAAM,kBACT,CACD,WAAWC,EAAY,CACnB,MAAM5P,EAAO,KAAK,WAAW4P,CAAU,EAGvC,OAAO,KAAK,uBAAuB,WAAW5P,EAAK,MAAQA,EAAK,WAAa,IAAMA,EAAK,SAAWA,EAAK,aAAa,CACxH,CACD,cAAc2P,EAAaG,EAAUC,EAAOC,EAAOC,EAAOC,EAAWC,EAAY,CAC7E,MAAO,EACV,CACD,gBAAgBR,EAAa,CACzB,MAAO,EACV,CACD,UAAUA,EAAa,CACnB,MAAO,MACV,CACD,kBAAmB,CACf,OAAO,KAAK,WAAW,MAC1B,CACL,CACO,MAAMS,WAA0B5I,EAAgCzC,CAAc,CAAE,CACnF,eACA,aACA,SACA,cACA,aACA,cACA,kBAAoB,GACpB,YAAY5E,EAAgBkQ,EAAc,CACtC,QACA,KAAK,QAAQ,GAAK,kBAClB,KAAK,eAAiBlQ,EACtB,KAAK,aAAe,IAAImQ,GAAaD,CAAY,EACjD,KAAK,aAAa,KAAK,KAAK,OAAO,EACnC,KAAK,SAAW,IAAIE,GAA6BF,EAAc,KAAK,YAAY,EAChF,KAAK,SAAS,aAAa,EAAE,EAC7B,KAAK,SAAS,gBAAgB,CAAC,EAC/B,KAAK,SAAS,eAAe,CAAC,EAC9B,KAAK,SAAS,KAAK,KAAK,OAAO,EAC/B,KAAK,SAAS,iBAAiB,gBAA+D,KAAK,gBAAiB,IAAI,EACxH,KAAK,SAAS,iBAAiB,eAA6D,KAAK,eAAgB,IAAI,EACrH,KAAK,cAAgB,GACrB,KAAK,SAAS,iBAAiB,gBAA+D,KAAK,gBAAiB,IAAI,EACxH,KAAK,aAAa,iBAAiB,gBAAyD,KAAK,gBAAiB,IAAI,EACtH,KAAK,aAAeA,EACpB,KAAK,cAAgB,EACxB,CACD,OAAQ,CACJ,KAAK,SAAS,OACjB,CACD,gBAAgB3K,EAAO,CACnB,KAAM,CAAE,eAAgB8K,EAAY,gBAAiBC,CAAa,EAAG/K,EAAM,KAC3E,KAAK,SAAS,eAAe8K,EAAYC,EAA2B,EAAI,CAC3E,CACD,YAAYC,EAAUC,EAAW,CAC7B,KAAK,aAAa,YAAYD,EAAUC,CAAS,CACpD,CACD,gBAAgBjL,EAAO,CACnB,GAAIA,EAAM,KAAM,CACZ,MAAMkL,EAAalL,EAAM,KACzB,KAAK,SAAS,iBAAiBkL,CAAU,EACrCA,IAAe,GACf,KAAK,cAAgB,GAGrB,KAAK,cAAgB,EAE5B,MACS,KAAK,gBACX,KAAK,SAAS,iBAAiB,CAAC,EAChC,KAAK,cAAgB,GAE5B,CACD,eAAelL,EAAO,CAClB,KAAK,gBAAgBA,CAAK,EAC1B,KAAK,yBAAyB,eAA6DA,EAAM,IAAI,CACxG,CACD,QAAS,CACL,KAAK,aAAa,SAClB,KAAK,SAAS,QACjB,CACD,cAAc9E,EAAciQ,EAAanP,EAAe,CACpD,MAAMJ,EAAUC,GAAoDX,EAAa,MAAOA,EAAa,cAAgB,GAAK,GAAG,EACvHkQ,EAAqB,KAAK,oBAAsB,GAAK,KAAK,cAAc,KAAK,iBAAiB,EAAI,GACxG,KAAK,cAAgB,GACrB,MAAMC,EAAe,KAAK,aAAa,iBAAgB,EACvD,QAAS3S,EAAQ,EAAGA,EAAQ2S,EAAc,EAAE3S,EACpC,KAAK,aAAa,WAAWA,CAAK,EAAE,MAAMkD,CAAO,GACjD,KAAK,cAAc,KAAKlD,CAAK,EAGjC,KAAK,cAAc,QACnB,KAAK,kBAAoB,KAAK,cAAc,QAAQ0S,CAAkB,EAClE,KAAK,oBAAsB,KAC3B,KAAK,kBAAoBpP,EAAgB,KAAK,cAAc,OAAS,EAAI,GAE7E,KAAK,SAAS,iBAAiB,KAAK,cAAc,KAAK,iBAAiB,CAAC,GAGzE,KAAK,iBAAgB,EAEzB,KAAK,eAAe,yBAAyB,KAAK,cAAc,MAAM,EACtE,KAAK,eAAe,wBAAwB,KAAK,iBAAiB,CACrE,CACD,kBAAmB,CACf,KAAK,SAAS,iBAAiB,EAAE,EACjC,KAAK,cAAgB,GACrB,KAAK,kBAAoB,EAC5B,CACD,wBAAyB,CACrB,KAAK,mBAAqB,KAAK,kBAAoB,GAAK,KAAK,cAAc,OAC3E,KAAK,SAAS,iBAAiB,KAAK,cAAc,KAAK,iBAAiB,CAAC,EACzE,KAAK,eAAe,wBAAwB,KAAK,iBAAiB,CACrE,CACD,4BAA6B,CACzB,KAAK,mBAAqB,KAAK,kBAAoB,EAAI,KAAK,cAAc,QAAU,KAAK,cAAc,OACvG,KAAK,SAAS,iBAAiB,KAAK,cAAc,KAAK,iBAAiB,CAAC,EACzE,KAAK,eAAe,wBAAwB,KAAK,iBAAiB,CACrE,CACD,6BAA8B,CAC1B,MAAO,EACV,CACD,qBAAsB,CAClB,MAAO,EACV,CACL,CACO,IAAAsP,GAAA,KAAyB,CAC5B,UACA,kBACA,kBACA,aACA,YAAY9Q,EAAW,CACnB,KAAK,UAAYA,CACpB,CACD,iBAAiB+Q,EAAc,CAC3B,KAAK,kBAAoBA,EAAa,aAAa,gBAAe,EAClE,MAAMC,EAAYD,EAAa,aAAa,UAAS,EACrD,KAAK,kBAAoB,KAAK,kBAAoBC,EAClD,KAAK,aAAeD,EAAa,kBAAkB,YAAcC,CACpE,CACD,gBAAgBC,EAAM,CAClB,OAAQA,EAAO,KAAK,mBAAqB,KAAK,YACjD,CACD,YAAY7R,EAAOmQ,EAAW,CAC1B,OAAO,KAAK,UAAUnQ,EAAQ,KAAK,kBAAmBmQ,CAAS,CAClE,CACD,iBAAkB,CACd,OAAO,KAAK,iBACf,CACD,iBAAkB,CACd,OAAO,KAAK,iBACf,CACD,UAAW,CACP,OAAO,KAAK,iBACf,CACD,cAAe,CACX,OAAO,KAAK,kBAAoB,KAAK,iBACxC,CACL,EACO,MAAMa,WAAqB9I,EAAgCzC,CAAc,CAAE,CAC9E,kBACA,mBACA,aACA,eACA,aACA,eACA,gBACA,cACA,YAAYsL,EAAc,CACtB,QACA,KAAK,QAAQ,UAAU,IAAI,uCAAuC,EAClE,KAAK,kBAAoB,KAAK,QAAQ,YAAY,MAAO,4CAA4C,EACrG,KAAK,mBAAqB,IAAIe,GAAmBf,EAAa,WAAW,EACzE,KAAK,aAAe,IAAIgB,GAAiC,0BAA2B,KAAK,kBAAkB,EAC3G,KAAK,aAAa,QAAQ,UAAU,IAAI,MAAM,EAC9C,KAAK,eACD,KAAK,kBAAkB,YAAY,SAAU,yCAAyC,EAC1F,KAAK,kBAAkB,YAAY,KAAK,aAAa,OAAO,EAC5D,KAAK,aAAehB,EACpB,KAAK,aAAa,iBAAiB,4BAA2F,KAAK,gBAAiB,IAAI,CAC3J,CACD,cAAciB,EAAiBC,EAAe,CAC1C,KAAK,YAAYD,EAAiBC,CAAa,CAClD,CACD,qBAAqBC,EAAYC,EAAU,CAC1C,CACD,oBAAoBC,EAAaC,EAAQ,CACxC,CACD,YAAYjB,EAAUC,EAAW,CAC7B,MAAMiB,EAAY,KAAK,aAAa,gBAAe,EAC7CV,EAAY,KAAK,aAAa,UAAS,EAC7C,KAAK,aAAa,WAAWR,EAAWkB,GAAaV,GAAYP,EAAYiB,GAAaV,CAAS,CACtG,CACD,gBAAgBxL,EAAO,CACnB,MAAMmM,EAAiB,CAAE,eAAgBnM,EAAM,KAAK,cAAe,gBAAiBA,EAAM,KAAK,aAC/F,KAAK,eAAiBmM,EAAe,eACrC,KAAK,gBAAkBA,EAAe,gBACtC,KAAK,yBAAyB,gBAAyDA,CAAc,CACxG,CACD,cAAe,CACX,OAAO,KAAK,aAAa,cAC5B,CACD,UAAW,CACP,KAAK,eAAc,CACtB,CACD,gBAAiB,CACT,KAAK,gBAGT,KAAK,cAAgB,KAAK,QAAQ,OAAQ,EAAC,sBAAsB,KAAK,OAAO,KAAK,IAAI,CAAC,EAC1F,CACD,QAAS,CACL,KAAK,cAAgB,EACA,KAAK,iBAI1B,KAAK,YAAY,KAAK,kBAAkB,YAAa,KAAK,kBAAkB,aAAeC,EAA6B,EACxH,KAAK,mBAAmB,iBAAiB,IAAI,EAC7C,KAAK,aAAa,eAAe,KAAK,kBAAkB,EACxD,KAAK,mBAAkB,EAC1B,CACD,oBAAqB,CACjB,MAAMC,EAAc,KAAK,eAAe,MAClCC,EAAe,KAAK,eAAe,OACnCC,EAAW,KAAK,kBAAkBF,CAAW,EAC7CnE,EAAU,KAAK,eAAe,WAAW,IAAI,EACnD,GAAI,CAACA,EACD,MAAM,IAAI,MAAM,8BAA8B,EAGlD,MAAMsE,EADQ,OAAO,iBAEfC,EAAY,EACZC,EAAeJ,GAAgB,KAAK,aAAa,cAAa,EAAK,KACzEpE,EAAQ,UAAYuE,EACpBvE,EAAQ,UAAU,GAAK,EAAG,EAC1BA,EAAQ,YAAc,mBACtBA,EAAQ,UAAY,wBACpBA,EAAQ,OAAO,CAACuE,EAAWH,EAAeG,CAAS,EACnDvE,EAAQ,OAAO,CAACuE,EAAW,KAAK,MAAMH,EAAeC,EAAS,CAAC,EAAIG,EAAeF,CAAgB,CAAC,EACnG,IAAI5S,EAAQ,EACZ,QAAS+S,EAAI,EAAGA,EAAIN,EAAa,EAAEM,EAC/B/S,EAAQ,KAAK,MAAM0S,EAAeC,EAASI,CAAC,EAAID,EAAeF,CAAgB,EAC/EtE,EAAQ,OAAOyE,EAAG/S,CAAK,EAE3BsO,EAAQ,OAAOmE,EAAcI,EAAW7S,CAAK,EAC7CsO,EAAQ,OAAOmE,EAAcI,EAAWH,EAAeG,CAAS,EAChEvE,EAAQ,KAAI,EACZA,EAAQ,OAAM,EACdA,EAAQ,UAAS,CACpB,CACD,kBAAkB0E,EAAO,CACrB,MAAMjC,EAAe,KAAK,aACpBkC,EAAe,KAAK,eACpBC,EAAkBD,EAAa,gBAC/BE,EAAkBF,EAAa,gBAC/BG,EAAcH,EAAa,YAC3BI,EAASH,EAAgB,OACzBI,EAAkB,KAAK,aAAa,gBAAe,EACnDX,EAAW,IAAI,WAAWK,CAAK,EAC/BO,EAAcP,EAAQjC,EAAa,UAAS,EAClD,QAAST,EAAa,EAAGA,EAAa+C,EAAQ,EAAE/C,EAAY,CACxD,MAAMkD,EAAQ,KAAK,OAAON,EAAgB5C,CAAU,EAAIgD,GAAmBC,CAAW,EAChFE,EAAS,KAAK,OAAOP,EAAgB5C,CAAU,EAAIgD,EAAkBH,EAAgB7C,CAAU,GAAKiD,CAAW,EACrH,QAASR,EAAIS,EAAOT,GAAKU,EAAQ,EAAEV,EAC/BJ,EAASI,CAAC,EAAI,KAAK,IAAIJ,EAASI,CAAC,EAAGK,EAAY9C,CAAU,EAAI,CAAC,CAEtE,CACD,OAAOqC,CACV,CACD,YAAYK,EAAOU,EAAQ,CACvB,MAAMC,EAAQ,OAAO,iBACrB,KAAK,eAAe,MAAQX,EAAQW,EACpC,KAAK,eAAe,OAASD,EAASC,EACtC,KAAK,eAAe,MAAM,MAAQX,EAAQ,KAC1C,KAAK,eAAe,MAAM,OAASU,EAAS,IAC/C,CACL,iMChXO,MAAME,WAAmC1V,CAAoB,CAChE,kBACA,YAAYE,EAAaC,EAAY,CACjC,MAAMC,EAAc,GAAQF,EAAY,UAAYA,EAAY,SAAS,QACzE,MAAMA,EAAaC,EAAYC,CAAW,EAC1C,KAAK,kBAAoBF,EAAY,QACxC,CACD,OAAO,eAAee,EAAW,CAC7B,MAAMH,EAAWG,EAAU,kBACrB0U,EAAiB7U,EAAS,OAChC,QAASwD,EAAI,EAAGA,EAAIqR,EAAgB,EAAErR,EAClCrD,EAAU,YAAY,IAAIyU,GAA2B5U,EAASwD,CAAC,EAAGrD,EAAU,IAAI,CAAC,EAErFA,EAAU,kBAAoB,EACjC,CACD,OAAO,mBAAmBA,EAAW8D,EAAU,CACvC9D,EAAU,kBAAkB,OAAS,GACrCA,EAAU,SAAQ,EAEtBA,EAAU,KAAI,EACd,MAAMH,EAAWG,EAAU,SAC3B,IAAIL,EAAQK,EAAU,SAAS,OAC/B,KAAOL,KACH8U,GAA2B,mBAAmB5U,EAASF,CAAK,EAAGmE,CAAQ,EAE3E,MAAM7D,EAAQD,EAAU,kBAAkB,IAAI8D,CAAQ,EAClD7D,GACAlB,EAAoB,MAAMiB,EAAWC,EAAO,EAAI,CAEvD,CACD,kBAAmB,CACfwU,GAA2B,eAAe,IAAI,CACjD,CACL,CACO,MAAME,WAAmCnT,EAAoB,CAChE,kBACA,YAAYC,EAAWC,EAAgBsC,EAAiBrC,EAAO,CAC3D,MAAMF,EAAWC,EAAgBC,CAAK,EACtC,KAAK,kBAAoBqC,EAAgB,SACzCjF,EAAoB,SAAS,IAAI,CACpC,CACD,MAAMuC,EAAqB,CAClBA,IAGL,KAAK,KAAI,EACTA,EAAoB,aAAY,EAChC,KAAK,SAAW,CAACA,CAAmB,EACpC,KAAK,MAAQA,EAAoB,MACpC,CACD,QAAQA,EAAqB,CACpBA,IAGL,KAAK,KAAI,EACTmT,GAA2B,mBAAmB,KAAMnT,EAAoB,OAAO,EAC3E,KAAK,gBACL,KAAK,KAAK,KAAK,eAAgB,EAAI,EAE1C,CACD,SAAU,CACD,KAAK,gBAGV,KAAK,SAAS,CAAC,EAAE,gBAAe,EAChC,MAAM,QAAO,EAChB,CACD,kBAAmB,CACfmT,GAA2B,eAAe,IAAI,CACjD,CACL,iKCxDM/V,EAAY,CAId,QAAS,UAKT,uBAAwB,qCAIxB,SAAU,WAIV,SAAU,WAIV,gBAAiB,oBAIjB,sBAAuB,0BAIvB,wBAAyB,4BAIzB,oBAAqB,wBAIrB,MAAO,QAIP,cAAe,oBAIf,YAAa,kBAKb,SAAU,gBAKV,SAAU,kBAMV,gBAAiB,mCAIjB,QAAS,WAIT,iBAAkB,sBAIlB,QAAS,WAKT,OAAQ,QACZ,EACMC,GAAOC,EAA4B,iCAAkCF,CAAS,EAC9EG,EAAaC,EAA6B,KAAK,OAAWH,EAAI,EAC7D,MAAMiW,WAAoBC,EAAmB,CAChD,gBACA,uBACA,SACA,mBACA,YACA,cACA,YACA,kBACA,cACA,SACA,cACA,cACA,4BACA,2BACA,yBACA,aACA,WACA,YACA,kBACA,oBACA,aAAc,CACV,MAAMhW,EAAWH,EAAU,OAAO,CAAC,EACnC,KAAK,gBAAkB,KACvB,KAAK,uBAAyB,IAAIoW,GAAiC,KAAM,IAAI,EAC7E,KAAK,uBAAuB,eAAejW,EAAWH,EAAU,sBAAsB,CAAC,EACvF,KAAK,uBAAuB,KAAK,KAAK,OAAO,EAC7C,MAAM6Q,EAAU,CAAA,EAChBA,EAAQ,KAAK,CACT,GAAI,OACJ,MAAO,KAAK,aAAa,MAAM,EAC/B,MAAO,QACP,WAAY,GACZ,SAAU,GACV,KAAMwF,EAAwB,WAC9B,iBAAkB,OAClB,MAAO,OACP,SAAU,OACV,cAAe,OACf,SAAU,OACV,WAAY,OACZ,OAAQ,OACR,4BAA6B,OAC7B,SAAU,OACV,cAAe,MAC3B,CAAS,EACDxF,EAAQ,KAAK,CACT,GAAI,QACJ,MAAO,KAAK,aAAa,OAAO,EAChC,MAAO,QACP,WAAY,GACZ,SAAU,GACV,KAAM,OACN,iBAAkB,OAClB,MAAO,OACP,SAAU,OACV,cAAe,OACf,SAAU,OACV,WAAY,OACZ,OAAQ,OACR,4BAA6B,OAC7B,SAAU,OACV,cAAe,MAC3B,CAAS,EACDA,EAAQ,KAAK,CACT,GAAI,WACJ,MAAO1Q,EAAWH,EAAU,QAAQ,EACpC,WAAY,GACZ,SAAU,GACV,KAAM,OACN,iBAAkB,OAClB,MAAO,OACP,SAAU,OACV,cAAe,OACf,SAAU,OACV,OAAQ,OACR,4BAA6B,OAC7B,SAAU,OACV,cAAe,OACf,MAAO,OACP,WAAY,MACxB,CAAS,EACD,KAAK,SAAW,IAAI4Q,GAA+B,CAC/C,YAAazQ,EAAWH,EAAU,QAAQ,EAC1C,QAAA6Q,EACA,aAAc,OACd,eAAgB,OAChB,gBAAiB,MAC7B,CAAS,EACD,KAAK,SAAS,iBAAiB,iBAAiE,KAAK,YAAa,IAAI,EACtH,KAAK,SAAS,iBAAiB,eAA6D,KAAK,aAAa,KAAK,KAAM,EAAI,CAAC,EAC9H,KAAK,SAAS,iBAAiB,iBAAiE,KAAK,aAAa,KAAK,KAAM,EAAK,CAAC,EACnI,KAAK,SAAS,0BAA0B,KAAK,oBAAoB,KAAK,IAAI,CAAC,EAC3E,KAAK,mBAAqB,IAAIyF,GAA2B,KAAK,WAAW,KAAK,IAAI,EAAGnW,EAAWH,EAAU,eAAe,EAAG,OAAW,4BAA4B,EACnK,KAAK,YAAc,IAAIuW,GAAyBpW,EAAWH,EAAU,qBAAqB,EAAG,MAAO,OAAW,sCAAsC,EACrJ,KAAK,YAAY,WAAW,EAAK,EACjC,KAAK,YAAY,iBAAiB,QAAqD,KAAK,aAAc,IAAI,EAC9G,KAAK,cAAgB,IAAIuW,GAAyBpW,EAAWH,EAAU,uBAAuB,EAAG,QAAS,OAAW,wCAAwC,EAC7J,KAAK,cAAc,WAAW,EAAK,EACnC,KAAK,cAAc,iBAAiB,QAAqD,KAAK,eAAgB,IAAI,EAClH,KAAK,YAAc,IAAIuW,GAAyBpW,EAAWH,EAAU,mBAAmB,EAAG,UAAW,OAAW,oCAAoC,EACrJ,KAAK,YAAY,WAAW,EAAK,EACjC,KAAK,YAAY,iBAAiB,QAAqD,KAAK,aAAc,IAAI,EAC9G,KAAK,kBAAoB,IAAIwW,GAA+BC,EAAa,CAC5E,CACD,OAAO,kBAAkBC,EAAW,CAChC,MAAMC,EAAQ,SAAS,cAAc,OAAO,EAC5C,UAAWC,KAASF,EAAW,CAC3B,MAAMG,EAAMF,EAAM,YAAY,IAAI,EAClCE,EAAI,YAAY,IAAI,EAAE,YAAcD,EAAM,MAC1CC,EAAI,YAAY,IAAI,EAAE,YAAcD,EAAM,KAC7C,CACD,OAAOD,CACV,CACD,WAAWrP,EAAS,CAChB,KAAK,gBAAkBA,EACvB,KAAK,4BAA8B,KACnC,KAAK,2BAA6B,KAClC,KAAK,WAAU,EACf,KAAK,QAAO,CACf,CACD,SAAU,CACN,OAAO,KAAK,eACf,CACD,WAAWwP,EAAe,CACtB,KAAK,cAAgBA,EACrB,KAAK,SAAWtM,GAAyB,SAAU,EAAC,cAAc,eAAgB,SAClF,MAAMuM,EAAY,CAAC,QAA+B,QAA+B,MAAM,EACjFC,EAAc,IAAI,IAAI,CACxB,CAAC,QAA+B7W,EAAWH,EAAU,KAAK,CAAC,EAC3D,CAAC,QAA+BG,EAAWH,EAAU,aAAa,CAAC,EACnE,CAAC,OAA6BG,EAAWH,EAAU,WAAW,CAAC,CAC3E,CAAS,EACKiX,EAAU,IAAI,IAAIF,EAAU,IAAInL,GAAQ,CAACA,EAAM,KAAK,mBAAmB,aAAaoL,EAAY,IAAIpL,CAAI,EAAGA,CAAI,CAAC,CAAC,CAAC,EAClHsL,EAAa,KAAK,SAAS,IAAG,GAAMH,EAAU,CAAC,EAC/CI,EAASF,EAAQ,IAAIC,CAAU,GAAKD,EAAQ,IAAIF,EAAU,CAAC,CAAC,EAClE,KAAK,mBAAmB,OAAOI,CAAM,EACrC,KAAK,WAAU,EACX,KAAK,YACL,KAAK,WAAW,QAEvB,CACD,OAAQ,CACA,KAAK,WACL,KAAK,WAAW,QAGhB,MAAM,MAAK,CAElB,CACD,aAAaC,EAAW,CACpB,KAAM,iBACT,CACD,YAAY7D,EAAUC,EAAW,CACxB,KAAK,YAGV,KAAK,WAAW,YAAYD,EAAUC,CAAS,CAClD,CACD,MAAM,cAAe,CACjB,MAAO,CAAC,KAAK,mBAAoB,KAAK,YAAa,KAAK,cAAe,KAAK,WAAW,CAC1F,CACD,gCAAiC,CAC7B,OAAK,KAAK,8BACN,KAAK,4BAA8B,IAAInO,GAA4B,KAAK,cAAe,KAAK,uBAAwB,KAAK,gBAAgB,KAAM,KAAK,aAAa,GAE9J,KAAK,2BACf,CACD,+BAAgC,CAC5B,OAAK,KAAK,6BACN,KAAK,2BAA6B,IAAI4Q,GAA2B,KAAK,cAAe,KAAK,uBAAwB,KAAK,gBAAgB,KAAM,KAAK,aAAa,GAE5J,KAAK,0BACf,CACD,oBAAoBtJ,EAAazL,EAAU,CACvC,MAAM2B,EAAO3B,EACT2B,EAAK,aACL8J,EAAY,sBAAsB9J,EAAK,WAAW,CAEzD,CACD,UAAW,CACP,KAAK,yBAA2B,EACnC,CACD,SAAU,CACN,GAAI,CAAC,KAAK,oBACN,OAEJ,MAAMwU,EAAsB,KAAK,SAAS,aAAe,KAAK,SAAS,aAAa,YAAc,KAClG,KAAK,SAAS,SAAU,EAAC,eAAc,EACvC,MAAMlW,EAAW,KAAK,oBAAoB,SACpCH,EAAQG,EAAS,OACvB,QAASF,EAAQ,EAAGA,EAAQD,EAAO,EAAEC,EACjC,KAAK,SAAS,SAAU,EAAC,YAAYE,EAASF,CAAK,CAAC,EAEpDoW,IAGAA,EAAoB,SAAW,GAEtC,CACD,oBAAqB,CACjB,IAAI9V,EAAQ,KAAK,SAAS,SAAQ,EAAG,SAAS,CAAC,EAC/C,KAAOA,GACHA,EAAM,QAAO,EACbA,EAAQA,EAAM,iBAAiB,GAAO,KAAM,EAAI,CAEvD,CACD,gBAAiB,CACb,OAAO,KAAK,sBACf,CACD,6BAA8B,CAC1B,MAAO,EACV,CACD,qBAAsB,CAClB,MAAO,EACV,CACD,kBAAmB,CACX,KAAK,mBACL,KAAK,kBAAkB,kBAE9B,CACD,cAAckC,EAAca,EAAYC,EAAe,CAC/C,KAAK,mBACL,KAAK,kBAAkB,cAAcd,EAAca,EAAYC,CAAa,CAEnF,CACD,wBAAyB,CACjB,KAAK,mBACL,KAAK,kBAAkB,wBAE9B,CACD,4BAA6B,CACrB,KAAK,mBACL,KAAK,kBAAkB,4BAE9B,CACD,WAAY,CACR,OAAO,KAAK,iBACf,CACD,8BAA+B,CAC3B,KAAM,iBACT,CACD,yBAA0B,CAClB,KAAK,aAGT,KAAK,aAAe,KAAK,+BACzB,KAAK,WAAa,IAAI0O,GAAkB,KAAK,uBAAwB,KAAK,YAAY,EACtF,KAAK,WAAW,iBAAiB,eAA6D1K,GAAS,CAC9F,KAAK,eAAeA,CAAK,CAC1C,CAAS,EACJ,CACD,MAAM,eAAeA,EAAO,CACxB,GAAI,CAAC,KAAK,aACN,OAEJ,MAAMkK,EAAalK,EAAM,KACnB1F,EAAO,KAAK,aAAa,WAAW4P,CAAU,EAC9C6E,EAAgB,KAAK,cAAc,cACzC,GAAI,CAACzU,GAAQ,CAACA,EAAK,UAAY,CAACyU,EAC5B,OAEJ,MAAMC,EAASD,EAAc,YAAYzU,EAAK,QAAQ,EACtD,GAAI,CAAC0U,EACD,OAEJ,MAAMC,EAAWF,EAAc,kBAAkBC,EAAQ1U,EAAK,WAAYA,EAAK,YAAY,EACrF4U,EAAa,MAAMC,GAA2D,SAAQ,EAAG,wBAAwBF,CAAQ,EAC1HG,GAAuBF,CAAU,CACzC,CACD,YAAa,CACT,GAAI,CAAC,KAAK,gBACN,OAOJ,OALA,KAAK,uBAAuB,cACxB,KAAK,aACL,KAAK,YAAY,SAErB,KAAK,SAAS,IAAI,KAAK,mBAAmB,eAAc,EAAG,KAAK,EACxD,KAAK,SAAS,IAAK,EAAA,CACvB,IAAK,QACD,KAAK,wBAAuB,EAC5B,KAAK,YAAc,KAAK,WACxB,KAAK,kBAAoB,KAAK,WAC9B,MACJ,IAAK,OACD,KAAK,oBAAsB,KAAK,gCAChC,KAAK,YAAW,EAChB,KAAK,YAAc,KAAK,SAAS,SAAQ,EACzC,KAAK,kBAAoB,KAAK,oBAC9B,MACJ,IAAK,QACD,KAAK,oBAAsB,KAAK,iCAChC,KAAK,YAAW,EAChB,KAAK,YAAc,KAAK,SAAS,SAAQ,EACzC,KAAK,kBAAoB,KAAK,oBAC9B,KACP,CACD,MAAMG,EAAU,KAAK,SAAS,IAAG,IAAO,QACxC,KAAK,YAAY,WAAW,CAACA,CAAO,EACpC,KAAK,cAAc,WAAW,CAACA,CAAO,EACtC,KAAK,YAAY,WAAW,CAACA,CAAO,EAChC,KAAK,aACL,KAAK,YAAY,KAAK,KAAK,uBAAuB,OAAO,CAEhE,CACD,aAAa3H,EAAU,CACnB,KAAK,YAAY,WAAWA,CAAQ,EACpC,KAAK,cAAc,WAAWA,CAAQ,CACzC,CACD,cAAe,CACN,KAAK,SAAS,eAGnB,KAAK,YAAY,WAAW,EAAI,EAChC,KAAK,YAAY,QAAQ,QACrB,KAAK,qBACL,KAAK,oBAAoB,MAAM,KAAK,SAAS,YAAY,EAE7D,KAAK,QAAO,EACZ,KAAK,mBAAkB,EACvB4H,GAAiB,YAAYC,GAAwB,qBAAqB,EAC7E,CACD,gBAAiB,CACb,MAAMC,EAAe,KAAK,SAAS,aAC9BA,IAGL,KAAK,YAAY,WAAW,EAAI,EAChC,KAAK,YAAY,QAAQ,QACzBA,EAAa,SAAQ,EACjB,KAAK,qBACL,KAAK,oBAAoB,QAAQA,CAAY,EAEjD,KAAK,QAAO,EACZ,KAAK,mBAAkB,EACvBF,GAAiB,YAAYC,GAAwB,sBAAsB,EAC9E,CACD,cAAe,CACX,KAAK,mBAAmB,cAAe,EAAC,MAAK,EAC7C,KAAK,YAAY,WAAW,EAAK,EAC7B,KAAK,qBACL,KAAK,oBAAoB,UAE7B,KAAK,kBAAkB,QACvB,KAAK,QAAO,EACZ,KAAK,mBAAkB,CAC1B,CACD,aAAc,CACV,GAAI,CAAC,KAAK,oBACN,OAEJ,MAAME,EAAgB,KAAK,SAAS,qBAAoB,EAClDC,EAAe,KAAK,SAAS,aAAY,EACzCC,EAAeD,IAAiB,WAAa,eAAiBA,GAAgB,GACpF,KAAK,oBAAoB,KAAKnV,GAAoB,mBAAmBoV,EAAcF,CAAa,EAAG,EAAK,EACxG,KAAK,QAAO,CACf,CACL,CACO,MAAMvB,GAAgB,GACtB,MAAM0B,WAA8B3R,EAAc,CACrD,cACA,SACA,iBACA,QACA,wBACA4R,GACAC,GAA0B,IAAM,CAAA,EAChC,YAAYf,EAAe1L,EAAMjF,EAAO,CACpC,MAAMiF,EAAMjF,GAASxG,EAAWH,EAAU,SAAU,CAAE,IAAK4L,EAAK,eAAgB,CAAA,CAAE,CAAC,EACnF,KAAK,cAAgB0L,EACrB,KAAKc,GAA0B,IAAI,QAAQ3Y,GAAW,CAClD,KAAK4Y,GAA0B5Y,CAC3C,CAAS,CACJ,CACD,mBAAmB6Y,EAAS,CACpB,KAAK,kBAEL,KAAK,aAAanY,EAAWH,EAAU,SAAU,CAAE,IAAK4I,EAAuC,KAAK,iBAAiB,MAAM,CAAC,CAAE,CAAC,CAEtI,CACD,QAAQpJ,EAAQ,CACZ,MAAMG,EAAQH,EAAO,QACjBG,GACA,KAAK,aAAaQ,EAAWH,EAAU,gBAAiB,CAAE,IAAKR,EAAO,SAAU,EAAE,IAAKG,EAAM,OAAO,CAAE,CAAC,CAE9G,CACD,MAAM,MAAM4Y,EAAM,CACd,KAAK,kBAAoBA,CAC5B,CACD,MAAM,OAAQ,CACb,CACD,SAAU,CACN,KAAK,eAAc,CACtB,CACD,yBAAyBjI,EAAO,CAC5B,OAAO,IAAIvE,GAA0BuE,EAAO,KAAM,2BAA2B,CAChF,CACD,eAAgB,CACZ,MAAO,CAAC,KAAK,UAChB,CACD,MAAM,YAAa,CACf,MAAM,KAAK8H,GACX,MAAMI,EAAmB,IAAIC,GAC7B,GAAI,CAAC,KAAK,SAAU,CAChB,MAAMC,EAAMC,GAAwC,IAAI,IAAM,EACxDlR,EAAgB,KAAK,YAAa,EAAC,cAAa,EACtD,KAAK,SAAW,GAAG,KAAK,YAAa,EAAC,SAAU,CAAA,IAAIiR,CAAG,GAAGjR,CAAa,EAC1E,CAED,GAAI,CADa,MAAM+Q,EAAiB,KAAK,KAAK,QAAQ,GACzC,CAAC,KAAK,SACnB,OAEJ,MAAMI,EAAO,MAAM,KAAK,SAAS,KAAI,EACjCA,GACA,MAAMJ,EAAiB,MAAMI,CAAI,EAEhCJ,EAAiB,OACzB,CACD,MAAM,aAAahR,EAAM,CACrB,KAAK,aAAarH,EAAWH,EAAU,OAAO,EAAG,EAAI,EACrD,MAAM6Y,EAAa,IAAIC,GAAqCtR,EAAM,IAAU,KAAK,mBAAmB,KAAK,IAAI,CAAC,EAG9G,GAFA,KAAK,iBAAmB,GAEpB,CADY,MAAMqR,EAAW,KAAK,IAAI,EAEtC,YAAK,QAAQA,CAAU,EAChB,IAAI,MAAM1Y,EAAWH,EAAU,gBAAgB,CAAC,EAE3D,KAAK,aAAaG,EAAWH,EAAU,OAAO,EAAG,EAAI,EACrD,IAAIL,EAAQ,KACZ,GAAI,CACA,KAAK,QAAU,KAAK,MAAM,KAAK,gBAAgB,EAC/C,KAAK,WAAW,KAAK,OAAO,EAC5B,KAAK,aAAaQ,EAAWH,EAAU,MAAM,EAAG,EAAK,CACxD,OACM+Y,EAAG,CACNpZ,EAAQoZ,EACR,KAAK,YAAW,EAAG,cAAc,IAAI,CACxC,CACD,YAAK,iBAAmB,KACpB,KAAK,YAAW,EAAG,qBAAoB,IAAO,MAC9C,KAAK,YAAW,EAAG,wBAAwB,IAAI,EAE5CpZ,CACV,CACD,mBAAmB2H,EAAS,CACxB,KAAK,WAAWA,CAAO,EACvB,KAAK,wBAA0BA,EAC/B,KAAK,SAAW,IAAI0R,GACpB,KAAK,SAAS,MAAM,CAAC,KAAK,UAAU1R,CAAO,CAAC,CAAC,EAC7C,KAAK+Q,GAAuB,CAC/B,CACL,8JC9hBMrY,EAAY,CAId,sBAAuB,2BAIvB,sBAAuB,oBAIvB,4BAA6B,uEAK7B,uBAAwB,yBAC5B,EACMC,GAAOC,EAA4B,8CAA+CF,CAAS,EAC3FG,GAAaC,EAA6B,KAAK,OAAWH,EAAI,EAC7D,MAAMgZ,WAAoC9C,EAAmB,CAChE,iBACA,SACA,QACA,0BACA,YAAYlK,EAAqB3E,EAAS,CACtC,MAAMnH,GAAWH,EAAU,qBAAqB,CAAC,EACjD,KAAK,QAAQ,UAAU,IAAI,wBAAwB,EACnD,KAAK,QAAUsH,EACf,KAAK,0BAA4B2E,EACjC,KAAK,iBAAmB,IAAIiN,GAC5B,KAAK,SAAW,IAAIvI,GACpB,KAAK,qBAAqBrJ,EAAQ,gBAAgB,EAClD,KAAK,SAAS,SAAQ,EAAG,KAAK,KAAK,OAAO,CAC7C,CACD,YAAYA,EAAS,CACjB,OAAO,KAAK,0BAA0B,YAAYA,CAAO,CAC5D,CACD,WAAW6R,EAAUC,EAAiB,CAClC,KAAK,0BAA0B,WAAWD,EAAUC,CAAe,CACtE,CACD,MAAM,eAAgB,CAClB,OAAO,IACV,CACD,qBAAqBC,EAAkB,CACnC,GAAI,CAACA,EACD,OAGJ,MAAMrI,EADoB,KAAK,QAAQ,kBAAiB,GACpB,OAAQ,EAAC,MAAMsI,EAAqB,EACxE,GAAKtI,EAGL,UAAWuI,KAAmBF,EAC1B,KAAK,SAAS,WAAW,YAAY,IAAIvI,GAAiCyI,EAAiBvI,CAAQ,CAAC,CAE3G,CACD,MAAM,cAAe,CACjB,MAAO,CAAC,GAAG,MAAM,MAAM,aAAY,EAAI,KAAK,gBAAgB,CAC/D,CACL,CACO,MAAMwI,WAAoCnP,EAAgCnD,EAAW,CAAE,CAC1F,YAAYwE,EAAQ+N,EAAa,CAC7B,MAAM/N,GAAUvL,GAAWH,EAAU,qBAAqB,EAAGyZ,GAAetZ,GAAWH,EAAU,qBAAqB,CAAC,CAC1H,CACD,sBAAuB,CACnB,OAAO,MAAM,sBAChB,CACD,IAAI,eAAgB,CAChB,OAAOG,GAAWH,EAAU,qBAAqB,CACpD,CACD,eAAgB,CACZ,OAAK,KAAK,sBACH,EACV,CACD,MAAM,qBAAsB,CACxB,GAAI,KAAK,uBACL,OAEJ,MAAM0Z,EAAoBhQ,EAAmB,SAAU,EAAC,OAAOC,CAAuC,EAChGI,EAAS2P,GAAmB,SAC5B1I,EAAWjH,GAAQ,MAAMuP,EAAqB,EACpD,GAAI,CAACI,GAAqB,CAAC3P,GAAU,CAACiH,EAClC,OAEJ,MAAM4H,EAAO,MAAM5H,EAAS,sBACtB1J,EAAU,IAAIqS,GAA8BD,EAAmB,KAAMd,CAAI,EAC/E,KAAK,WAAWtR,CAAO,EACvB,KAAK,yBAAyB,mBAA6DA,CAAO,CACrG,CACD,IAAI,eAAgB,CAChB,OAAOnH,GAAWH,EAAU,qBAAqB,CACpD,CACD,IAAI,aAAc,CACd,OAAOG,GAAWH,EAAU,2BAA2B,CAC1D,CAED,OAAO,OAAS,kBACpB,CACO,MAAM2Z,WAAsCxB,EAAsB,CACrE,0BACA,iBACA,YAAYuB,EAAmB9N,EAAMyN,EAAkB1S,EAAO,CAC1D,MAAM+S,GAAqBA,EAAkB,cAAa,EAAI9N,EAAMjF,GAASxG,GAAWH,EAAU,uBAAwB,CAAE,IAAK4L,EAAK,eAAc,CAAI,CAAA,CAAC,EACzJ,KAAK,iBAAmByN,EACxB,KAAK,0BAA4BK,CACpC,CACD,WAAWzN,EAAqB,CAC5B,OAAO,IAAIgN,GAA4BhN,EAAqB,IAAI,CACnE,CACD,mBAAoB,CAChB,OAAO,KAAK,yBACf,CACD,aAAc,CACV,OAAO,MAAM,aAChB,CACL,CCtHO,MAAM2N,WAA6BvP,EAAgCzC,CAAc,CAAE,CACtF,mBACA,kBACA,aACA,eACA,WACA,YACA,OACA,OACA,eACA,QACA,qBACA,kBACA,cACA,YACA,aAAc,CACV,QACA,KAAK,QAAQ,GAAK,sBAClB,KAAK,QAAQ,UAAU,IAAI,wBAAwB,EACnD,KAAK,QAAQ,aAAa,QAAS,GAAGiS,GAAsB,wBAAwB,CAAC,EAAE,EACvF,KAAK,mBAAqB,IAAI5F,GAC9B,KAAK,kBAAoB,KAAK,QAAQ,YAAY,MAAO,yBAAyB,EAClF,KAAK,aAAe,IAAIC,GAAiC,iBAAkB,KAAK,kBAAkB,EAClG,KAAK,aAAa,QAAQ,UAAU,IAAI,MAAM,EAC9C,KAAK,eACD,KAAK,kBAAkB,YAAY,SAAU,gCAAgC,EACjF,KAAK,kBAAkB,YAAY,KAAK,aAAa,OAAO,EAC5D,KAAK,aAAa,iBAAiB,gBAAiE,KAAK,gBAAiB,IAAI,EAC9H,KAAK,WAAa,EAClB,KAAK,YAAc,EACnB,KAAK,aAAa,UAAU,KAAK,WAAY,KAAK,WAAW,EAC7D,KAAK,OAAS,IAAI4F,GAClB,KAAK,OAAS,IAAIA,GAClB,KAAK,eAAiB,IAAIC,EAC7B,CACD,OAAQ,CACJ,KAAK,QAAU,GACf,MAAMC,EAAY,IAAM,CACpB,KAAK,OAAM,EACP,KAAK,SACL,KAAK,QAAQ,OAAQ,EAAC,sBAAsBA,CAAS,CAErE,EACQA,GACH,CACD,MAAO,CACH,KAAK,QAAU,EAClB,CACD,WAAWC,EAAS,CAChB,KAAK,eAAiBA,EACjB,KAAK,SACN,KAAK,OAAM,CAElB,CACD,mBAAmB9E,EAAOU,EAAQ,CAC9B,GAAI,CAAC,KAAK,eACN,OAEJ,MAAMqE,EAAiB,KAAK,eACtBC,EAAQD,EAAe,MACvBE,EAAWF,EAAe,IAC1BG,EAAaH,EAAe,WAC5BzF,EAAY4F,EAAW,CAAC,EACxB3E,EAAc,KAAK,OAAO,UAAUP,EAAQ+E,EAAe,SAAS,EAC1E,IAAII,EAAU,EACd,SAASC,EAAiBJ,EAAOK,EAAU,CACvC,IAAInJ,EAAO,EACPoJ,GAAW,EACf,QAAS9V,GAAI,EAAGA,GAAI0V,EAAW,OAAQ,EAAE1V,GAAG,CACxC,MAAMuQ,GAAI,KAAK,OAAOmF,EAAW1V,EAAC,EAAI8P,GAAaiB,CAAW,EAC1DR,KAAMuF,KACFpJ,GACAmJ,EAASC,GAAUpJ,CAAI,EAE3BA,EAAO,EACPoJ,GAAWvF,IAEf7D,GAAQ8I,EAAMxV,EAAC,CAClB,CACD6V,EAASC,GAAUpJ,CAAI,CAC1B,CACD,SAASqJ,EAAgBxF,EAAG7D,EAAM,CAC9BiJ,EAAU,KAAK,IAAIA,EAASjJ,CAAI,CACnC,CACDkJ,EAAiBJ,EAAOO,CAAe,EACvC,MAAMzF,EAAe,KAAK,OAAO,UAAUqF,EAAUzE,GAAUyE,EAAU,KAAO,CAAG,EACnF,KAAK,eAAe,MAAQnF,EAAQ,OAAO,iBAC3C,KAAK,eAAe,OAASU,EAAS,OAAO,iBAC7C,KAAK,eAAe,MAAM,MAAQV,EAAQ,KAC1C,KAAK,eAAe,MAAM,OAASU,EAAS,KAC5C,MAAM8E,EAAe,KAAK,eAAe,WAAW,IAAI,EACxD,GAAI,CAACA,EACD,MAAM,IAAI,MAAM,8BAA8B,EAElD,MAAMlK,EAAUkK,EAEhB,GADAlK,EAAQ,MAAM,OAAO,iBAAkB,OAAO,gBAAgB,EAC1D,KAAK,QAAS,CACdA,EAAQ,UAAS,EACjBA,EAAQ,UAAY,EACpBA,EAAQ,YAAc,2BACtB,MAAMgK,GAAY,KAAK,IAAG,EAAKhG,GAAaiB,EAC5CjF,EAAQ,OAAOgK,EAAU5E,EAAS,CAAC,EACnCpF,EAAQ,OAAOgK,EAAU,CAAC,EAC1BhK,EAAQ,OAAM,EACdA,EAAQ,UAAS,CACpB,CACD,IAAImK,EAAQ,EACRC,EACJ,MAAMC,EAAkB,GACxB,GAAI7F,EAAc,CACd,MAAM8F,GAAgBlF,EAASiF,GAAmB7F,EAIlD4F,EAAY,KAAK,IAAI,KAAM,KAAK,MAAM,KAAK,IAAIE,CAAY,EAAI,KAAK,IAAI,IAAI,CAAC,CAAC,EAC9EF,GAAa,KAAK,IAAI,GAAI,KAAK,MAAM,KAAK,IAAIE,EAAeF,CAAS,EAAI,KAAK,IAAI,CAAC,EAChFA,EAAY,GAAKE,IACjBF,GAAa,GAEjBD,EAAQ,KAAK,MAAM/E,EAASgF,EAAY5F,EAAe,EAAG,EAAI,GAC9DxE,EAAQ,UAAS,EACjBA,EAAQ,UAAY,EACpBA,EAAQ,YAAc,qBACtBA,EAAQ,OAAO,EAAGmK,CAAK,EACvBnK,EAAQ,OAAO0E,EAAOyF,CAAK,EAC3BnK,EAAQ,OAAM,EACdA,EAAQ,UAAS,CACpB,CACD,SAASuK,EAAgB9F,EAAG7D,EAAM,CAC9BZ,EAAQ,OAAOyE,EAAGW,EAAS,CAAC,EAC5BpF,EAAQ,OAAOyE,EAAG,KAAK,MAAMW,EAASxE,EAAO4D,EAAe,CAAC,CAAC,CACjE,CAaD,GAZAxE,EAAQ,UAAS,EACjBA,EAAQ,UAAY,EACpBA,EAAQ,YAAc,2BACtB8J,EAAiBH,EAAUY,CAAe,EAC1CvK,EAAQ,OAAM,EACdA,EAAQ,UAAS,EACjBA,EAAQ,UAAS,EACjBA,EAAQ,UAAY,EACpBA,EAAQ,YAAc,uBACtB8J,EAAiBJ,EAAOa,CAAe,EACvCvK,EAAQ,OAAM,EACdA,EAAQ,UAAS,EACboK,EAAW,CACX,MAAMI,EAAQrS,EAAuCiS,CAAS,EACxDK,EAAe,EACfC,EAAS,EACTC,GAASR,EAAQ,GACjBS,GAAa,EAAIH,EAAezK,EAAQ,YAAYwK,CAAK,EAAE,MACjExK,EAAQ,UAAS,EACjBA,EAAQ,aAAe,SACvBA,EAAQ,KAAO,QAAU,OAAO,iBAAiB,KAAK,QAAS,IAAI,EAAE,iBAAiB,aAAa,EACnGA,EAAQ,UAAY,4BACpBA,EAAQ,SAAS0K,EAAQC,GAASN,EAAiBO,GAAYP,CAAe,EAC9ErK,EAAQ,UAAY,kBACpBA,EAAQ,SAASwK,EAAOE,EAASD,EAAcE,EAAM,EACrD3K,EAAQ,KAAI,EACZA,EAAQ,UAAS,CACpB,CACJ,CACD,UAAW,CACP,KAAK,qBAAuB,GAC5B,KAAK,eAAc,CACtB,CACD,iBAAkB,CACT,KAAK,oBACN,KAAK,kBAAoB,OAAO,WAAW,KAAK,WAAW,KAAK,IAAI,EAAG,EAAE,EAEhF,CACD,gBAAiB,CACT,KAAK,gBAGT,KAAK,cAAgB,OAAO,WAAW,KAAK,OAAO,KAAK,IAAI,EAAG,EAAE,EACpE,CACD,kBAAmB,CACf,KAAK,WAAa,KAAK,aAAa,WAAU,EAC9C,KAAK,YAAc,KAAK,aAAa,YAAW,EAChD,KAAK,YAAc,KAAK,YAAc,KAAK,UAC9C,CACD,QAAS,CACL,KAAK,cAAgB,KAChB,KAAK,cAGV,KAAK,iBAAgB,EACrB,KAAK,mBAAmB,iBAAiB,IAAI,EAC7C,KAAK,aAAa,eAAe,KAAK,kBAAkB,EACxD,KAAK,mBAAmB,KAAK,kBAAkB,YAAa,KAAK,kBAAkB,aAAe,EAAE,EACvG,CACD,YAAa,CACT,KAAK,kBAAoB,EACzB,KAAK,iBAAgB,EACrB,MAAM6K,EAAM,KAAK,eAAe,IAChC,GAAI,CAACA,EAAI,OACL,OAEJ,MAAMjB,EAAa,KAAK,eAAe,WACjCF,EAAQ,KAAK,eAAe,MAC5B1F,EAAY4F,EAAW,CAAC,EACxBtG,EAAY,KAAK,eAAe,UAChCR,EAAWkB,EAAYV,EAAY,KAAK,WACxCP,EAAYiB,EAAYV,EAAY,KAAK,YACzCwH,EAAWC,GAAmCnB,EAAY9G,EAAUkI,EAA0C,EAC9GC,EAAWC,GAAmCtB,EAAY7G,EAAWiI,EAA0C,EACrH,IAAIpK,EAAO,EACX,QAAS1M,EAAI4W,EAAU5W,EAAI+W,EAAU,EAAE/W,EACnC0M,GAAQ8I,EAAMxV,CAAC,EAEnB,MAAMiX,EAAQL,EAAW,EAAID,EAAIC,EAAW,CAAC,EAAI,EAC3CM,EAAQH,EAAWJ,EAAI,OAASA,EAAII,CAAQ,EAAI,IACtD,KAAK,yBAAyB,kBAAkD,CAAE,MAAAE,EAAO,MAAAC,EAAO,KAAAxK,CAAI,CAAE,CACzG,CACL,CACO,MAAMyI,EAAY,CACrB,WACA,aACA,aAAc,CACV,KAAK,WAAa,EAClB,KAAK,aAAe,CACvB,CACD,UAAU/P,EAAQ,CAEd,GADAA,EAASA,GAAU,KAAK,aACpB,KAAK,aAAc,CACnB,MAAM2O,EAAM,KAAK,MACXoD,EAAcpD,EAAM,KAAK,WAC/B,KAAK,WAAaA,EAElB,MAAMqD,EAAoB,KAAK,IADP,GAC4BD,EAAc,GAAI,EAChEE,EAAcjS,EAAS,KAAK,aAClC,KAAK,cAAgBkS,GAA+BD,EAAa,EAAID,EAAmBA,CAAiB,CAC5G,MAEG,KAAK,aAAehS,EAExB,OAAO,KAAK,YACf,CACL,CACO,MAAMgQ,EAAQ,CACjB,MACA,IACA,WACA,IACA,UACA,aAAc,CACV,KAAK,MAAQ,GACb,KAAK,IAAM,GACX,KAAK,WAAa,GAClB,KAAK,IAAM,GACX,KAAK,UAAY,GACpB,CACL,CACO,MAAM9F,EAAmB,CAC5B,kBACA,kBACA,aACA,aAAc,CACV,KAAK,kBAAoB,EACzB,KAAK,kBAAoB,EACzB,KAAK,aAAe,CACvB,CACD,iBAAiBiI,EAAO,CACpB,KAAK,kBAAoB,EACzB,KAAK,kBAAoBA,EAAM,eAAe,UAC9C,KAAK,aAAeA,EAAM,kBAAkB,YAAc,KAAK,iBAClE,CACD,gBAAgBlI,EAAM,CAClB,OAAQA,EAAO,KAAK,mBAAqB,KAAK,YACjD,CACD,YAAY7R,EAAOmQ,EAAW,CAC1B,OAAO6J,GAAmCha,EAAQ,IAAM,EAAQmQ,CAAU,CAC7E,CACD,iBAAkB,CACd,OAAO,KAAK,iBACf,CACD,iBAAkB,CACd,OAAO,KAAK,iBACf,CACD,UAAW,CACP,OAAO,KAAK,iBACf,CACD,cAAe,CACX,OAAO,KAAK,kBAAoB,KAAK,iBACxC,CACL,6KCtRMtS,EAAY,CAKd,cAAe,uBAIf,cAAe,oBAIf,eAAgB,qBAIhB,kBAAmB,sBAInB,mBAAoB,uBAIpB,UAAW,aAIX,wBAAyB,6BAIzB,SAAU,YAIV,mBAAoB,sBAIpB,iBAAkB,oBAIlB,wBAAyB,qIAKzB,SAAU,gBAKV,OAAQ,cAKR,cAAe,UAKf,IAAK,WAIL,KAAM,OAIN,SAAU,YAIV,UAAW,aAIX,IAAK,KACT,EACMC,GAAOC,EAA4B,qCAAsCF,CAAS,EAClFG,EAAaC,EAA6B,KAAK,OAAWH,EAAI,EACpE,SAASmc,GAA6BC,EAAe,CACjD,OAAQA,EAAc,SAAWA,EAAc,gBAAe,CAClE,CACO,MAAMC,WAAwBpG,EAAY,CAC7C,cACA,YACA,cACA,iBACA,WACA,MACA,IACA,SACA,UACA,YACA,iBACA,YAAYmG,EAAe,CACvB,QACA,KAAK,cAAgBA,EACrB,KAAK,YAAcA,EAAc,cACjC,KAAK,WAAW,IAAIE,GAAc,IAAI,CAAC,EACvC,MAAMjV,EAAU,IAAIkV,GAAyBJ,GAA6BC,CAAa,CAAC,EACxF,KAAK,cAAgB/U,EAAQ,MAC7B,KAAK,WAAWA,CAAO,EACvB,KAAK,iBAAmB,IAAI4R,GAC5B,KAAK,WAAa,GAClB,KAAK,MAAQ,GACb,KAAK,IAAM,GACX,KAAK,SAAW,GAChB,KAAK,UAAY,EACjB,KAAK,YAAc,EACnB,KAAK,iBAAmB,IAAIU,GACxB6C,GAAyB,UAAU,iCAAiC,IACpE,KAAK,iBAAiB,iBAAiB,kBAAkD,KAAK,kBAAkB,KAAK,IAAI,CAAC,EAC1H,KAAK,iBAAiB,KAAK,KAAK,QAAS,KAAK,QAAQ,UAAU,EAChE,KAAK,iBAAiB,QACtB,KAAK,YAAY,iBAAiB,cAAiE,KAAK,cAAe,IAAI,EACtH,KAAK,YAAY,KAAK,kBAAwD,EAAC,KAAK,IAAM,CAC3F,KAAK,YAAY,oBAAoB,cAAiE,KAAK,cAAe,IAAI,EAC9H,KAAK,iBAAiB,OACtB,KAAK,iBAAiB,YACtC,CAAa,EAER,CACD,MAAM,cAAe,CACjB,MAAO,CAAC,GAAG,MAAM,MAAM,aAAY,EAAI,KAAK,gBAAgB,CAC/D,CACD,kBAAkBlU,EAAO,CACrB,KAAM,CAAE,MAAAqT,EAAO,MAAAC,GAAUtT,EAAM,KAC/B,KAAK,iBAAiB,QAAQpI,EAAWH,EAAU,cAAe,CAAE,IAAK4I,EAAuCL,EAAM,KAAK,IAAI,CAAC,CAAE,CAAC,EACnI,KAAK,kBAAkBqT,EAAOC,CAAK,CACtC,CACD,kBAAkBD,EAAOC,EAAO,CAC5B,MAAMa,EAAcN,GAA6B,KAAK,aAAa,EAC7D9U,EAAU,IAAIkV,GAAyBE,EAAad,EAAOC,CAAK,EACtE,KAAK,cAAgBvU,EAAQ,MAC7B,KAAK,WAAWA,CAAO,CAC1B,CACD,cAAciB,EAAO,CACjB,MAAMjB,EAAUiB,EAAM,KACjB,KAAK,YACN,KAAK,WAAa,GAClB,KAAK,MAAQ,GACb,KAAK,IAAM,GACX,KAAK,SAAW,GAChB,KAAK,UAAY,IACjB,KAAK,YAAc,GAEvB,KAAK,MAAM,KAAK,CAAC,EACjB,KAAK,MAAM,KAAK,CAAC,EACjB,KAAK,WAAW,KAAK,KAAK,IAAK,CAAA,EAC/B,KAAK,SAAS,KAAK,KAAK,YAAc,CAAC,EACvC,UAAWoU,KAAUrV,GAAS,SAAW,CAAA,EAAI,CACzC,KAAK,YAAc,KAAK,IAAI,KAAK,YAAaqV,EAAO,OAAO,EAC5D,MAAMC,EAASjB,GAAmC,KAAK,SAAUgB,EAAO,QAASlB,EAA0C,EACvH,EACJ,KAAK,MAAMmB,CAAM,GAAKD,EAAO,IAChC,CACD,KAAK,IAAI,KAAK,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,CAAC,EACzB,KAAK,WAAW,KAAK,WAAW,OAAS,CAAC,EAC5C,KAAK,WAAW,CAAC,EAAI,KAAK,YAC1C,KAAK,WAAa,GAEtB,MAAM1C,EAAU,CACZ,MAAO,KAAK,MACZ,IAAK,KAAK,IACV,IAAK,KAAK,SACV,WAAY,KAAK,WACjB,UAAW,KAAK,SAC5B,EACQ,KAAK,iBAAiB,WAAWA,CAAO,CAC3C,CACD,aAAarY,EAAU,CACnB,OAAQA,EAAQ,CACZ,IAAK,OACD,OAAOzB,EAAWH,EAAU,aAAa,EAC7C,IAAK,QACD,OAAOG,EAAWH,EAAU,cAAc,CACjD,CACD,OAAO6c,EACV,CACD,8BAA+B,CAC3B,OAAO,IAAIC,GAA2B,KAAK,QAAO,EAAI,KAAK,cAAc,kBAAiB,CAAE,CAC/F,CACL,CACO,MAAMC,WAAoC1S,EAAgCnD,EAAW,CAAE,CAC1F,UACA,uBACA,YAAYwE,EAAQ+N,EAAa,CAC7B,MAAM/N,EAAQ+N,CAAW,EACzB,KAAK,UAAY,GACjB,KAAK,uBAAyB,EACjC,CACD,sBAAuB,CACnB,OAAO,MAAM,sBAChB,CACD,UAAW,CACP,MAAO,MACV,CACD,eAAgB,CACZ,MAAO,cACV,CACD,IAAI,eAAgB,CAChB,OAAO,KAAK,UAAYtZ,EAAWH,EAAU,iBAAiB,EAAIG,EAAWH,EAAU,kBAAkB,CAC5G,CACD,eAAgB,CACZ,OAAI,KAAK,UACA,KAAK,uBAGV,KAAK,sBAAqB,EAEvB,KAAK,SACf,CACD,uBAAwB,CACpB,MAAM0Z,EAAoBhQ,EAAmB,SAAU,EAAC,OAAOC,CAAuC,EACtG,GAAI,KAAK,wBAA0B,CAAC+P,EAChC,OAEJ,MAAM2C,EAAgB,IAAIW,GAA0BtD,EAAmB,IAAI,EAC3E,KAAK,wBAAwB2C,CAAa,EAC1C,KAAK,WAAWA,CAAa,EAC7BA,EAAc,aAAalc,EAAWH,EAAU,SAAS,CAAC,EAC1D,MAAMid,EAAW,CAAC9c,EAAWH,EAAU,uBAAuB,CAAC,EAC/Dkd,GAA+B,SAAU,EAAC,iBAAiB,gBAAiBD,CAAQ,EACpF,KAAK,UAAY,GACjB,KAAK,cAAa,CACrB,CACD,MAAM,sBAAuB,CACzB,KAAK,UAAY,GACjB,MAAME,EAAkB,KAAK,uBAC7B,GAAI,CAACA,GAAmB,CAACA,EAAgB,kBAAiB,EACtD,OAEJA,EAAgB,aAAahd,EAAWH,EAAU,QAAQ,CAAC,EAC3D,MAAMsH,EAAU,MAAM,KAAK,eACvB6V,IACA,QAAQ,OAAO7V,IAAY,MAAS,EAGpC6V,EAAgB,mBAAmB7V,CAAO,EAC1C6V,EAAgB,aAAa,EAAE,EAC/B,KAAK,wBAAwB,IAAI,GAErCD,GAA+B,SAAU,EAAC,iBAAiB,gBAAiB,CAAE,CAAA,EAI9E,MAAME,EAA4B,KAAK,uBACvC,KAAK,uBAAyB,GAC1B,CAAAA,GAGJ,KAAK,yBAAyB,mBAAyDD,CAAe,CACzG,CACD,4BAA4BxW,EAAO,CAC/B,OAAO,IAAIqW,GAA0B,KAAM,KAAMrW,CAAK,CACzD,CACD,6BAA8B,CAC1B,KAAK,uBAAyB,GACzB,KAAK,sBACb,CACD,eAAgB,CACZ,KAAM,iBACT,CACD,cAAe,CACX,KAAM,iBACT,CACL,CACA,IAAI0W,GACG,MAAMC,WAAgCP,EAA4B,CACrE,YACA,iBACA,aAAc,CACV,MAAMO,GAAwB,OAAQnd,EAAWH,EAAU,kBAAkB,CAAC,EACzEqd,KACDA,GAAkC,MAEtC,KAAK,YAAc,EACnB,KAAK,iBAAmB,GAC3B,CACD,WAAW,UAAW,CAClB,OAAOA,EACV,CACD,IAAI,eAAgB,CAChB,OAAOld,EAAWH,EAAU,gBAAgB,CAC/C,CACD,IAAI,aAAc,CAGd,MAD6B,CAACG,EAAWH,EAAU,uBAAuB,CAAC,EAC/C,KAAK;AAAA,CAAI,CACxC,CACD,kBAAmB,CACf,OAAOyc,GAAyB,UAAU,iCAAiC,CAC9E,CACD,eAAgB,CACZ,MAAM/C,EAAoB,KAAK,yBAC1BA,IAGAA,EAAkB,gBACnB+C,GAAyB,UAAU,iCAAiC,IACpE,KAAK,YAAc,OAAO,WAAW,IAAM,CAClC,KAAK,aAC1B,EAAe,KAAK,gBAAgB,GAE/B,CACD,wBAAyB,CACrB,MAAMc,EAAmB,KAAK,uBAC9B,OAAIA,EAC0BA,EAAiB,oBAGxC,IACV,CACD,MAAM,cAAe,CACjB,OAAO,aAAa,KAAK,WAAW,EACpC,KAAK,YAAc,EACnB,KAAK,yBAAyB,oBAC9B,MAAM7D,EAAoB,KAAK,yBAC/B,GAAI,CAACA,EACD,MAAM,IAAI,MAAM,wBAAwB,EAE5C,MAAM8D,EAAkB,MAAM9D,EAAkB,eAChD,GAAI,CAAC8D,EACD,MAAM,IAAI,MAAM,2BAA2B,EAE/C,OAAOA,CACV,CACD,MAAM,aAAc,CAChB,MAAM9D,EAAoB,KAAK,yBAC/B,GAAI,CAACA,EACD,OAEJ,MAAMpS,EAAU,MAAMoS,EAAkB,qBACnC,KAAK,cAGV,KAAK,yBAAyB,cAAiEpS,CAAO,EACtG,KAAK,YAAc,OAAO,WAAW,IAAM,CAClC,KAAK,aACtB,EAAW,KAAK,gBAAgB,EAC3B,CAED,OAAO,OAAS,cACpB,CACO,MAAM0V,WAAkC7E,EAAsB,CACjE,0BACA,wBACA,YAAYuB,EAAmB9N,EAAMjF,EAAO,CACxC,MAAM+S,GAAqBA,EAAkB,cAAa,EAAI9N,EAAMjF,GAASxG,EAAWH,EAAU,SAAU,CAAE,IAAK4L,EAAK,eAAc,CAAI,CAAA,CAAC,EAC3I,KAAK,0BAA4B8N,EACjC,KAAK,wBAA0B,CAC3B,KAAM,CACF,UAAW,CACP,aAAc,GACd,SAAU,GACV,IAAK,GACL,WAAY,EACZ,aAAc,CACjB,EACD,SAAU,CAAE,EACZ,SAAU,EACV,GAAI,CACP,EACD,QAAS,CAAE,EACX,UAAW,EACX,QAAS,EACT,MAAO,CAAE,CACrB,CACK,CACD,YAAa,CACT,OAAO,IAAI4C,GAAgB,IAAI,CAClC,CACD,iBAAkB,CACd,OAAO,KAAK,uBACf,CACD,mBAAoB,CAChB,OAAO,KAAK,yBACf,CACD,aAAc,CACV,OAAO,MAAM,aAChB,CACL,CACO,MAAMmB,WAAgCC,EAAwC,CACjF,KACA,YAAY7a,EAAM,CACd,MAAM8a,EAAY9a,EAAK,WAAa,CAGhC,aAAcA,EAAK,aAGnB,SAAUA,EAAK,SAGf,IAAKA,EAAK,IAGV,WAAYA,EAAK,WAAgB,EAGjC,aAAcA,EAAK,aAAkB,CACjD,EACQ,MAAM8a,CAAS,EACf,KAAK,KAAO9a,EAAK,QACpB,CACL,CACO,MAAM2Z,WAAiCoB,EAA6C,CAGvF,QACA,YAAYtW,EAASuW,EAAYC,EAAY,CACzC,QAGA,KAAK,QAAUxW,EAAQ,SAAW,CAAA,EAClC,IAAIyW,EAAkB,KACtB,GAAIF,GAAcC,EAAY,CAC1BC,EAAkB,IAAI,IACtBF,EAAaA,GAAc,EAC3BC,EAAaA,GAAc,IAC3B,UAAWnB,KAAUrV,EAAQ,QAAS,CAClC,GAAIqV,EAAO,QAAUkB,GAAclB,EAAO,QAAUmB,EAChD,SAEJ,MAAMzM,EAAO0M,EAAgB,IAAIpB,EAAO,MAAM,GAAK,EACnDoB,EAAgB,IAAIpB,EAAO,OAAQtL,EAAOsL,EAAO,IAAI,CACxD,CACJ,CACD,KAAK,WAAWqB,EAAqB1W,EAAQ,IAAI,CAAC,EAClD,SAAS0W,EAAqBC,EAAM,CAChC,MAAMC,EAAa,IAAIT,GAAwBQ,CAAI,EAC7CE,EAAkB,CAACF,CAAI,EACvBG,EAAkB,CAACF,CAAU,EACnC,KAAOC,EAAgB,QAAQ,CAC3B,MAAME,EAAaF,EAAgB,MAC7BG,EAAaF,EAAgB,MACnCE,EAAW,SAAWD,EAAW,SAAS,IAAI9c,GAAS,CACnD,MAAMgd,EAAc,IAAId,GAAwBlc,CAAK,EACrD,OAAIwc,IACAQ,EAAY,KAAOR,EAAgB,IAAIxc,EAAM,EAAE,GAAK,GAEjDgd,CAC3B,CAAiB,EACDJ,EAAgB,KAAK,GAAGE,EAAW,QAAQ,EAC3CD,EAAgB,KAAK,GAAGE,EAAW,QAAQ,CAC9C,CACD,OAAAE,EAAmBN,CAAU,EACtBA,CACV,CACD,SAASM,EAAmB3b,EAAM,CAC9B,OAAAA,EAAK,SAAWA,EAAK,SAAS,OAAO2b,CAAkB,EAChD,GAAQ3b,EAAK,SAAS,QAAUA,EAAK,KAC/C,CACJ,CACL,CACO,MAAM0Z,EAAc,CACvB,YACA,YAAYkC,EAAa,CACrB,KAAK,YAAcA,CACtB,CACD,YAAYtc,EAAO,CACf,OAAOuc,EAAgDvc,CAAK,CAC/D,CACD,0BAA0BA,EAAO,CAC7B,OAAOhC,EAAWH,EAAU,OAAQ,CAAE,IAAKmC,CAAK,CAAE,CACrD,CACD,cAAcA,EAAOwc,EAAO,CACxB,OAAOxe,EAAWH,EAAU,cAAe,CAAE,IAAKmC,EAAM,QAAQ,CAAC,CAAC,CAAE,CACvE,CACD,YAAYU,EAAM,CACd,MAAM6W,EAAoB,KAAK,YAAY,cAAc,kBAAiB,EACpE3P,EAAS2P,EAAoBA,EAAkB,OAAM,EAAK,KAC1DzC,EAAU,CACZ,UAAW,oBACX,iBAAkB,CAC9B,EACQ,OAAO,KAAK,YAAY,UAAS,EAAG,6BAA6BlN,EAAQlH,EAAK,YAAY,UAAWoU,CAAO,CAC/G,CACL,CACO,MAAM6F,WAAmC7K,EAA8B,CAC1E,QACA,kBACA,YAAY3K,EAASoS,EAAmB,CACpC,QACA,KAAK,QAAUpS,EACf,KAAK,kBAAoBoS,CAC5B,CACD,iBAAkB,CACd,MAAO,EACV,CACD,WAAY,CACR,OAAO,KAAK,QAAQ,KAAK,KAC5B,CACD,oBAAoBlH,EAAa,CAC7B,MAAO,EACV,CACD,YAAYrQ,EAAOyc,EAAY,CAC3B,OAAOze,EAAWH,EAAU,IAAK,CAAE,IAAK0e,EAAgDvc,EAAQ,GAAG,CAAC,CAAE,CACzG,CACD,uBAAwB,CACpB,SAAS0c,EAAWhc,EAAM,CACtB,OAAOA,EAAK,SAAS,OAAO,CAAC7B,EAAO6B,IAAS7B,EAAQ6d,EAAWhc,CAAI,EAAG,CAAC,CAC3E,CACD,MAAM7B,EAAQ6d,EAAW,KAAK,QAAQ,IAAI,EACpCC,EAAa,IAAI,MAAM9d,CAAK,EAC5BuU,EAAc,IAAI,YAAYvU,CAAK,EACnCsU,EAAkB,IAAI,aAAatU,CAAK,EACxCqU,EAAkB,IAAI,aAAarU,CAAK,EAC9C,IAAI+d,EAAQ,EACRC,EAAW,EACXC,EAAW,EACXhe,EAAQ,EACZ,SAASie,EAAQrc,EAAM,CACnB,MAAM8S,EAAQsJ,EACdH,EAAW7d,CAAK,EAAI4B,EACpB0S,EAAYtU,CAAK,EAAI8d,EACrBzJ,EAAgBrU,CAAK,EAAI4B,EAAK,MAC9BwS,EAAgBpU,CAAK,EAAIge,EACzB,EAAEhe,EACF,EAAE8d,EACFlc,EAAK,SAAS,QAAQqc,CAAO,EAC7B,EAAEH,EACFC,EAAW,KAAK,IAAIA,EAAUD,CAAK,EACnCE,EAAWtJ,EAAQ9S,EAAK,KAC3B,CACD,OAAAqc,EAAQ,KAAK,QAAQ,IAAI,EACzB,KAAK,sBAAwBF,EAAW,EACxC,KAAK,WAAaF,EAClB,KAAK,qBACDK,GAAyC,OAAO,CAAE,YAAA5J,EAAa,gBAAAD,EAAiB,gBAAAD,EAAiB,OAAQ,IAAI,CAAE,EAC5G,KAAK,oBACf,CACD,4BAA4B5C,EAAY,CACpC,MAAM5P,EAAO,KAAK,WAAW4P,CAAU,EACvC,GAAI,CAAC5P,EACD,OAAO,KAEX,MAAM6T,EAAY,CAAA,EAClB,SAAS0I,EAAiBzY,EAAOxE,EAAO,CACpCuU,EAAU,KAAK,CAAE,MAAA/P,EAAO,MAAAxE,CAAO,CAAA,CAClC,CACDid,EAAiBjf,EAAWH,EAAU,IAAI,EAAGU,GAAgCmC,EAAK,YAAY,CAAC,EAC/Fuc,EAAiBjf,EAAWH,EAAU,QAAQ,EAAG4I,EAAuC/F,EAAK,IAAI,CAAC,EAClGuc,EAAiBjf,EAAWH,EAAU,SAAS,EAAG4I,EAAuC/F,EAAK,KAAK,CAAC,EACpG,MAAMwc,EAAY,IAAI7I,GAChB8I,EAAOD,EAAU,6BAA6B,KAAK,kBAAoB,KAAK,kBAAkB,OAAM,EAAK,KAAMxc,EAAK,SAAS,EACnI,OAAIyc,GACAF,EAAiBjf,EAAWH,EAAU,GAAG,EAAGsf,EAAK,WAAW,EAEhED,EAAU,QAAO,EACVnJ,GAAY,kBAAkBQ,CAAS,CACjD,CACL,qTCjiBa6I,GAA4B,CACrC,OAAQ,iBACR,eAAgB,gBACpB,EACaC,GAAqB,IACrBC,GAA0BD,GAAqB,EAiDrD,MAAME,EAAK,CACd,GACA,KACA,SACA,UACA,aACA,SACA,KACA,aACA,oBACA,kBACA,QACA,YAAYvY,EAAIC,EAAMuY,EAAUC,EAAWC,EAAcC,EAAUlU,EAAM,CACrE,KAAK,GAAKzE,EACV,KAAK,KAAOC,EACZ,KAAK,SAAWuY,EAChB,KAAK,UAAYC,EACjB,KAAK,aAAeC,EACpB,KAAK,SAAWC,EAChB,KAAK,KAAOlU,EACZ,KAAK,aAAe,GACpB,KAAK,oBAAsB,GAC3B,KAAK,kBAAoB,KACzB,KAAK,QAAU,EAClB,CACL,CACO,MAAMmU,EAAK,CACd,KACA,KACA,KACA,UACA,kBACA,YAAY3Y,EAAMvE,EAAM+I,EAAMoU,EAAW,CACrC,KAAK,KAAO5Y,EACZ,KAAK,KAAOvE,EACZ,KAAK,KAAO+I,EACZ,KAAK,UAAYoU,EACjB,KAAK,kBAAoB,IAC5B,CACL,CAoDO,MAAMC,CAAiB,CAC1B,WACA,WACA,WACA,WACA,YAAYC,EAAYC,EAAYC,EAAYC,EAAY,CACxD,KAAK,WAAaH,EAClB,KAAK,WAAaC,EAClB,KAAK,WAAaC,EAClB,KAAK,WAAaC,CACrB,CACL,CAcO,MAAMC,EAAW,CACpB,cACA,YACA,YACA,MACA,YAAYC,EAAeC,EAAaC,EAAaxR,EAAO,CACxD,KAAK,cAAgBsR,EACrB,KAAK,YAAcC,EACnB,KAAK,YAAcC,EACnB,KAAK,MAAQxR,CAChB,CACL,CAwBO,MAAMyR,EAAW,CACpB,UACA,UACA,iBACA,WACA,YAAYC,EAAWC,EAAW,CAC9B,KAAK,UAAYD,EACjB,KAAK,UAAYC,CACpB,CACD,OAAOC,EAAG,CACN,OAAO,KAAK,YAAcA,EAAE,WAAa,KAAK,YAAcA,EAAE,WAC1D,KAAK,mBAAqBA,EAAE,kBAAoB,KAAK,aAAeA,EAAE,UAC7E,CACL,CACO,MAAMC,EAAa,CACtB,MACA,cACA,QACA,WACA,aACA,YAAYpd,EAAOqd,EAAeC,EAAS1c,EAAY2c,EAAc,CACjE,KAAK,MAAQvd,EACb,KAAK,cAAgBqd,EACrB,KAAK,QAAUC,EACf,KAAK,WAAa1c,EAClB,KAAK,aAAe2c,CACvB,CACD,cAAcC,EAAS,CACnB,MAAM,IAAI,MAAM,wCAAwC,CAC3D,CACL,CCjOA,MAAMlhB,EAAY,CAMd,8BAA+B,eAI/B,cAAe,qBAIf,8BAA+B,oCAI/B,oBAAqB,yBAIrB,sBAAuB,2BAIvB,oBAAqB,yBAIrB,QAAS,UAMT,8BAA+B,yDAI/B,sBAAuB,2BAIvB,mBAAoB,uBAIpB,yBAA0B,8BAI1B,QAAS,UAKT,UAAW,KAIX,oBAAqB,qFAIrB,0BAA2B,+EAI3B,eAAgB,+HAIhB,uBAAwB,4DAIxB,qBAAsB,kEAItB,oBAAqB,0FAIrB,WAAY,2FAIZ,sBAAuB,mHAIvB,wBAAyB,+EAIzB,oBAAqB,uEACzB,EACMC,GAAOC,EAA4B,2CAA4CF,CAAS,EACxFG,EAAaC,EAA6B,KAAK,OAAWH,EAAI,EACpE,MAAMkhB,WAAiC7gB,EAA+B,CACtE,CACO,MAAM8gB,UAA6B/W,EAAgC8W,EAAwB,CAAE,CAChG,iBACA,cACA,cACA,wBACA,eACA,oBACA,UACA,YAAYE,EAAM5gB,EAAa,CAC3B,MAAM,KAAMA,CAAW,EACvB,KAAK,iBAAmB4gB,EACxB,KAAK,cAAgB,EACrB,KAAK,cAAgB,IAAI,IAKzB,KAAK,wBAA0B,GAC/B,KAAK,eAAiB,KACtB,KAAK,oBAAsB,EAC9B,CACD,IAAI,MAAO,CAEV,CACD,sBAAuB,CACnB,OAAO,KAAK,gBACf,CACD,gBAAiB,CACb,MAAM,IAAI,MAAM,kBAAkB,CACrC,CACD,YAAa,CACT,MAAM,IAAI,MAAM,kBAAkB,CACrC,CACD,SAAU,CACN,MAAM,IAAI,MAAM,kBAAkB,CACrC,CACD,gBAAgBlY,EAAO,CACnB,MAAM,IAAI,MAAM,kBAAkB,CACrC,CACD,qBAAsB,CAClB,OAAO,IACV,CACD,UAAW,CACP,OAAK,KAAK,iBACN,KAAK,eAAiB,KAAK,kBAExB,KAAK,cACf,CACD,WAAWvH,EAAU,CACjB,OAAO,MAAM,WAAWA,CAAQ,CACnC,CACD,UAAW,CACP,MAAM,SAAQ,EACd,KAAK,iBAAiB,mBAAmB,EAAI,CAChD,CACD,QAAS,CACL,MAAM,OAAM,EACZ,KAAK,iBAAiB,mBAAmB,EAAI,CAChD,CACD,SAAU,CACF,KAAK,gBACL,KAAK,eAAe,UAExB,QAASiB,EAAO,KAAK,SAAS,CAAC,EAAGA,EAAMA,EAAOA,EAAK,iBAAiB,GAAM,KAAM,EAAI,EACjFA,EAAK,QAAO,CAEnB,CACD,mBAAmBye,EAAoBC,EAAkB,CACrD,MAAM,IAAI,MAAM,kBAAkB,CACrC,CACD,sBAAsBD,EAAoBC,EAAkB,CACxD,MAAM,IAAI,MAAM,kBAAkB,CACrC,CACD,oBAAoBC,EAAcza,EAAsBua,EAAoB,CAC3E,CACD,gBAAgBG,EAAK,CACjB,OAAOA,EAAI,QAAQ,CAAC,EAAI,IAC3B,CACD,aAAa9B,EAAU,CACnB,MAAMH,EAAqBkC,GAC3B,OAAO/B,GAAY,GAAKA,EAAWH,EAAqBG,EAAS,SAAU,EAAG,GACjF,CACD,aAAc,CACV,OAAO,KAAK,iBAAiB,YAAY,IAAI,CAChD,CACD,mBAAmB1e,EAAO,CACtB,KAAK,iBAAiB,mBAAmB,KAAMA,CAAK,CACvD,CACD,iBAAiB0gB,EAAc,CAC3B,IAAIC,EAA2B,EAC/B,QAAS,EAAI,EAAG,EAAI,KAAK,wBAAwB,OAAQ,IAAK,CAC1D,MAAMC,EAAQ,KAAK,wBAAwB,CAAC,EAC5C,GAAIA,EAAM,MAAQF,GAAgBA,EAAeE,EAAM,GAAI,CACvD,MAAMxgB,EAAaugB,EAA2BD,EAAeE,EAAM,KACnE,OAAO,KAAK,cAAcxgB,CAAU,CACvC,CACDugB,GAA4BC,EAAM,GAAKA,EAAM,KAAO,CACvD,CACD,OAAO,IACV,CACD,gBAAgBjgB,EAAU,CACtB,MAAMkgB,EAAQC,GAAwB,gBAAgB,EAAE,MAAM,CAAE,MAAO,EAAI,CAAE,EACvElgB,EAAOmgB,sCAAqDF,CAAK,MACjEG,EAAW,KAAK,SACtB,GAAIA,EAAS,UAAYA,EAAS,SAAS,YAAc,EAAG,CACxD,MAAM5f,EAAM,SAAS,cAAc,KAAK,EAClCC,EAAY0f,WAA0B,KAAK,KAAKpgB,CAAQ,CAAC,UAC/DS,EAAI,YAAYC,CAAS,EACzB,MAAM4f,EAAgBtgB,EAAW,WACjC,GAAIsgB,KAAiB,KAAK,KAAM,CAC5B,MAAM1f,EAAcwf,kCAAiD,KAAK,KAAKE,CAAa,CAAC,UAC7F7f,EAAI,YAAYG,CAAW,EAC3BH,EAAI,UAAU,IAAI,yBAAyB,EAC3C8f,GAA0B7f,CAAS,EACnC6f,GAA0B3f,CAAW,EACrC,KAAK,sBAAsBrC,EAAWH,EAAU,8BAA+B,CAAE,IAAK,KAAK,KAAK4B,CAAQ,EAAG,IAAK,KAAK,KAAKsgB,CAAa,CAAC,CAAE,EAAGrgB,EAAMD,CAAQ,CAC9J,CACDC,EAAK,YAAYQ,CAAG,CACvB,CACD,OAAOR,CACV,CACD,UAAW,CACH,KAAK,YAGT,KAAK,UAAY,GACZ,KAAK,WAAW,cAAc,KAAK,YAAY,EAAE,KAAK,IAAM,KAAK,iBAAkB,CAAA,EAC3F,CACD,uBAAwB,CAEpB,YAAK,UAAY,GACjB,KAAK,OAAM,EACJ,KAAK,SAAU,EAAC,cAAc,KAAK,WAAU,CAAE,CACzD,CACD,mBAAmBugB,EAAQ,CACvB,MAAI,cAAeA,EACRA,EAAO,UAEXA,EAAO,EACjB,CACD,iBAAiBC,EAAcC,EAAY,CACvC,OAAO,IAAI,QAAQ7iB,GAAW,CAC1B4iB,EAAeA,GAAgB,EAC/BC,EAAaA,GAAcD,EAAe,KAAK,iBAAiB,qBAAoB,EACpF,IAAIE,EAA6BF,EACjCG,EAAmB,KAAK,KAAMF,CAAU,EACxC,SAASE,EAAmBF,EAAY,CACpC,GAAIC,GAA8BD,EAC9B,OAEJ,MAAMG,EAAM,KAAK,IAAIF,EAA6B,KAAK,iBAAiB,uBAAwBD,CAAU,EACrG,KAAK,SAAU,EACf,oBAAoBC,EAA4BE,CAAG,EACnD,KAAKC,GAAcC,EAAkB,KAAK,KAAMD,EAAYJ,CAAU,CAAC,EAC5EC,EAA6BE,CAChC,CACD,SAASG,EAAqBle,EAAMme,EAAgB,CAChD,GAAI,KAAK,cAAe,CACpB,MAAMC,EAAO,KAAK,mBAAmBpe,CAAI,EACnCnD,EAAQ,KAAK,cAAc,IAAIuhB,CAAI,EACzC,GAAIvhB,EAAO,CACP,KAAK,iBAAiB,YAAY,KAAMA,EAAOshB,CAAc,EAC7D,MACH,CACJ,CACD,KAAK,iBAAiB,YAAY,KAAM,KAAK,gBAAgBne,CAAI,EAAGme,CAAc,CACrF,CACD,SAASE,EAAqBC,EAAMzZ,EAAIsZ,EAAgB,CACpD,MAAMI,EAAU,IAAIC,GAAmD,KAAK,iBAAiB,KAAK,IAAI,EAAGF,EAAMzZ,EAAI,KAAK,iBAAiB,qBAAoB,CAAE,EAC/J,KAAK,iBAAiB,YAAY,KAAM0Z,EAAQJ,CAAc,CACjE,CACD,SAASF,EAAkBD,EAAYJ,EAAY,CAC/C,IAAIa,EAAY,EACZC,EAAeV,EAAW,cAC9B,MAAMzT,EAAQyT,EAAW,MACzB,IAAIG,EAAiB,EACrB,GAAK,KAAK,wBAAwB,OAa7B,CACD,IAAIQ,EAAa,EACbC,EAAQ,GACRzB,EAAQ,CAAE,KAAM,EAAG,GAAI,CAAC,EAC5B,KAAOwB,EAAa,KAAK,wBAAwB,QAAQ,CAErD,GADAxB,EAAQ,KAAK,wBAAwBwB,CAAU,EAC3CxB,EAAM,IAAMuB,EAAc,CAC1BE,EAAQ,GACR,KACH,CACDT,GAAkBhB,EAAM,GAAKA,EAAM,KAE/BA,EAAM,GAAKa,EAAW,cACtBG,GAAkB,GAEtB,EAAEQ,CACL,CAkBD,IAjBI,CAACC,GAASZ,EAAW,cAAgBb,EAAM,MAE5B,KAAK,YAAa,EAACgB,EAAiB,CAAC,EAC7C,eAAeH,EAAW,aAAa,EAC9CK,EAAqB,KAAK,KAAML,EAAW,cAAeY,EAAQzB,EAAM,KAAOa,EAAW,YAAaG,CAAc,EACrHhB,EAAQ,CAAE,KAAMa,EAAW,cAAe,GAAIA,EAAW,eACpDY,IACDD,EAAa,KAAK,wBAAwB,QAE9C,KAAK,wBAAwB,OAAOA,EAAY,EAAGxB,CAAK,GAGxDgB,GAAkBO,EAAevB,EAAM,KAKpCA,EAAM,GAAKa,EAAW,aAAa,CAEtC,MAAMa,EAAY1B,EAAM,GAAKuB,EAC7BP,GAAkBU,EAClBJ,GAAaI,EACbH,EAAevB,EAAM,GAErB,MAAM2B,EAAY,KAAK,wBAAwBH,EAAa,CAAC,EAC7D,IAAII,EAAgBD,EAAYA,EAAU,KAAOd,EAAW,YAI5D,IAHIe,EAAgBf,EAAW,cAC3Be,EAAgBf,EAAW,aAExBU,EAAeK,GAClBb,EAAqB,KAAK,KAAM3T,EAAMkU,GAAW,EAAGN,GAAgB,EACpE,EAAEO,EAGFI,GAAaC,IAAkBD,EAAU,MACzC3B,EAAM,GAAK2B,EAAU,GAErB,KAAK,mBAAmBX,CAAc,EACtC,KAAK,wBAAwB,OAAOQ,EAAa,EAAG,CAAC,IAGrDxB,EAAM,GAAK4B,EAEPA,IAAkBf,EAAW,YAC7B,KAAK,mBAAmBG,CAAc,EAGtC,KAAK,YAAa,EAACA,CAAc,EAC5B,iBAAiBH,EAAW,WAAW,EAGvD,CACJ,KAlFyC,CAClCA,EAAW,cAAgB,IAC3B,KAAK,wBAAwB,KAAK,CAAE,KAAM,EAAG,GAAI,CAAC,CAAE,EACpDK,EAAqB,KAAK,KAAM,EAAGL,EAAW,cAAeG,GAAgB,GAEjF,KAAK,wBAAwB,KAAK,CAAE,KAAMH,EAAW,cAAe,GAAIA,EAAW,WAAW,CAAE,EAChG,QAAS/d,EAAI,EAAG+e,EAAIzU,EAAM,OAAQtK,EAAI+e,EAAG,EAAE/e,EACvCie,EAAqB,KAAK,KAAM3T,EAAMtK,CAAC,EAAGke,GAAgB,EAE1DH,EAAW,YAAcA,EAAW,aACpCK,EAAqB,KAAK,KAAML,EAAW,YAAaA,EAAW,YAAaG,GAAgB,CAEvG,CAwED,GADA,KAAK,eAAiB5T,EAAM,OACxBsT,EAA6BD,GAAcC,EAA6BG,EAAW,YAAa,CAChGF,EAAmB,KAAK,KAAMF,CAAU,EACxC,MACH,CACG,KAAK,UACL,KAAK,iBAAiB,mBAAmB,EAAI,EAEjD7iB,IACA,KAAK,yBAAyB2hB,EAAqB,OAAO,gBAAgB,CAC7E,CACb,CAAS,CACJ,CACD,cAAe,CACX,KAAK,cAAc,QACnB,MAAMjgB,EAAW,KAAK,cACtB,QAASwD,EAAI,EAAG+e,EAAIviB,EAAS,OAAQwD,EAAI+e,EAAG,EAAE/e,EAAG,CAC7C,MAAMpD,EAAQJ,EAASwD,CAAC,EACnBpD,EAAM,UAGX,KAAK,cAAc,IAAIA,EAAM,QAAO,EAAIA,CAAK,CAChD,CACJ,CACD,MAAM,MAAO,CACT,KAAK,iBAAiB,wBACtB,MAAM,KAAK,SAAU,EAAC,cAAc,KAAK,WAAU,CAAE,EACrD,KAAK,aAAY,EACjB,KAAK,iBAAiB,kBAAkB,IAAI,EAC5C,KAAK,wBAA0B,GAC/B,MAAMoiB,EAAgB,KAAK,cAC3B,KAAK,cAAgB,EACrB,MAAM,KAAK,iBAAiB,EAAGA,CAAa,EAC5C,UAAWpiB,KAAS,KAAK,cACjBA,EAAM,UACDA,EAAM,OAGnB,KAAK,iBAAiB,uBACzB,CACL,EACC,SAAU6f,EAAsB,EAE5B,SAAUwC,EAAQ,CAEfA,EAAO,iBAAsB,kBAErC,GAAgBxC,EAAqB,SAAWA,EAAqB,OAAS,CAAA,EAAG,CACjF,GAAGA,IAAyBA,EAAuB,CAAE,EAAC,EAC/C,MAAMyC,WAAsCzC,CAAqB,CACpE,cACA,aACA,KACA,SACA,YACA,aACA,eACA,kBACA,oBACA,YACA,YAAYa,EAAUpf,EAAM,CAGxB,GAFA,MAAMof,EAAU,EAAK,EAEjB,CAACpf,EACD,OAEJ,KAAK,cAAgB,KACrB,KAAK,aAAeA,EAAK,KACzB,KAAK,KAAOA,EAAK,KACjB,KAAK,SAAWA,EAAK,SACrB,KAAK,YAAcA,EAAK,SACxB,KAAK,aAAeA,EAAK,aACzB,KAAK,eAAiBA,EAAK,GAC3B,KAAK,kBAAoBA,EAAK,UAC1B,KAAK,OAAS,SACd,KAAK,oBAAsB,GAEtB,KAAK,OAAS,UAAY,KAAK,aAAa,WAAW,QAAQ,GACpE,KAAK,aAAe,KAAK,iBAAiB,KAAK,aAAc,EAAK,EAClE,KAAK,oBAAsB,IAEtBA,EAAK,eACV,KAAK,oBAAsB,IAE3BA,EAAK,sBACL,KAAK,oBAAsB,IAE/B,MAAMihB,EAAW7B,EAAS,SACpB8B,EAAqB,KAAK,YAAcD,EAAS,UAAY,IAC7DE,EAAsB,KAAK,aAAeF,EAAS,UAAY,IACrE,KAAK,KAAO,CACR,SAAU,KAAK,aAAa,KAAK,QAAQ,EACzC,YAAapF,EAAgD,KAAK,WAAW,EAC7E,aAAcA,EAAgD,KAAK,YAAY,EAC/E,sBAAuB,KAAK,gBAAgBqF,CAAkB,EAC9D,uBAAwB,KAAK,gBAAgBC,CAAmB,CAC5E,CACK,CACD,IAAI,MAAO,CACP,OAAO,KAAK,YACf,CACD,qBAAsB,CAClB,OAAO,KAAK,oBAAsB,OAAY,KAAO,CACjD,SAAU,KAAK,iBAAiB,SAChC,kBAAmB,KAAK,kBACxB,eAAgB,KAAK,cACjC,CACK,CACD,WAAWpiB,EAAU,CAEjB,OADaA,IAAa,SAAW,KAAK,gBAAgBA,CAAQ,EAAI,KAAK,kBAE9E,CACD,kBAAmB,CACf,IAAIO,EAAQ,KAAK,aACb8hB,EAAa,SACjB,OAAQ,KAAK,KAAI,CACb,IAAK,sBACL,IAAK,SACD9hB,EAAQ,IAAIA,CAAK,IACjB8hB,EAAa,SACb,MACJ,IAAK,SACD9hB,EAAQ,IAAIA,CAAK,IACjB8hB,EAAa,SACb,MACJ,IAAK,UACD9hB,EAAQ,GAAGA,CAAK,KAChB8hB,EAAa,WACb,MACJ,IAAK,SACDA,EAAa,SACb,MACJ,IAAK,SACDA,EAAa,SACb,MACJ,IAAK,SACL,IAAK,eACDA,EAAa,OACb,MACJ,IAAK,QACD9hB,EAAQA,EAAQ,GAAGA,CAAK,KAAOhC,EAAWH,EAAU,aAAa,EACjE,KACP,CACD,OAAO,KAAK,0BAA0BikB,EAAY9hB,GAAS,EAAE,CAChE,CACD,0BAA0B8hB,EAAY9hB,EAAO,CACzC,MAAM2f,EAAQC,GAAwB,eAAe,EAAE,MAAM,CAAE,MAAO,EAAI,CAAE,EACtEmC,EAAWC,GAAqB;AAAA,+CACCrC,CAAK;AAAA;AAAA,oCAEhBmC,CAAU,KAAK9hB,CAAK;AAAA,mCACrB,KAAK,cAAc;AAAA;AAAA,SAGxCE,EAAM6hB,EAAS,EAAE,WAAW,EAElC,GADA,KAAK,iBAAiB7hB,CAAG,EACrB,KAAK,oBAAqB,CAC1B,MAAM+hB,EAAY7T,GAAuB,QAAS,iBAAiB,EACnEvO,EAAmB,QAAQoiB,EAAWjkB,EAAWH,EAAU,6BAA6B,CAAC,EACzFqC,EAAI,YAAY+hB,CAAS,CAC5B,CACD,GAAI,KAAK,oBAAqB,CAC1B,MAAMA,EAAY7T,GAAuB,WAAY,iBAAiB,EACtEvO,EAAmB,QAAQoiB,EAAWjkB,EAAWH,EAAU,mBAAmB,CAAC,EAC/EqC,EAAI,YAAY+hB,CAAS,CAC5B,CACI,KAAK,qBAAqB/hB,CAAG,EAClC,MAAMR,EAAOqiB,EAAS,UACtB,OAAI,KAAK,OACLriB,EAAK,MAAM,YAAY,eAAiB,KAAK,MAAQ,KAAK,SAAS,YAAe,IAAI,EAEnFA,CACV,CACD,iBAAiBwiB,EAAM,CACtB,CACD,MAAM,qBAAqBhiB,EAAK,CAC5B,MAAMiiB,EAAgBtC,6CACtB3f,EAAI,YAAYiiB,CAAa,EAC7B,MAAMhF,EAAO,MAAM,KAAK,iBAAiB,oBAAmB,EAAG,cAAc,KAAK,iBAAiB,EAC/FA,GACAA,EAAK,aAAa,WAAY,GAAG,EACjCgF,EAAc,YAAYhF,CAAI,EAC9B,KAAK,YAAcA,GAGnBgF,EAAc,OAAM,CAE3B,CACD,MAAM,mBAAmB5K,EAAmB6K,EAAiB,CAEzD,OADqB,MAAM,KAAK,sBAAsB7K,EAAmB6K,CAAe,GACjE,KAAK,yBAA0B,GAClD7K,EAAkB,aAAY,EAAG,qCAAqCvZ,EAAWH,EAAU,qBAAqB,CAAC,CACxH,CACD,MAAM,sBAAsB0Z,EAAmB6K,EAAiB,CAC5D,OAAI,KAAK,OAAS,SACP7K,EAAkB,aAAc,EAAC,qCAAqC,KAAK,YAAY,EAE3F,MAAMA,EAAkB,0BAA0B,OAAO,KAAK,cAAc,EAAG6K,CAAe,CACxG,CACD,0BAA2B,CACvB,MAAMC,EAAW,6EACjB,OAAQ,KAAK,KAAI,CACb,IAAK,OACD,MAAO,CAAE,YAAarkB,EAAWH,EAAU,mBAAmB,EAAG,KAAMwkB,EAAW,iBACtF,IAAK,sBACD,MAAO,CAAE,YAAarkB,EAAWH,EAAU,yBAAyB,EAAG,KAAMwkB,EAAW,uBAC5F,IAAK,gBACD,MAAO,CAAE,YAAarkB,EAAWH,EAAU,mBAAmB,EAAG,KAAMwkB,EAAW,gBACzF,CACD,OAAQ,KAAK,KAAO,IAAM,KAAK,aAAY,CACvC,IAAK,SACD,MAAO,CAAE,YAAarkB,EAAWH,EAAU,oBAAoB,EAAG,KAAMwkB,EAAW,SACvF,IAAK,0BACD,MAAO,CAAE,YAAarkB,EAAWH,EAAU,qBAAqB,EAAG,KAAMwkB,EAAW,SACxF,IAAK,4BACL,IAAK,gCACD,MAAO,CAAE,YAAarkB,EAAWH,EAAU,uBAAuB,EAAG,KAAMwkB,EAAW,SAC1F,IAAK,0BACD,MAAO,CAAE,YAAarkB,EAAWH,EAAU,cAAc,EAAG,KAAMwkB,EAAW,kBACjF,IAAK,wCACD,MAAO,CAAE,YAAarkB,EAAWH,EAAU,sBAAsB,EAAG,KAAMwkB,EAAW,gBACzF,IAAK,4BACD,MAAO,CAAE,YAAarkB,EAAWH,EAAU,UAAU,EAAG,KAAMwkB,EAAW,gBAC7E,IAAK,sBACD,MAAO,CAAE,YAAarkB,EAAWH,EAAU,mBAAmB,EAAG,KAAMwkB,EAAW,gBACzF,CAEJ,CACD,MAAM,mBAAoB,CACtB,MAAMC,EAAU,MAAM,KAAK,SAAU,EAAC,QAAO,EAC7C,KAAK,eAAe,CAACA,CAAO,CAC/B,CACD,iBAAiBC,EAAUC,EAAa,CACpC,MAAMC,EAAWF,EAAS,QAAQ,GAAG,EAC/BG,EAASF,EAAcD,EAAS,QAAQ,GAAG,EAAIA,EAAS,OAC9D,GAAIE,IAAa,IAAMC,IAAW,GAC9B,OAAOH,EAEX,MAAMI,EAAUJ,EAAS,UAAUE,EAAW,EAAGC,CAAM,EAAE,WACzD,IAAIE,EAAMC,GAAiCF,CAAO,EAClD,OAAIC,EAAI,OAAS,KACbA,EAAME,GAAoCF,EAAK,EAAE,GAE9CL,EAAS,OAAO,EAAGE,EAAW,CAAC,EAAIG,EAAML,EAAS,OAAOG,CAAM,CACzE,CACD,oBAAoBlY,EAAaV,EAAqByN,EAAmB,CAMrE,GALI,KAAK,cAAgB,GACrB/M,EAAY,cAAa,EAAG,WAAWxM,EAAWH,EAAU,mBAAmB,EAAG,IAAM,CACpFiM,EAAoB,WAAW,OAAO,KAAK,cAAc,EAAG9L,EAAWH,EAAU,OAAO,CAAC,CACzG,EAAe,CAAE,aAAc,mBAAmB,CAAE,EAExC,KAAK,cACL,UAAWklB,KAAS,KAAK,cAAc,SAAS,oDAAoD,EAAG,CACnG,KAAM,CAAE,WAAAC,EAAY,eAAAC,GAAmBF,EAAM,OAC7CvY,EAAY,cAAe,EAAC,WAAWxM,EAAWH,EAAU,8BAA+B,CAAE,IAAKmlB,EAAY,IAAKC,CAAc,CAAE,EAAG,IAAM,CACxInZ,EAAoB,WAAWmZ,EAAgBjlB,EAAWH,EAAU,OAAO,CAAC,CAChG,EAAmB,CAAE,aAAc,mBAAmB,CAAE,CAC3C,CAED0Z,GACA/M,EAAY,cAAa,EAAG,WAAWxM,EAAWH,EAAU,qBAAqB,EAAG,SAAY,CAC5F,MAAMqlB,EAAe,MAAM,KAAK,sBAAsB3L,EAAmB,EAAE,EACtE2L,EAKD,MADqB3L,EAAkB,OAAQ,EAAC,MAAM4L,EAA6B,GAC/D,mBAAmB5b,EAAmB,SAAU,EAAC,OAAO6b,EAAiC,EAAGF,CAAY,EAJ5H/lB,EAAuB,SAAQ,EAAG,MAAMa,EAAWH,EAAU,qBAAqB,CAAC,CAMvG,EAAe,CAAE,aAAc,0BAA0B,CAAE,CAEtD,CACL,CACO,MAAMwlB,WAA+B3B,EAA8B,CACtE,cACA,cACA,UACA,SACA,iBACA,2BACA,YAAY5B,EAAU6B,EAAU2B,EAAMC,EAAkB,CACpD,MAAMzD,EAAUwD,EAAK,IAAI,EACzB,KAAK,cAAgBA,EAAK,KAC1B,KAAK,cAAgBA,EAAK,KAC1B,KAAK,UAAYA,EAAK,UACtB,KAAK,SAAW3B,EAChB,KAAK,iBAAmB4B,EACxB,KAAK,2BAA6B,KAAK,qCAClC,KAAK,4BACD,KAAK,oBAEd,MAAM9M,EAAO,KAAK,KAClBA,EAAK,MAAW,GAChBA,EAAK,WAAgB,GACrBA,EAAK,aAAkB,GACvBA,EAAK,WAAgB,GACrBA,EAAK,UAAe,GACpBA,EAAK,YAAiB,GACtBA,EAAK,UAAe,EACvB,CACD,qBAAsB,CAClB,OAAO,KAAK,oBAAsB,OAC9B,KACA,CAAE,SAAU,KAAK,SAAU,kBAAmB,KAAK,kBAAmB,eAAgB,KAAK,eAClG,CACD,gBAAiB,CACb,GAAI,KAAK,oBAAsB,OAC3B,MAAM,IAAI,MAAM,yCAAyC,EAE7D,OAAO,KAAK,SAAS,oBAAoB,KAAK,iBAAiB,CAClE,CACD,oCAAqC,CACjC,IAAI5T,EAAW,KAAK,iBACpB,KAAOA,GAAU,CACb,GAAIA,EAAS,iBAAmB,KAAK,eACjC,OAAOA,EAEXA,EAAWA,EAAS,gBACvB,CACD,OAAO,IACV,CACD,gBAAgBN,EAAM,CAClB,OAAO,IAAI8gB,GAAuB,KAAK,iBAAkB,KAAK,SAAU9gB,EAAM,IAAI,CACrF,CACD,SAAU,CACN,OAAO,KAAK,SACf,CACD,YAAa,CACT,MAAMsT,EAAgB,KAAK,iBAAiB,qBAAoB,EAEhE,OADqB,KAAK,iBAAiB,aAAY,EACnC,CAChB,IAAK,SACD,OAAO,IAAI2N,EAAqD,YAAa3N,EAAe,eAAgB,EAAK,EACrH,IAAK,QACD,OAAO,IAAI2N,EAAqD,YAAa,GAAM,eAAgB,EAAK,EAC5G,IAAK,cACD,OAAO,IAAIA,EAAqD,WAAY3N,EAAe,YAAa,EAAI,EAChH,IAAK,eACD,OAAO,IAAI2N,EAAqD,eAAgB3N,EAAe,YAAa,EAAI,EACpH,IAAK,WACD,OAAO,IAAI2N,EAAqD,WAAY3N,EAAe,OAAQ,EAAI,EAC3G,QACI,OAAO,IAAI2N,EAAqD,YAAa,GAAM,eAAgB,EAAK,CAC/G,CACJ,CACD,iBAAiBtjB,EAAK,CAClB,IAAI+E,EAAO,KAAK,eAAiB,UAC7Bwe,EAAY,OAChB,OAAQ,KAAK,cAAa,CACtB,IAAK,UACDA,EAAY,sBACZ,MACJ,IAAK,WACL,IAAK,SACL,IAAK,OACDA,EAAY,oBACZ,MACJ,IAAK,UACDxe,EAAO,IAAIA,CAAI,IACf,KACP,CACG,KAAK,4BACL/E,EAAI,UAAU,IAAI,sBAAsB,EAE5CA,EAAI,QAAQ2f,gCAA+C4D,CAAS,KAAKxe,CAAI;AAAA,yBAC5D,KAAK,mBAAmB,SAAS,CACrD,CACD,mBAAoB,CAChB,MAAO,IACV,CACL,CACO,MAAMye,WAAwCL,EAAuB,CACxEM,GACA,YAAY7D,EAAU6B,EAAU2B,EAAMM,EAA2B,CAC7D,MAAM9D,EAAU6B,EAAU2B,EAAMM,CAAyB,EACzD,KAAKD,GAAWL,EAAK,KAAK,QACtB,KAAKK,KACL,KAAK,KAAK,SAAc3lB,EAAWH,EAAU,OAAO,EAE3D,CACD,gBAAiB,CACb,GAAI,KAAK,oBAAsB,OAC3B,MAAM,IAAI,MAAM,uCAAuC,EAE3D,OAAO,KAAK,SAAS,6BAA6B,KAAK,iBAAiB,CAC3E,CACD,gBAAgB0E,EAAM,CAClB,OAAO,IAAImhB,GAAgC,KAAK,iBAAkB,KAAK,SAAUnhB,EAAM,IAAI,CAC9F,CACD,mBAAoB,CAEhB,OAAOvE,EAAWH,EAAU,SAAS,CACxC,CACD,QAAS,CACL,KAAK,qBAAqB,EAAE,CAC/B,CACD,oBAAoB2M,EAAaV,EAAqByN,EAAmB,CACrE,MAAM,oBAAoB/M,EAAaV,EAAqByN,CAAiB,EAC7E,MAAMsM,EAAoB,KAAK,kBAC3BA,IAAsB,SAGtB,KAAKF,GACLnZ,EAAY,cAAa,EAAG,WAAWxM,EAAWH,EAAU,wBAAwB,EAAG,SAAY,CAC/F,MAAM,KAAK,SAAS,4BAA4BgmB,CAAiB,EACjE,MAAM,KAAK,iBAAiB,mBAC5C,EAAe,CAAE,aAAc,6BAA6B,CAAE,EAGlDrZ,EAAY,cAAa,EAAG,WAAWxM,EAAWH,EAAU,kBAAkB,EAAG,SAAY,CACzF,MAAM,KAAK,SAAS,0BAA0BgmB,CAAiB,EAC/D,MAAM,KAAK,iBAAiB,mBAC5C,EAAe,CAAE,aAAc,sBAAsB,CAAE,EAElD,CACD,aAAc,CACV,OAAQ,KAAK,UAAY,GAAKC,EACjC,CACD,iBAAiB5jB,EAAK,CAClB,MAAM,iBAAiBA,CAAG,EACrB,KAAK,eACNA,EAAI,UAAU,IAAI,2BAA2B,CAEpD,CACD,qBAAqB6jB,EAAiB,CAClC,GAAI,CAAC,KAAK,UAAW,CACZ,KAAK,KAAK9E,EAAqB,OAAO,gBAAgB,EACtD,KAAK,IAAM,KAAK,qBAAqB8E,CAAe,CAAC,EAC1D,KAAK,SAAQ,EACb,MACH,CAED,GADA,MAAM,OAAM,EACR,EAAEA,EAAkB,GAAK,KAAK,SAAS,OAAS,EAAG,CACnD,MAAMC,EAAW,KAAK,SAAS,CAAC,EAChC,IAAKA,EAAS,UAAY,GAAK,GAAKA,EAAS,cAAe,CACxDA,EAAS,qBAAqBD,CAAe,EAC7C,MACH,CACJ,CACD,KAAK,iBAAiB,yBAAyBE,EAAmC,uBAAuB,CAC5G,CACD,YAAa,CACT,MAAMC,EAAS,MAAM,aACrB,OAAIA,EAAO,aAAe,aACtBA,EAAO,WAAa,iBAEpBA,EAAO,aAAe,aACtBA,EAAO,WAAa,iBAEjBA,CACV,CACL,CACO,MAAMC,WAAiCzC,EAA8B,CACxE,uBACA,cACA,YAAY5B,EAAU6B,EAAUjhB,EAAM0jB,EAAe,CACjD,MAAMtE,EAAUpf,CAAI,EACpB,KAAK,uBAAyBihB,EAC9B,KAAK,cAAgByC,EAChB,KAAK,oBACV,MAAM3N,EAAO,KAAK,KAClBA,EAAK,MAAW,GAChBA,EAAK,WAAgB,GACrBA,EAAK,UAAe,GAChB,KAAK,eACLA,EAAK,WAAgB,GACrBA,EAAK,UAAe,GACpBA,EAAK,aAAkB,IACvBA,EAAK,YAAiB8F,EAAgD,KAAK,aAAe,CAAC,IAG3F9F,EAAK,WAAgB,IACrBA,EAAK,UAAe8F,EAAgD,KAAK,aAAe,CAAC,EACzF9F,EAAK,aAAkB,GACvBA,EAAK,YAAiB,GAE7B,CACD,qBAAsB,CAClB,OAAO,KAAK,oBAAsB,OAAY,KAAO,CACjD,SAAU,KAAK,uBACf,kBAAmB,KAAK,kBACxB,eAAgB,KAAK,cACjC,CACK,CACD,gBAAiB,CACb,GAAI,KAAK,oBAAsB,OAC3B,MAAM,IAAI,MAAM,uCAAuC,EAE3D,OAAO,KAAK,uBAAuB,oBAAoB,KAAK,iBAAiB,CAChF,CACD,gBAAgBlU,EAAM,CAClB,OAAO,IAAI8gB,GAAuB,KAAK,iBAAkB,KAAK,uBAAwB9gB,EAAM,IAAI,CACnG,CACD,SAAU,CACN,GAAI,KAAK,iBAAmB,OACxB,MAAM,IAAI,MAAM,wBAAwB,EAE5C,OAAO,KAAK,cACf,CACD,YAAa,CACT,MAAMsT,EAAgB,KAAK,iBAAiB,qBAAoB,EAEhE,OADqB,KAAK,iBAAiB,aAAY,EACnC,CAChB,IAAK,SACD,OAAO,IAAI2N,EAAqD,YAAa3N,EAAe,eAAgB,EAAK,EACrH,IAAK,WACD,OAAO,IAAI2N,EAAqD,WAAY3N,EAAe,eAAgB,EAAK,EACpH,IAAK,QACD,OAAO,IAAI2N,EAAqD,YAAa,GAAM,eAAgB,EAAK,EAC5G,IAAK,YACD,OAAO,IAAIA,EAAqD,WAAY3N,EAAe,YAAa,EAAI,EAChH,IAAK,cACD,OAAO,IAAI2N,EAAqD,WAAY3N,EAAe,YAAa,EAAI,EAChH,IAAK,cACD,OAAO,IAAI2N,EAAqD,WAAY3N,EAAe,YAAa,EAAI,EAChH,IAAK,eACD,OAAO,IAAI2N,EAAqD,eAAgB3N,EAAe,YAAa,EAAI,EACpH,QACI,OAAO,IAAI2N,EAAqD,YAAa,GAAM,eAAgB,EAAK,CAC/G,CACJ,CACL,CACO,MAAMa,WAAoCpF,CAAqB,CAClE,aACA,WACA,SACA,MACA,YACA,aACA,YAAYa,EAAU/V,EAAWua,EAAWC,EAAY,CACpD,MAAMzE,EAAUwE,EAAU,MAAQ,CAAC,EACnC,KAAK,aAAeva,EACpB,KAAK,WAAawa,EAClB,KAAK,SAAWD,EAAU,SAC1B,KAAK,MAAQA,EAAU,MACvB,KAAK,YAAcA,EAAU,KAC7B,KAAK,aAAeA,EAAU,OAC9B,MAAM3C,EAAW7B,EAAS,SACpB+B,EAAsB,KAAK,aAAeF,EAAS,UAAY,IAC/DC,EAAqB,KAAK,YAAcD,EAAS,UAAY,IACnE,KAAK,KAAO,CACR,OAAQ5X,EACR,MAAOwS,EAAgD,KAAK,KAAK,EACjE,SAAU,KAAK,aAAa,KAAK,QAAQ,EACzC,YAAaA,EAAgD,KAAK,WAAW,EAC7E,aAAcA,EAAgD,KAAK,YAAY,EAC/E,sBAAuB,KAAK,gBAAgBqF,CAAkB,EAC9D,uBAAwB,KAAK,gBAAgBC,CAAmB,CAC5E,CACK,CACD,IAAI,MAAO,CACP,OAAO,KAAK,YACf,CACD,gBAAiB,CACb,OAAO,KAAK,iBAAiB,SACxB,4BAA4B,KAAK,aAAc,KAAK,UAAU,CACtE,CACD,MAAM,+BAA+B2C,EAAkB,CACnD,KAAK,iBAAiB,kBACtB,MAAM,KAAK,wBACX,MAAMhF,EAAe,MAAM,KAAK,SAAQ,EAAG,aAAagF,CAAgB,EACxE,GAAIhF,IAAiB,GACjB,YAAK,SAAQ,EACN,GAEX,MAAM,KAAK,iBAAiBA,EAAc,IAAI,EAC9C,MAAM9e,EAAO,KAAK,iBAAiB8e,CAAY,EAC/C,OAAO9e,EAAO,CAAC,KAAMA,CAAI,EAAI,CAAA,CAChC,CACD,YAAY+jB,EAAa,CACrB,OAAO,KAAK,aAAa,YAAW,EAAG,QAAQA,CAAW,IAAM,EACnE,CACD,WAAWhlB,EAAU,CACjB,MAAMC,EAAOD,IAAa,SAAW,MAAM,WAAWA,CAAQ,EAAI,KAAK,gBAAgBA,CAAQ,EAC/F,OAAIA,IAAa,UAAY,KAAK,MAAQ,GACtCC,EAAK,YAAYmgB,kCAAiD,KAAK,KAAK,SAAS,EAElFngB,CACV,CACD,gBAAgB6C,EAAM,CAClB,OAAO,IAAI4hB,GAAyB,KAAK,iBAAkB,KAAK,iBAAiB,SAAU5hB,EAAM,EAAK,CACzG,CACD,YAAa,CACT,MAAMsT,EAAgB,KAAK,iBAAiB,qBAAoB,EAC1DC,EAAe,KAAK,iBAAiB,aAAY,EACvD,OAAQA,EAAY,CAChB,IAAK,SACD,OAAO,IAAI0N,EAAqD,OAAQ3N,EAAe,KAAM,EAAI,EACrG,IAAK,WACD,OAAO,IAAI2N,EAAqD,WAAY3N,EAAe,eAAgB,EAAK,EACpH,IAAK,cACD,OAAO,IAAI2N,EAAqD,WAAY3N,EAAe,KAAM,EAAI,EACzG,IAAK,eACD,OAAO,IAAI2N,EAAqD,eAAgB3N,EAAe,KAAM,EAAI,EAC7G,QACI,MAAM,IAAI,MAAM,0BAA0BC,CAAY,EAAE,CAC/D,CACJ,CACL,CACO,MAAM4O,EAA8B,CACvC,mBACA,qBACA,WACA,aACA,YAAYC,EAAoBC,EAAsBC,EAAYC,EAAc,CAC5E,KAAK,mBAAqBH,EAC1B,KAAK,qBAAuBC,EAC5B,KAAK,WAAaC,EAClB,KAAK,aAAeC,CACvB,CACD,SAAU,CACN,KAAK,mBAAmB,UACxB,KAAK,qBAAqB,SAC7B,CACD,aAAa/X,EAAmB,CAC5B,MAAM,IAAI,MAAM,aAAa,CAChC,CACD,SAAU,CACN,OAAO,QAAQ,QAAQ,EAAK,CAC/B,CACD,MAAM,oBAAoBgY,EAAe1G,EAAa,CAClD,IAAIkC,EACAyE,EACJ,GAAID,EAAgB,KAAK,WAAY,CACjCxE,EAAa,MAAM,KAAK,mBAAmB,oBAAoBwE,EAAe1G,CAAW,EACzF,UAAW9b,KAAQge,EAAW,MAC1Bhe,EAAK,kBAAoB,GAE7B,GAAIge,EAAW,aAAelC,EAC1B,OAAAkC,EAAW,YAAc,KAAK,WAAa,KAAK,aACzCA,EAEXyE,EAAazE,EACbA,EAAa,MAAM,KAAK,qBAAqB,oBAAoB,EAAGlC,EAAckC,EAAW,WAAW,CAC3G,MAEGyE,EAAa,IAAIC,GAA+C,EAAG,EAAG,EAAG,CAAA,CAAE,EAC3E1E,EAAa,MAAM,KAAK,qBAAqB,oBAAoBwE,EAAgB,KAAK,WAAY1G,EAAc,KAAK,UAAU,EAE9H2G,EAAW,MAAM,SAClBA,EAAW,cAAgB,KAAK,WAAazE,EAAW,eAE5D,UAAWhe,KAAQge,EAAW,MAC1Bhe,EAAK,kBAAoB,GAE7B,OAAAyiB,EAAW,MAAM,KAAK,GAAGzE,EAAW,KAAK,EACzCyE,EAAW,YAAc,KAAK,WAAazE,EAAW,YACtDyE,EAAW,YAAc,KAAK,WAAa,KAAK,aACzCA,CACV,CACD,MAAM,cAAcvmB,EAAY,CAC5B,MAAM,KAAK,mBAAmB,cAAcA,CAAU,EACtD,MAAM,KAAK,qBAAqB,cAAcA,CAAU,CAC3D,CACL,CACO,MAAMymB,WAA6BjG,CAAqB,CAC3D,aACA,WACA,aACA,WACA,UACA,YACA,UACA,eACA,YAAYa,EAAU/V,EAAWob,EAAc,CAC3C,MAAMrF,EAAU,EAAI,EACpB,KAAK,aAAe/V,EACpB,KAAK,WAAaob,EAAa,WAC/B,KAAK,aAAeA,EAAa,aACjC,KAAK,WAAaA,EAAa,WAC/B,KAAK,UAAYA,EAAa,UAC9B,KAAK,YAAcA,EAAa,YAChC,KAAK,UAAYA,EAAa,UAC9B,KAAK,eAAiBA,EAAa,eACnC,KAAK,KAAO,CACR,OAAQpb,EACR,WAAYwS,EAAgD,KAAK,UAAU,EAC3E,aAAcA,EAAgD,KAAK,YAAY,EAC/E,WAAY,KAAK,aAAa,KAAK,UAAU,EACzCA,EAAgD,KAAK,IAAI,KAAK,UAAU,CAAC,EAC7E,UAAWA,EAAgD,KAAK,SAAS,EACzE,YAAaA,EAAgD,KAAK,WAAW,EAC7E,UAAW,KAAK,aAAa,KAAK,SAAS,EAAIA,EAAgD,KAAK,IAAI,KAAK,SAAS,CAAC,CACnI,CACK,CACD,IAAI,MAAO,CACP,OAAO,KAAK,YACf,CACD,gBAAiB,CACb,MAAM2C,EAAO,KAAK,iBAClB,GAAIA,EAAK,WAAa,MAAQA,EAAK,eAAiB,QAAaA,EAAK,aAAa,MAAQ,OACvF,MAAM,IAAI,MAAM,0CAA0C,EAE9D,MAAMyF,EAAqBzF,EAAK,SAAS,yBAAyBA,EAAK,aAAa,IAAK,KAAK,YAAY,EACpG0F,EAAuB1F,EAAK,aAAa,2BAA2B,KAAK,cAAc,EAC7F,GAAI,CAACyF,GAAsB,CAACC,EACxB,MAAM,IAAI,MAAM,iCAAiC,EAErD,OAAO,IAAIF,GAA8BC,EAAoBC,EAAsB,KAAK,WAAY,KAAK,YAAY,CACxH,CACD,WAAWnlB,EAAU,CACjB,MAAMC,EAAO,MAAM,WAAWD,CAAQ,EACtC,OAAIA,IAAa,UACbC,EAAK,UAAU,IAAI,gBAAgB,EAEhCA,CACV,CACD,gBAAgB6C,EAAM,CAClB,MAAMud,EAAW,KAAK,iBACtB,GAAIvd,EAAK,kBAAmB,CACxB,GAAIud,EAAS,WAAa,KACtB,MAAM,IAAI,MAAM,0CAA0C,EAE9D,OAAO,IAAIqE,GAAyB,KAAK,iBAAkBrE,EAAS,SAAUvd,EAAM,EAAK,CAC5F,CACD,GAAIud,EAAS,eAAiB,OAC1B,MAAM,IAAI,MAAM,0CAA0C,EAE9D,OAAO,IAAIqE,GAAyB,KAAK,iBAAkBrE,EAAS,aAAcvd,EAAM,EAAI,CAC/F,CACD,YAAa,CACT,MAAMsT,EAAgB,KAAK,iBAAiB,qBAAoB,EAC1DC,EAAe,KAAK,iBAAiB,aAAY,EACvD,OAAQA,EAAY,CAChB,IAAK,SACD,OAAO,IAAI0N,EAAqD,OAAQ3N,EAAe,KAAM,EAAI,EACrG,IAAK,aACD,OAAO,IAAI2N,EAAqD,OAAQ,GAAM,KAAM,EAAI,EAC5F,IAAK,eACD,OAAO,IAAIA,EAAqD,OAAQ,GAAM,KAAM,EAAI,EAC5F,IAAK,aACD,OAAO,IAAIA,EAAqD,OAAQ,GAAM,KAAM,EAAI,EAC5F,IAAK,YACD,OAAO,IAAIA,EAAqD,WAAY3N,EAAe,KAAM,EAAI,EACzG,IAAK,cACD,OAAO,IAAI2N,EAAqD,WAAY3N,EAAe,KAAM,EAAI,EACzG,IAAK,YACD,OAAO,IAAI2N,EAAqD,WAAY3N,EAAe,KAAM,EAAI,EACzG,QACI,MAAM,IAAI,MAAM,uBAAuBC,CAAY,EAAE,CAC5D,CACJ,CACD,YAAY2O,EAAa,CACrB,OAAO,KAAK,aAAa,YAAW,EAAG,QAAQA,CAAW,IAAM,EACnE,CACD,aAAaW,EAAO,CAChB,OAAIA,IAAU,EACH,GAEPA,EAAQ,EACD,IAEJ,GACV,CACL,CACO,MAAMC,WAA2BpG,CAAqB,CACzD,UACA,eACA,YAAYa,EAAUrJ,EAAM,CACxB,MAAMqJ,EAAUrJ,EAAK,WAAW,EAChC,KAAK,UAAY,GACjB,KAAK,eAAiBA,EACtB,KAAK,KAAO,CACR,UAAW8F,EAAgD9F,EAAK,SAAS,EACzE,MAAO8F,EAAgD9F,EAAK,KAAK,EACjE,SAAU8F,EAAgD9F,EAAK,QAAQ,EACvE,KAAM8F,EAAgD9F,EAAK,IAAI,EAC/D,KAAMA,EAAK,IACvB,CACK,CACD,UAAW,CACH,KAAK,WAGJ,KAAK,YACb,CACD,MAAM,YAAa,CACf,KAAK,UAAY,GACjB,MAAM6O,EAAU,MAAM,KAAK,iBAAiB,SAAS,sBAAsB,KAAK,eAAe,EAAE,EAC3FC,EAAeD,EAAQ,sBAC7B,IAAIE,EAAa,KACjB,MAAM1F,EAAW,KAAK,iBACtB,UAAW2F,KAAUF,EAAc,CAC/B,MAAMnmB,EAAQ,IAAIimB,GAAmBvF,EAAU2F,CAAM,EACrD3F,EAAS,WAAW0F,EAAYpmB,CAAK,EACrComB,EAAapmB,EACbomB,EAAW,UAAY,GACnB,KAAK,UACLA,EAAW,OAAM,CAExB,CACD,MAAME,EAAgBJ,EAAQ,iBAC9BI,EAAc,KAAK,KAAK,iBAAiB,iBAAkB,CAAA,EAC3D,UAAWD,KAAUC,EACjB5F,EAAS,WAAW0F,EAAY,IAAIH,GAAmBvF,EAAU2F,CAAM,CAAC,EAE5E3F,EAAS,mBAAmB,EAAI,CACnC,CACD,QAAS,CACL,MAAM,OAAM,EACR,KAAK,SAAS,SAAW,GACzB,KAAK,SAAS,CAAC,EAAE,OAAM,CAE9B,CACD,WAAWrgB,EAAU,CACjB,GAAIA,IAAa,OACb,OAAO,KAAK,gBAAgBA,CAAQ,EAExC,MAAMC,EAAO,MAAM,WAAWD,CAAQ,EAChCkmB,EAAiB,KAAK,eACtBpO,EAAoB,KAAK,iBAAiB,kBAAiB,EACjE,GAAIoO,EAAe,SAAU,CAEzB,MAAM5lB,EADY,KAAK,iBAAiB,UACX,sBAAsBwX,EAAoBA,EAAkB,OAAM,EAAK,KAAM,OAAOoO,EAAe,QAAQ,EAAGA,EAAe,WAAYA,EAAe,KAAO,EAAG,CAC3L,aAAcA,EAAe,OAAS,EACtC,iBAAkB,EAClB,UAAW,mBAC3B,CAAa,EACD5lB,EAAW,MAAM,SAAW,MAC5BL,EAAK,aAAaK,EAAYL,EAAK,UAAU,CAChD,CACD,OAAOA,CACV,CACD,kBAAmB,CACf,OAAO,KAAK,eAAe,EAC9B,CACL,kXCvqCM7B,EAAY,CAId,yBAA0B,8BAI1B,6BAA8B,qCAI9B,8BAA+B,wDAI/B,OAAQ,SAIR,SAAU,WAIV,YAAa,eAIb,aAAc,gBAMd,uBAAwB,2BAIxB,kBAAmB,cAInB,yBAA0B,6BAK1B,IAAK,QAKL,QAAS,YAKT,MAAO,UAIP,UAAW,cAIX,UAAW,aAKX,UAAW,aAIX,iBAAkB,qBAIlB,UAAW,aAIX,MAAO,QAIP,SAAU,YAIV,KAAM,OAIN,SAAU,WAIV,WAAY,YAChB,EACMC,GAAOC,EAA4B,2CAA4CF,CAAS,EACxFG,EAAaC,EAA6B,KAAK,OAAWH,EAAI,EAC9D8nB,GAAe,IAAI,QACzB,MAAMC,WAAyCpX,EAA+B,CAC9E,CACO,MAAMqX,WAAqC5d,EAAgC2d,EAAgC,CAAE,CAChH,SACA,aACA,0BACA,4BACA,sBACA,mBACA,WACA,mBACA,iBACA,kBACA,YAAYtO,EAAmBzN,EAAqBic,EAAoB,CAEpE,MAAMA,CAAkB,EACxB,KAAK,SAAW,KAChB,KAAK,aAAe,KACpB,KAAK,0BAA4BxO,EACjC,KAAK,4BAA8BzN,EACnC,MAAMkc,EAAW,CACb,CAAC,WAAYhoB,EAAWH,EAAU,wBAAwB,CAAC,EAC3D,CAAC,cAAeG,EAAWH,EAAU,4BAA4B,CAAC,EAClE,CAAC,eAAgBG,EAAWH,EAAU,6BAA6B,CAAC,CAChF,EACQ,UAAWooB,KAAQD,EAAU,CACzB,MAAME,EAAa,KAAK,kBAAkBD,EAAK,CAAC,CAAC,EAC7CC,GACAA,EAAW,aAAa,QAASD,EAAK,CAAC,CAAC,CAE/C,CACD,KAAK,sBAAwB,EAC7B,KAAK,mBAAqB,GAC1B,KAAK,WAAa,KAClB,KAAK,mBAAqB,IAAIE,GAC9B,KAAK,iBAAiBlC,EAAmC,gBAAiB,KAAK,gBAAiB,IAAI,EACpG,KAAK,iBAAiB,iBAAiE,KAAK,eAAgB,IAAI,EAChH,KAAK,0BAA0B,KAAK,oBAAoB,KAAK,IAAI,CAAC,CACrE,CACD,MAAM,cAAcmC,EAAWnZ,EAAY,CAC1C,CACD,cAAcvM,EAAM,CAChB,MAAM2lB,EAAkB,KAAK,WAAa,KAAK,WAAW,MAAO,EAAC,YAAa,EAAG,GAClF,MAAI,GAAAA,IAAoB3lB,aAAgBwkB,IAAwBxkB,aAAgB2jB,KAC5E3jB,EAAK,YAAY2lB,CAAe,EAIvC,CACD,mBAAoB,CAChB,OAAO,KAAK,yBACf,CACD,qBAAsB,CAClB,OAAO,KAAK,2BACf,CACD,YAAa,CACT,OAAO,KAAK,kBACf,CACD,cAAcC,EAAY,CACtB,KAAK,WAAaA,CACrB,CACD,sBAAuB,CACnB,MAAO,IACV,CACD,iBAAkB,CACd,MAAMtnB,EAAW,KAAK,gBACtB,QAASwD,EAAI,EAAG+e,EAAIviB,EAAS,OAAQwD,EAAI+e,EAAG,EAAE/e,EAC1CxD,EAASwD,CAAC,EAAE,SAEnB,CACD,UAAW,CACH,KAAK,aACL,KAAK,WAAW,iBAAiB,cAAgE,KAAK,oBAAqB,IAAI,EAC/H,KAAK,mBAAmB,EAAI,GAE5B,KAAK,oBACL,KAAK,yBAAyByhB,EAAmC,aAAc,IAAI,CAE1F,CACD,iBAAkB,CACd,KAAK,oBAAoBA,EAAmC,gBAAiB,KAAK,gBAAiB,IAAI,EACvG,KAAK,mBAAqB,GAC1B,KAAK,yBAAyBA,EAAmC,aAAc,IAAI,CACtF,CACD,UAAW,CACH,KAAK,YACL,KAAK,WAAW,oBAAoB,cAAgE,KAAK,oBAAqB,IAAI,CAEzI,CACD,oBAAoBzZ,EAAazL,EAAU,CACvC,MAAM2B,EAAO3B,EACb2B,EAAK,oBAAoB8J,EAAa,KAAK,4BAA6B,KAAK,kBAAiB,CAAE,EAC5F9J,aAAgBghB,IAAiChhB,EAAK,aACtD8J,EAAY,sBAAsB9J,EAAK,WAAW,CAEzD,CACD,mBAAoB,CAChB,OAAO,KAAK,iBACZ,OAAO,KAAK,iBACf,CACD,eAAgB,CACZ,OAAO,KAAK,SAAU,EAAC,QAC1B,CACD,6BAA6B6lB,EAAuB,CAChD,OAAO,QAAQ,QAAQ,IAAI,CAC9B,CACD,iBAAkB,CACV,KAAK,YACL,KAAK,WAAW,SAAS,EAAE,CAElC,CACD,qBAAsB,CAClB,KAAK,mBAAmB,EAAI,EAC5B,KAAK,sBAAqB,CAC7B,CACD,uBAAwB,CACpB,IAAIviB,EAAc,KAAK,aACvB,KAAOA,GAAa,CAChB,GAAI,KAAK,cAAgB,KAAK,cAAcA,CAAW,EAAG,CACtD,KAAK,aAAa,WAClB,KAAK,aAAe,KACpB,MACH,CACDA,EAAcA,EAAY,MAC7B,CACJ,CACD,WAAWwiB,EAAeC,EAAY,CAClC,MAAM,IAAI,MAAM,iBAAiB,CACpC,CACD,gBAAiB,CACb,MAAM5Q,EAAgB,KAAK,uBACrBC,EAAe,KAAK,eAC1B,GAAI,KAAK,mBAAqBA,GAAgB,KAAK,oBAAsBD,EACrE,OAEJ,KAAK,iBAAmBC,EACxB,KAAK,kBAAoBD,EACzB,MAAM6Q,EAAa,KAAK,WAAW5Q,GAAgB,GAAID,CAAa,EACpE,SAAS8Q,EAAgBC,EAAOC,EAAO,CAEnC,IAAIC,EAASF,EAAMF,EAAW,UAAU,EAEpCK,EAASF,EAAMH,EAAW,UAAU,EACpCxC,EAAS4C,EAASC,EAAS,GAAMD,EAASC,EAAS,EAAI,EAI3D,OAHKL,EAAW,aACZxC,EAAS,CAACA,GAEVA,IAAW,IAIf4C,EAASF,EAAMF,EAAW,UAAU,EAEpCK,EAASF,EAAMH,EAAW,UAAU,EACpCxC,EAAS4C,EAASC,EAAS,GAAMD,EAASC,EAAS,EAAI,EAClDL,EAAW,aACZxC,EAAS,CAACA,IAEPA,CACV,CACD,KAAK,eAAeyC,CAAe,CACtC,CACD,eAAeK,EAAc,CACzB,KAAK,sBAAqB,EAC1B,MAAMhoB,EAAW,KAAK,YAAY,KAAK,SAAU,CAAA,EACjD,KAAK,WAAW,iBAChBA,EAAS,KAAKgoB,CAAY,EAC1B,QAAS,EAAI,EAAGzF,EAAIviB,EAAS,OAAQ,EAAIuiB,EAAG,EAAE,EAAG,CAC7C,MAAMniB,EAAQJ,EAAS,CAAC,EACxB,KAAK,wBAAwBI,CAAK,EAC9BA,EAAM,WACDA,EAAM,MAElB,CACD,KAAK,sBAAqB,CAC7B,CACD,wBAAwBA,EAAO,CAC3B,MAAM6nB,EAAW7nB,EAAM,SACvB,KAAK,SAAQ,EAAG,YAAYA,CAAK,EACjCA,EAAM,SAAW6nB,CACpB,CACD,uBAAwB,CACpB,EAAE,KAAK,qBACV,CACD,uBAAwB,CACf,KAAK,wBAGN,EAAE,KAAK,wBAGX,KAAK,mBAAmB,EAAI,EAC5B,KAAK,yBAAyBhD,EAAmC,eAAe,GACnF,CACD,mBAAmBiD,EAAQ,CAC1B,CACD,YAAYlkB,EAAQ,CAChB,OAAOA,EAAO,QACjB,CACD,YAAYA,EAAQtC,EAAM5B,EAAO,CAC7BkE,EAAO,YAAYtC,EAAM5B,CAAK,CACjC,CACD,mBAAmBkE,EAAQlE,EAAO,CAC9BkE,EAAO,YAAYA,EAAO,SAASlE,CAAK,CAAC,CAC5C,CACD,kBAAkBkE,EAAQ,CACtBA,EAAO,eAAc,CACxB,CACD,MAAM,mBAAoB,CACtB,MAAM,IAAI,MAAM,iBAAiB,CACpC,CACL,CACO,IAAIihB,GACV,SAAUA,EAAoC,CAE3CA,EAAmC,aAAkB,eACrDA,EAAmC,gBAAqB,kBACxDA,EAAmC,wBAA6B,yBAEpE,GAAGA,IAAuCA,EAAqC,CAAE,EAAC,EAC3E,MAAMkD,WAAqCrB,EAA6B,CAC3E,iBACA,oBACA,aACA,wBACA,YAAYvO,EAAmBzN,EAAqBic,EAAoB,CACpE,MAAMxO,EAAmBzN,EAAqBic,CAAkB,EAChE,KAAK,gBAAgB,iBAAiB,SAAU,KAAK,SAAS,KAAK,IAAI,EAAG,EAAI,EAC9E,KAAK,iBAAmB,EACxB,KAAK,oBAAsB,EAC3B,KAAK,aAAe,IACvB,CACD,eAAgB,CACZ,OAAO,KAAK,YAAY,KAAK,SAAU,CAAA,CAC1C,CACD,wBAAwBqB,EAAQ,CAE/B,CACD,mBAAmB1oB,EAAO,CAItB,MAAM2oB,EAAe,KAAK,gBAAgB,aAC1C,IAAIC,EAAY,KAAK,gBAAgB,UACjCC,EAAeF,EAAeC,EAAY,KAAK,gBAAgB,aACnEA,EAAY,KAAK,IAAI,EAAGA,EAAY,EAAe,EACnDC,EAAe,KAAK,IAAI,EAAGA,EAAe,EAAe,EACzD,IAAIC,EAAiBH,EAAeC,EAAYC,EAEhD,GAAI,CAAC7oB,GAAS4oB,GAAa,KAAK,kBAAoBC,GAAgB,KAAK,oBACrE,OAEJ,MAAME,EAAmB,IACzBH,GAAaG,EACbD,GAAkB,EAAIC,EACtB,MAAM7R,EAAe,KAAK,aAC1B,KAAK,WAAW,iBAChB,KAAK,iBAAmB,EACxB,KAAK,oBAAsB,EAC3B,KAAK,gBAAgB,KAAK,SAAU,EAAE0R,EAAWA,EAAYE,CAAc,EAC3E,KAAK,mBAAmB,KAAK,iBAAkB,KAAK,mBAAmB,EACnE5R,IAEIA,EAAa,OACbA,EAAa,OAAO,EAAI,EAGxB,KAAK,aAAeA,EAG/B,CACD,gBAAgB4P,EAAYkC,EAAUC,EAAa,CAC/C,GAAI,CAACnC,EAAW,SACZ,MAAO,GAEX,MAAMxmB,EAAW,KAAK,YAAYwmB,CAAU,EAC5C,IAAIoC,EAAa,EAGbplB,EAAI,EACR,KAAOA,EAAIxD,EAAS,OAAQ,EAAEwD,EAAG,CAC7B,MAAMpD,EAAQJ,EAASwD,CAAC,EACxB,GAAI,KAAK,cAAcpD,CAAK,EACxB,SAEJ,MAAMyoB,EAASD,EAAa,KAAK,WAAWxoB,CAAK,EACjD,GAAIyoB,EAASH,EACT,MAEJE,EAAaC,CAChB,CAED,IAAI/K,EAAW8K,EACf,KAAOplB,EAAIxD,EAAS,QAAU8d,EAAW6K,EAAa,EAAEnlB,EAAG,CACvD,MAAMpD,EAAQJ,EAASwD,CAAC,EACxB,GAAI,KAAK,cAAcpD,CAAK,EACxB,SAEJ,MAAMd,EAAcc,EAAM,cAC1BA,EAAM,eAAc,EACpBA,EAAM,eAAed,CAAW,EAChCknB,EAAW,YAAYpmB,CAAK,EAC5B0d,GAAY1d,EAAM,iBAClB0d,GAAY,KAAK,gBAAgB1d,EAAOsoB,EAAW5K,EAAU6K,EAAc7K,CAAQ,CACtF,CAED,IAAIgL,EAAgB,EACpB,KAAOtlB,EAAIxD,EAAS,OAAQ,EAAEwD,EAAG,CAC7B,MAAMpD,EAAQJ,EAASwD,CAAC,EACpB,KAAK,cAAcpD,CAAK,IAG5B0oB,GAAiB,KAAK,WAAW1oB,CAAK,EACzC,CACD,YAAK,kBAAoBwoB,EACzB,KAAK,qBAAuBE,EACrBhL,EAAWgL,CACrB,CACD,WAAWpnB,EAAM,CACb,IAAIwjB,EAASxjB,EAAK,iBAClB,GAAI,CAACA,EAAK,SACN,OAAOwjB,EAEX,MAAMllB,EAAW,KAAK,YAAY0B,CAAI,EACtC,QAAS8B,EAAI,EAAGA,EAAIxD,EAAS,OAAQwD,IACjC0hB,GAAU,KAAK,WAAWllB,EAASwD,CAAC,CAAC,EAEzC,OAAO0hB,CACV,CACD,eAAe6D,EAAc,CACzB,MAAMrU,EAAS,KAAK,gBAAgBqU,CAAY,EAC1CrnB,EAAOqnB,EAAaA,EAAa,OAAS,CAAC,EAC3CT,EAAY,KAAK,gBAAgB,UACjCC,EAAeD,EAAY,KAAK,gBAAgB,aACtD,GAAI5T,GAAU4T,GAAa5T,EAAS6T,EAChC,OAAO,QAAQ,QAAQ7mB,CAAI,EAE/B,MAAMsnB,EAAY,GAClB,YAAK,gBAAgB,UAAY,KAAK,IAAI,EAAGtU,EAASsU,CAAS,EACxD,IAAI,QAAQ1qB,GAAW,CAC1B,QAAQ,OAAO,CAAC,KAAK,uBAAuB,EAC5C,KAAK,wBAA0BA,EAAQ,KAAK,KAAMoD,CAAI,EAEtD,KAAK,gBAAgB,OAAQ,EAAC,sBAAsB,IAAM,CACjD,KAAK,0BAGV,KAAK,wBAAuB,EAC5B,KAAK,wBAA0B,KAC/C,CAAa,CACb,CAAS,CACJ,CACD,gBAAgBqnB,EAAc,CAC1B,IAAIvC,EAAa,KAAK,WAClB9R,EAAS,EACb,GAAIqU,EAAa,SAAW,EACxB,MAAO,GAEX,QAASvlB,EAAI,EAAGA,EAAIulB,EAAa,OAAQ,EAAEvlB,EAAG,CAC1C,MAAM9B,EAAOqnB,EAAavlB,CAAC,EACrBxD,EAAW,KAAK,YAAYwmB,CAAU,EAC5C,QAASyC,EAAI,EAAGA,EAAIjpB,EAAS,OAAQ,EAAEipB,EAAG,CACtC,MAAM7oB,EAAQJ,EAASipB,CAAC,EACxB,GAAIvnB,IAAStB,EAAO,CAChBsU,GAAUhT,EAAK,iBACf,KACH,CACDgT,GAAU,KAAK,WAAWtU,CAAK,CAClC,CACDomB,EAAa9kB,CAChB,CACD,OAAOgT,EAASqU,EAAaA,EAAa,OAAS,CAAC,EAAE,gBACzD,CACD,YAAY/kB,EAAQ,CAChB,MAAMhE,EAAW4mB,GAAa,IAAI5iB,CAAM,GAAK,CAAA,EAC7C,OAAK4iB,GAAa,IAAI5iB,CAAM,GACxB4iB,GAAa,IAAI5iB,EAAQhE,CAAQ,EAE9BA,CACV,CACD,WAAWgE,EAAQtC,EAAM,CACrB,KAAK,YAAYsC,CAAM,EAAE,KAAKtC,CAAI,CACrC,CACD,YAAYsC,EAAQtC,EAAM5B,EAAO,CAC7B,KAAK,YAAYkE,CAAM,EAAE,OAAOlE,EAAO,EAAG4B,CAAI,CACjD,CACD,mBAAmBsC,EAAQlE,EAAO,CAC9B,KAAK,YAAYkE,CAAM,EAAE,OAAOlE,EAAO,CAAC,CAC3C,CACD,kBAAkBkE,EAAQ,CACtB4iB,GAAa,OAAO5iB,CAAM,CAC7B,CACD,qBAAsB,CAClB,KAAK,gBAAe,EACpB,KAAK,WAAW,iBAChB,KAAK,kBAAkB,KAAK,SAAU,CAAA,CACzC,CACD,mBAAmB2D,EAAS,CACxB,MAAMuhB,EAAc,KAAK,gBAAgB,UACnCC,EAAiBD,EAAc,KAAK,gBAAgB,aACpDE,EAAUzhB,EAAQ,UAExB,OADmByhB,EAAUzhB,EAAQ,cAChBwhB,GAAkBC,GAAWF,CACrD,CACD,UAAW,CACP,MAAM,SAAQ,EACd,KAAK,mBAAmB,EAAK,CAChC,CACD,SAASG,EAAQ,CACb,KAAK,mBAAmB,EAAK,EACzB,KAAK,0BACL,KAAK,wBAAuB,EAC5B,KAAK,wBAA0B,KAEtC,CACL,CACO,MAAMC,WAAwCxC,EAA6B,CAC9E,YAAYvO,EAAmBzN,EAAqBye,EAAa7Z,EAAS,CACtEA,EACIA,GAAW,CACP,CAAE,GAAI,SAAU,MAAO1Q,EAAWH,EAAU,MAAM,EAAG,WAAY,GAAM,SAAU,EAAM,EACvF,CAAE,GAAI,WAAY,MAAOG,EAAWH,EAAU,QAAQ,EAAG,MAAO,OAAQ,SAAU,GAAM,WAAY,EAAM,EAC1G,CACI,GAAI,cACJ,MAAOG,EAAWH,EAAU,WAAW,EACvC,MAAO,QACP,SAAU,GACV,WAAY,EACf,EACD,CACI,GAAI,eACJ,MAAOG,EAAWH,EAAU,YAAY,EACxC,MAAO,QACP,SAAU,GACV,WAAY,GACZ,KAAMqW,EAAwB,UACjC,CACjB,EACQ,MAAM6R,EAAqB,CAAE,YAAAwC,EAAa,QAAA7Z,GAC1C,MAAM6I,EAAmBzN,EAAqBic,CAAkB,CACnE,CACD,MAAM,cAAcpE,EAAUlE,EAAW+K,EAAQ,CAC7C,KAAK,SAAW7G,EAChB,MAAMjhB,EAAO,IAAI+nB,GAAyCD,GAAU,GAAI,OAAQ,EAAG/K,GAAakE,EAAS,cAAe,EAAG,EAAG,EAAE,EAChI,KAAK,YAAY,KAAK,eAAeA,EAAUjhB,CAAI,CAAC,EAC/C,KAAK,WAAW,MACxB,CACD,eAAeihB,EAAUjhB,EAAM,CAC3B,MAAMgoB,EAAW,IAAIC,GAAyC,GAAIjoB,EAAM,GAAI,EAAE,EAC9E,OAAO,IAAI2iB,GAAuB,KAAM1B,EAAU+G,EAAU,IAAI,CACnE,CACD,gBAAiB,CACb,MAAME,EAAW,KAAK,WAClBA,EAAS,eACJA,EAAS,MAErB,CACL,CACO,MAAMC,WAAuCP,EAAgC,CAChF,qBACA,YAAY/Q,EAAmBzN,EAAqB,CAChD,MAAM4E,EAAU,CACZ,CAAE,GAAI,SAAU,MAAO1Q,EAAWH,EAAU,MAAM,EAAG,WAAY,GAAM,SAAU,EAAM,EACvF,CACI,GAAI,WACJ,MAAOG,EAAWH,EAAU,QAAQ,EACpC,MAAO,OACP,SAAU,GACV,WAAY,GACZ,KAAMqW,EAAwB,SACjC,EACD,CAAE,GAAI,cAAe,MAAOlW,EAAWH,EAAU,WAAW,EAAG,MAAO,QAAS,SAAU,GAAM,WAAY,EAAM,EACjH,CAAE,GAAI,eAAgB,MAAOG,EAAWH,EAAU,YAAY,EAAG,MAAO,QAAS,SAAU,GAAM,WAAY,EAAM,CAC/H,EACQ,MAAM0Z,EAAmBzN,EAAqB9L,EAAWH,EAAU,sBAAsB,EAAG6Q,CAAO,CACtG,CACD,eAAeiT,EAAUjhB,EAAM,CAC3B,MAAMgoB,EAAW,IAAIC,GAAyC,GAAIjoB,EAAM,GAAI,EAAE,EAC9E,OAAO,IAAIgjB,GAAgC,KAAM/B,EAAU+G,EAAU,IAAI,CAC5E,CACD,WAAWI,EAAYjT,EAAe,CAClC,OAAQiT,EAAU,CACd,IAAK,SACD,OAAO,IAAItF,EAAqD,OAAQ3N,EAAe,QAAS,EAAK,EACzG,IAAK,QACD,OAAO,IAAI2N,EAAqD,QAAS3N,EAAe,OAAQ,EAAI,EACxG,IAAK,cACD,OAAO,IAAI2N,EAAqD,cAAe3N,EAAe,OAAQ,EAAI,EAC9G,IAAK,eACD,OAAO,IAAI2N,EAAqD,eAAgB3N,EAAe,OAAQ,EAAI,EAC/G,IAAK,WACD,OAAO,IAAI2N,EAAqD,WAAY3N,EAAe,OAAQ,EAAI,EAC3G,QACI,MAAM,IAAI,MAAM,kBAAkBiT,CAAU,EAAE,CACrD,CACJ,CACD,OAAQ,CACJ,KAAK,WAAW,iBAChB,KAAK,kBAAiB,CACzB,CACD,6BAA8B,CACrB,KAAK,UAAU,+BAA8B,EAAG,KAAK9oB,GAAS,CAC/D,KAAK,sBAAsB,WAAWA,CAAK,CACvD,CAAS,CACJ,CACD,MAAM,cAAc2hB,EAAUlE,EAAW+K,EAAQ,CAC7C,MAAM,MAAM,cAAc7G,EAAUlE,EAAW+K,CAAM,EACrD,KAAK,WAAW,SAChB,KAAK,4BAA2B,CACnC,CACD,MAAM,mBAAoB,CACtB,KAAK,MAAK,EACV,MAAM,KAAK,WAAW,OACtB,KAAK,WAAW,SAChB,KAAK,4BAA2B,CACnC,CACL,CAEO,IAAIO,IACV,SAAUA,EAAsC,CAE7CA,EAAqC,wBAA6B,yBAEtE,GAAGA,KAAyCA,GAAuC,CAAE,EAAC,EAC/E,MAAMC,WAAyC7B,EAA6B,CAC/E,aACA,iBACA,oBACA,WACA,iBACA,YAAY5P,EAAmBzN,EAAqB,CAChD,MAAM4E,EAAU,CACZ,CAAE,GAAI,SAAU,MAAO1Q,EAAWH,EAAU,iBAAiB,EAAG,WAAY,GAAM,SAAU,EAAM,EAClG,CAAE,GAAI,WAAY,MAAOG,EAAWH,EAAU,QAAQ,EAAG,MAAO,OAAQ,SAAU,GAAM,WAAY,EAAM,EAC1G,CAAE,GAAI,cAAe,MAAOG,EAAWH,EAAU,WAAW,EAAG,MAAO,QAAS,SAAU,GAAM,WAAY,EAAM,EACjH,CACI,GAAI,eACJ,MAAOG,EAAWH,EAAU,YAAY,EACxC,MAAO,QACP,KAAMqW,EAAwB,WAC9B,SAAU,GACV,WAAY,EACf,CACb,EACQ,MAAMqD,EAAmBzN,EAAqB,CAAE,YAAa9L,EAAWH,EAAU,wBAAwB,EAAE,WAAY,QAAA6Q,CAAS,CAAA,EAEjI,KAAK,aAAe,GACpB,KAAK,iBAAmB,KACxB,KAAK,oBAAsB,IAC9B,CACD,WAAWoa,EAAYjT,EAAe,CAClC,OAAQiT,EAAU,CACd,IAAK,SACD,OAAO,IAAItF,EAAqD,OAAQ3N,EAAe,eAAgB,EAAK,EAChH,IAAK,WACD,OAAO,IAAI2N,EAAqD,WAAY3N,EAAe,eAAgB,EAAK,EACpH,IAAK,cACD,OAAO,IAAI2N,EAAqD,cAAe3N,EAAe,OAAQ,EAAI,EAC9G,IAAK,eACD,OAAO,IAAI2N,EAAqD,eAAgB3N,EAAe,OAAQ,EAAI,EAC/G,QACI,MAAM,IAAI,MAAM,kBAAkBiT,CAAU,EAAE,CACrD,CACJ,CACD,MAAM,6BAA6B9jB,EAAI,CACnC,GAAI,CAAC,KAAK,SACN,YAAK,iBAAmBA,EACjB,KAEX,MAAM+E,EAAY,MAAM,KAAK,SAAS,cAAc,SAAS/E,EAAI,EAAE,CAAC,EACpE,GAAI,CAAC+E,EACD,OAAO,KAEX,MAAM/G,EAAS,KAAK,gBAAgB,KAAKimB,GAAaA,EAAU,OAASlf,CAAS,EAClF,GAAI,CAAC/G,EACD,OAAO,KAEX,MAAMwM,EAAQ,MAAMxM,EAAO,+BAA+B,SAASgC,EAAI,EAAE,CAAC,EAC1E,OAAOwK,EAAM,OAAS,KAAK,eAAeA,CAAK,EAAI,IACtD,CACD,OAAQ,CACJ,KAAK,oBAAsB,KAC3B,KAAK,WAAa,KAClB,KAAK,oBAAmB,CAC3B,CACD,MAAM,cAAcmS,EAAU1U,EAAY,CACtC,KAAK,SAAW0U,EACZ,KAAK,eAAiB,IACjB,KAAK,mBAEV,KAAK,mBACA,KAAK,6BAA6B,KAAK,gBAAgB,EAC5D,KAAK,iBAAmB,KAE/B,CACD,kBAAkBnD,EAAWC,EAAW,CACpC,KAAK,mBAAqB,IAAI0H,GAA+C3H,EAAWC,CAAS,EAC5F,KAAK,iBAAiB,KAAK,kBAAkB,CACrD,CACD,oBAAoByK,EAAkB,CAClC,KAAK,mBAAqB,IAAI/C,GAC9B,KAAK,mBAAmB,iBAAmB+C,EACtC,KAAK,iBAAiB,KAAK,kBAAkB,CACrD,CACD,mBAAmB3E,EAAY4E,EAAY,CACvC,KAAK,iBAAmB,KACpB,KAAK,qBAAuB,KAAK,WAC5B,KAAK,SAAS,qBAAqB,KAAK,mBAAmB,EAC3D,KAAK,KAAK,mBAAmB,KAAK,KAAM,KAAK,mBAAmB,CAAC,EACtE,KAAK,iBAAmB,KAAK,oBAC7B,KAAK,oBAAsB,MAE/B,KAAK,oBAAmB,EACxB,KAAK,kBAAiB,EACtB,UAAWC,KAAeD,EACtB,KAAK,WAAW,KAAK,SAAQ,EAAI,IAAI9E,GAA4B,KAAM+E,EAAaD,EAAWC,CAAW,EAAG7E,CAAU,CAAC,EAE5H,KAAK,eAAc,EACnB,KAAK,WAAaA,CACrB,CACD,MAAM,iBAAiB8E,EAAiB,CACpC,MAAM9E,EAAa8E,GAAmB,IAAIlD,GAC1C,GAAI,KAAK,iBAAkB,CACvB,KAAK,oBAAsB,KAAK,iBAAiB,OAAO5B,CAAU,EAAI,KAAOA,EAC7E,MACH,CACD,GAAI,OAAK,YAAc,KAAK,WAAW,OAAOA,CAAU,KAGxD,KAAK,iBAAmBA,EACpB,KAAK,UAAU,CACf,MAAM4E,EAAa,MAAM,KAAK,SAAS,qBAAqB5E,CAAU,EACtE,KAAK,mBAAmBA,EAAY4E,CAAU,CACjD,CACJ,CACD,yBAAyBxc,EAAU2c,EAAcC,EAAY,CAGzD,GAFA,KAAK,aAAeD,EACpB,KAAK,mBAAqB,OACtBA,IAAiB,GAAI,CACrB,MAAM9K,EAAY8K,EAAe,EAAI3c,EAAS2c,EAAe,CAAC,EAAE,cAAgB,EAC1E7K,EAAY9R,EAAS2c,CAAY,EAAE,cACzC,KAAK,mBAAqB,IAAInD,GAA+C3H,EAAWC,CAAS,CACpG,MACQ8K,IAAe,SACpB,KAAK,mBAAqB,IAAIpD,GAC9B,KAAK,mBAAmB,WAAaoD,GAEpC,KAAK,iBAAiB,KAAK,kBAAkB,CACrD,CACL,CACO,MAAMC,WAAiCrC,EAA6B,CACvE,aACA,YAAY5P,EAAmBzN,EAAqB,CAChD,MAAM4E,EAAU,CACZ,CAAE,GAAI,SAAU,MAAO1Q,EAAWH,EAAU,iBAAiB,EAAG,WAAY,GAAM,SAAU,EAAM,EAClG,CAAE,GAAI,aAAc,MAAOG,EAAWH,EAAU,GAAG,EAAG,MAAO,OAAQ,SAAU,GAAM,WAAY,EAAM,EACvG,CAAE,GAAI,eAAgB,MAAOG,EAAWH,EAAU,OAAO,EAAG,MAAO,OAAQ,SAAU,GAAM,WAAY,EAAM,EAC7G,CAAE,GAAI,aAAc,MAAOG,EAAWH,EAAU,KAAK,EAAG,MAAO,OAAQ,SAAU,GAAM,WAAY,EAAM,EACzG,CACI,GAAI,YACJ,MAAOG,EAAWH,EAAU,SAAS,EACrC,MAAO,OACP,SAAU,GACV,WAAY,GACZ,KAAMqW,EAAwB,UACjC,EACD,CAAE,GAAI,cAAe,MAAOlW,EAAWH,EAAU,SAAS,EAAG,MAAO,OAAQ,SAAU,GAAM,WAAY,EAAM,EAC9G,CAAE,GAAI,YAAa,MAAOG,EAAWH,EAAU,SAAS,EAAG,MAAO,OAAQ,SAAU,GAAM,WAAY,EAAM,CACxH,EACQ,MAAM0Z,EAAmBzN,EAAqB,CAAE,YAAa9L,EAAWH,EAAU,gBAAgB,EAAE,WAAY,QAAA6Q,CAAS,CAAA,CAC5H,CACD,sBAAuB,CACnB,MAAO,GACV,CACD,WAAWoa,EAAYjT,EAAe,CAClC,OAAQiT,EAAU,CACd,IAAK,SACD,OAAO,IAAItF,EAAqD,OAAQ3N,EAAe,QAAS,EAAK,EACzG,IAAK,aACD,OAAO,IAAI2N,EAAqD,aAAc3N,EAAe,OAAQ,EAAI,EAC7G,IAAK,eACD,OAAO,IAAI2N,EAAqD,eAAgB3N,EAAe,OAAQ,EAAI,EAC/G,IAAK,aACD,OAAO,IAAI2N,EAAqD,aAAc3N,EAAe,OAAQ,EAAI,EAC7G,IAAK,YACD,OAAO,IAAI2N,EAAqD,YAAa3N,EAAe,OAAQ,EAAI,EAC5G,IAAK,cACD,OAAO,IAAI2N,EAAqD,cAAe3N,EAAe,OAAQ,EAAI,EAC9G,IAAK,YACD,OAAO,IAAI2N,EAAqD,YAAa3N,EAAe,OAAQ,EAAI,EAC5G,QACI,MAAM,IAAI,MAAM,kBAAkBiT,CAAU,EAAE,CACrD,CACJ,CACD,MAAM,cAAcnH,EAAU1U,EAAY,CACtC,KAAK,SAAW0U,CACnB,CACD,kBAAkB8H,EAAc,CAI5B,GAHA,KAAK,aAAeA,EACpB,KAAK,oBAAmB,EACxB,KAAK,kBAAiB,EAClB,KAAK,eAAiB,KAAK,SAAU,CACrC,KAAK,yBAAyBxF,EAAmC,eAAe,EAChF,MACH,CACI,KAAK,kBACb,CACD,MAAM,kBAAmB,CACrB,GAAI,KAAK,WAAa,MAAQ,KAAK,eAAiB,QAAa,KAAK,aAAa,MAAQ,OACvF,MAAM,IAAI,MAAM,0CAA0C,EAK9D,MAAMyF,EAAuB,MAAM,KAAK,SAAS,qBAAoB,EAC/DC,EAAoB,MAAM,KAAK,aAAa,kBAAkBD,CAAoB,EAClFE,EAAkB,MAAM,KAAK,SAAS,sBAAsB,KAAK,aAAa,IAAKD,CAAiB,EAC1G,UAAW5f,KAAa6f,EAAiB,CACrC,MAAMC,EAAOD,EAAgB7f,CAAS,EACtC,KAAK,WAAW,KAAK,SAAU,EAAE,IAAImb,GAAqB,KAAMnb,EAAW8f,CAAI,CAAC,CACnF,CACD,KAAK,eAAc,CACtB,CACL,CACO,MAAMC,WAA2B3C,EAA6B,CACjE,kBACA,SACA,YAAY5P,EAAmBzN,EAAqB,CAChD,MAAM4E,EAAU,CACZ,CAAE,GAAI,YAAa,MAAO1Q,EAAWH,EAAU,SAAS,EAAG,MAAO,OAAQ,SAAU,GAAM,WAAY,EAAM,EAC5G,CAAE,GAAI,QAAS,MAAOG,EAAWH,EAAU,KAAK,EAAG,MAAO,OAAQ,SAAU,GAAM,WAAY,EAAM,EACpG,CAAE,GAAI,WAAY,MAAOG,EAAWH,EAAU,QAAQ,EAAG,MAAO,OAAQ,SAAU,GAAM,WAAY,EAAM,EAC1G,CACI,GAAI,OACJ,MAAOG,EAAWH,EAAU,IAAI,EAChC,MAAO,OACP,SAAU,GACV,WAAY,GACZ,KAAMqW,EAAwB,UACjC,EACD,CAAE,GAAI,OAAQ,MAAOlW,EAAWH,EAAU,QAAQ,EAAG,WAAY,GAAM,SAAU,EAAM,CACnG,EACQ,MAAM0Z,EAAmBzN,EAAqB,CAAE,YAAa9L,EAAWH,EAAU,UAAU,EAAE,WAAY,QAAA6Q,CAAS,CAAA,EAEnH,KAAK,kBAAoB,IAAI2F,EAChC,CACD,IAAI,WAAY,CACZ,OAAO,KAAK,iBACf,CACD,SAAU,CACN,KAAK,kBAAkB,OAC1B,CACD,MAAM,cAAcsN,EAAU1U,EAAY,CACtC,KAAK,SAAW0U,EAChB,KAAK,SAAW,MAAM,KAAK,SAAS,qBAAoB,EACxD,KAAK,iBAAgB,CACxB,CACD,kBAAmB,CACf,KAAK,oBAAmB,EACxB,MAAM7F,EAAO,KAAK,WACZiO,EAAO,KAAK,UAAY,GAC9B,UAAWC,KAAOD,EACd,KAAK,WAAWjO,EAAM,IAAIuJ,GAAmB,KAAM2E,CAAG,CAAC,EAE3D,KAAK,mBAAmB,EAAI,CAC/B,CACD,gBAAiB,CACT,KAAK,WAAa,SAClB,KAAK,SAAS,KAAK,KAAK,iBAAkB,CAAA,EAC1C,KAAK,WAAW,iBAChB,KAAK,iBAAgB,EAE5B,CACD,kBAAmB,CACf,MAAMC,EAAY,KAAK,eACjBC,EAAiB,KAAK,UAAW,IAAKhW,EAAwB,UAAa,EAAK,GACtF,SAASiW,EAAQC,EAAGC,EAAG,CAEnB,OAAID,EAAEH,CAAS,EAAII,EAAEJ,CAAS,EACnBC,EAGPE,EAAEH,CAAS,EAAII,EAAEJ,CAAS,EACnB,CAACC,EAEL,CACV,CACD,OAAOC,CACV,CACL,yaCj4BMtsB,GAAY,CAKd,iCAAkC,iEACtC,EACMC,GAAOC,EAA4B,uCAAwCF,EAAS,EACpFG,GAAaC,EAA6B,KAAK,OAAWH,EAAI,EAC7D,MAAMwsB,WAAgChmB,EAAmC,CAG5E,aACA,aACA,WAGA,UACA,kBACA,OACA,SAGA,YAAYimB,EAAc,CACtB,QACA,KAAK,aAAeA,EACpB,KAAK,aAAe,EACpB,KAAK,WAAa,EAClB,KAAK,UAAY,IAAI,IACrB,KAAK,kBAAoB,IAAI,IAC7B,KAAK,OAASC,GAA4B,QAAQ,IAAqG,IAAA,+uBAAA,YAAA,GAAA,CAAA,EACvJ,KAAK,OAAO,UAAY,KAAK,gBAAgB,KAAK,IAAI,CACzD,CACD,aAAaC,EAAYC,EAA0B,CAC/C,MAAM1T,EAAW,KAAK,eAChB2T,EAAQ,IAAIC,GAAwB,KAAM5T,EAAUyT,EAAYC,CAAwB,EAC9F,YAAK,YAAY,CACb,OAAQ,KAAK,aACb,YAAa,eACb,SAAA1T,CACZ,CAAS,EACM2T,CACV,CACD,SAAU,CACN,KAAK,OAAO,YACR,KAAK,UACL,cAAc,KAAK,QAAQ,CAElC,CACD,cAAc3T,EAAU,CACpB,KAAK,YAAY,CAAE,OAAQ,KAAK,aAAc,YAAa,UAAW,SAAAA,CAAQ,CAAE,CACnF,CACD,gBAAgB5B,EAAQiD,EAAU,CAC9B,MAAMwS,EAAS,KAAK,aACpB,KAAK,UAAU,IAAIA,EAAQxS,CAAQ,EACnC,KAAK,YAAY,CAAE,OAAAwS,EAAQ,YAAa,kBAAmB,OAAQzV,CAAM,CAAE,CAC9E,CACD,kBAAkBiD,EAAUrB,EAAU8T,EAAYC,KAAqBC,EAAiB,CACpF,MAAMH,EAAS,KAAK,aACdI,EAAc,KAAK,eACzB,OAAI5S,GACA,KAAK,UAAU,IAAIwS,EAAQK,GAAgB,CACvC7S,EAAS6S,EAAe,IAAIH,EAAiB,KAAME,CAAW,EAAI,IAAI,CACtF,CAAa,EACD,KAAK,YAAY,CACb,OAAAJ,EACA,YAAa,UACb,SAAA7T,EACA,WAAA8T,EACA,gBAAAE,EACA,YAAAC,CAChB,CAAa,EACM,OAEX,KAAK,YAAY,CACb,OAAAJ,EACA,YAAa,UACb,SAAA7T,EACA,WAAA8T,EACA,gBAAAE,EACA,YAAAC,CACZ,CAAS,EACM,IAAIF,EAAiB,KAAME,CAAW,EAChD,CACD,WAAW5S,EAAUrB,EAAU8T,KAAeE,EAAiB,CAC3D,MAAMH,EAAS,KAAK,aAChBxS,GACA,KAAK,UAAU,IAAIwS,EAAQxS,CAAQ,EAEvC,KAAK,YAAY,CACb,OAAAwS,EACA,YAAa,SACb,SAAA7T,EACA,WAAA8T,EACA,gBAAAE,CACZ,CAAS,CACJ,CACD,kCAAmC,CAC3B,KAAK,WAGT,KAAK,sBAAqB,EAC1B,KAAK,SAAW,OAAO,YAAY,KAAK,sBAAsB,KAAK,IAAI,EAAG,GAAG,EAChF,CACD,uBAAwB,CACpB,UAAWH,KAAU,KAAK,kBACjB,KAAK,UAAU,IAAIA,CAAM,GAC1B,KAAK,kBAAkB,OAAOA,CAAM,EAG5C,MAAMM,EAAsB,EAAQ,KAAK,kBAAkB,KAC3D,KAAK,yBAAyB,OAAkDA,CAAmB,EACnG,UAAWN,KAAU,KAAK,UAAU,KAAI,EACpC,KAAK,kBAAkB,IAAIA,CAAM,CAExC,CAGD,gBAAgBzkB,EAAO,CACnB,MAAMqQ,EAAOrQ,EAAM,KACnB,GAAIqQ,EAAK,UAAW,CACZ,KAAK,cACL,KAAK,aAAaA,EAAK,UAAWA,EAAK,IAAI,EAE/C,MACH,CACD,GAAIA,EAAK,MAAO,CACRA,EAAK,iBACLtZ,EAAuB,SAAQ,EAAG,MAAMa,GAAWH,GAAU,iCAAkC,CAAE,IAAK4Y,EAAK,eAAe,CAAE,CAAC,EAEjItZ,EAAuB,SAAQ,EAAG,MAAMsZ,EAAK,cAAiB,EAC9D,KAAK,UAAU,OAAOA,EAAK,MAAM,EACjC,MACH,CACD,MAAM4B,EAAW,KAAK,UAAU,IAAI5B,EAAK,MAAM,EAC1C4B,IAGL,KAAK,UAAU,OAAO5B,EAAK,MAAM,EACjC4B,EAAS5B,EAAK,MAAM,EACvB,CAGD,YAAY2U,EAAS,CACjB,KAAK,OAAO,YAAYA,CAAO,CAClC,CACL,CACO,MAAMC,EAAwB,CACjC,OACA,SACA,YAAYC,EAAQtU,EAAU,CAC1B,KAAK,OAASsU,EACd,KAAK,SAAWtU,CACnB,CACD,SAAU,CACN,KAAK,OAAO,cAAc,KAAK,QAAQ,CAC1C,CACD,eAAgB,CACZ,KAAK,OAAO,SACf,CACD,kBAAkB8T,EAAYC,KAAqBQ,EAAM,CACrD,OAAO,KAAK,OAAO,kBAAkB,KAAM,OAAO,KAAK,QAAQ,EAAGT,EAAYC,EAAkB,GAAGQ,CAAI,CAC1G,CACD,yBAAyBT,EAAYC,KAAqBQ,EAAM,CAC5D,OAAO,IAAI,QAAQjuB,GAAW,KAAK,OAAO,kBAAkBA,EAAS,OAAO,KAAK,QAAQ,EAAGwtB,EAAYC,EAAkB,GAAGQ,CAAI,CAAC,CACrI,CACD,kBAAkBT,KAAeS,EAAM,CACnC,OAAO,IAAI,QAAQjuB,GAAW,KAAK,OAAO,WAAWA,EAAS,OAAO,KAAK,QAAQ,EAAGwtB,EAAY,GAAGS,CAAI,CAAC,CAC5G,CACL,CACO,MAAMX,WAAgCS,EAAwB,CACjE,WACA,yBACA,YAAYC,EAAQtU,EAAUyT,EAAYC,EAA0B,CAChE,MAAMY,EAAQtU,CAAQ,EACtB,KAAK,WAAayT,EAClB,KAAK,yBAA2BC,CACnC,CACD,MAAM,MAAMc,EAAO,CACf,MAAM,KAAK,kBAAkB,QAASA,CAAK,CAC9C,CACD,MAAM,OAAQ,CACV,MAAM,KAAK,kBAAkB,OAAO,EACpC,MAAMC,EAAgB,MAAM,KAAK,yBAAyB,gBAAiBC,EAAiB,EAC5F,KAAK,QAAO,EAGZD,EAAc,cAAc,KAAK,UAAU,EAC3C,MAAMA,EAAc,mBACpB,KAAK,yBAAyBA,CAAa,CAC9C,CACL,CACO,MAAMC,WAA0BL,EAAwB,CAC3D,WACA,WACA,YAAYC,EAAQtU,EAAU,CAC1B,MAAMsU,EAAQtU,CAAQ,EACtB,KAAK,WAAa,IACrB,CACD,OAAO1V,EAAcqqB,EAAQ,CACzB,OAAO,KAAK,kBAAkB,SAAUrqB,EAAcqqB,CAAM,CAC/D,CACD,sBAAuB,CACnB,OAAO,KAAK,kBAAkB,sBAAsB,CACvD,CACD,qBAAqBA,EAAQ,CACzB,OAAO,KAAK,kBAAkB,uBAAwBA,CAAM,CAC/D,CACD,kBAAkBjC,EAAsB,CACpC,OAAO,KAAK,kBAAkB,oBAAqBA,CAAoB,CAC1E,CACD,sBAAsBkC,EAAgBC,EAAwB,CAC1D,OAAO,KAAK,kBAAkB,wBAAyBD,EAAgBC,CAAsB,CAChG,CACD,cAAcrH,EAAkB,CAC5B,OAAO,KAAK,kBAAkB,gBAAiBA,CAAgB,CAClE,CACD,oBAAoB/G,EAAW,CAC3B,OAAO,KAAK,kBAAkB,sBAAuBqO,GAA2BrO,CAAS,CAC5F,CACD,6BAA6BA,EAAW,CACpC,OAAO,KAAK,kBAAkB,+BAAgCqO,GAA2BrO,CAAS,CACrG,CACD,yBAAyBmO,EAAgB7hB,EAAW,CAChD,OAAO,KAAK,kBAAkB,2BAA4B+hB,GAA2BF,EAAgB7hB,CAAS,CACjH,CACD,2BAA2BgiB,EAAa,CACpC,OAAO,KAAK,kBAAkB,6BAA8BD,GAA2BC,CAAW,CACrG,CACD,oBAAoBJ,EAAQ,CACxB,OAAO,KAAK,kBAAkB,sBAAuBG,GAA2BH,CAAM,CACzF,CACD,4BAA4B5hB,EAAWwa,EAAY,CAC/C,OAAO,KAAK,kBAAkB,8BAA+BuH,GAA2B/hB,EAAWwa,CAAU,CAChH,CACD,sBAAuB,CACnB,OAAO,KAAK,kBAAkB,sBAAsB,CACvD,CACD,sBAAsBiE,EAAQ,CAC1B,OAAO,KAAK,kBAAkB,wBAAyBA,CAAM,CAChE,CACD,gBAAgB/K,EAAW,CACvB,OAAO,KAAK,kBAAkB,kBAAmBA,CAAS,CAC7D,CACD,SAAU,CACN,MAAM,IAAI,MAAM,wBAAwB,CAC3C,CACD,IAAI,WAAY,CACZ,OAAK,KAAK,WAGH,KAAK,WAAW,UAFZ,CAGd,CACD,IAAI,eAAgB,CAChB,OAAK,KAAK,WAGH,KAAK,WAAW,cAFZ,CAGd,CACD,MAAM,kBAAmB,CACrB,KAAK,WAAa,MAAM,KAAK,kBAAkB,kBAAkB,CACpE,CACD,eAAgB,CACZ,OAAO,KAAK,kBAAkB,eAAe,CAChD,CACD,YAAYA,EAAW,CACnB,OAAO,KAAK,kBAAkB,cAAeA,CAAS,CACzD,CACD,YAAa,CACT,OAAO,KAAK,kBAAkB,YAAY,CAC7C,CACD,0BAA0BA,EAAW,CACjC,OAAO,KAAK,kBAAkB,4BAA6BA,CAAS,CACvE,CACD,4BAA4BA,EAAW,CACnC,OAAO,KAAK,kBAAkB,8BAA+BA,CAAS,CACzE,CACD,iCAAkC,CAC9B,OAAO,KAAK,kBAAkB,iCAAiC,CAClE,CACD,gCAAiC,CAC7B,OAAO,KAAK,kBAAkB,gCAAgC,CACjE,CACD,IAAI,WAAY,CACZ,OAAK,KAAK,WAGH,KAAK,WAAW,UAFZ,CAGd,CACD,IAAI,KAAM,CACN,OAAO,KAAK,UACf,CACD,cAAcgN,EAAY,CACtB,KAAK,WAAaA,CACrB,CACD,eAAgB,CACZ,OAAK,KAAK,WAGH,KAAK,WAAW,cAFZ,CAGd,CACL,CACO,MAAMqB,WAAkCT,EAAwB,CACnE,YAAYC,EAAQtU,EAAU,CAC1B,MAAMsU,EAAQtU,CAAQ,CACzB,CACD,aAAawN,EAAkB,CAC3B,OAAO,KAAK,kBAAkB,eAAgBA,CAAgB,CACjE,CACD,SAAU,CACN,OAAO,KAAK,kBAAkB,SAAS,CAC1C,CACD,oBAAoBpG,EAAeC,EAAa,CAC5C,OAAO,KAAK,kBAAkB,sBAAuBD,EAAeC,CAAW,CAClF,CACD,MAAM,cAAc5f,EAAY,CAC5B,MAAM,KAAK,kBAAkB,gBAAiBA,CAAU,CAC3D,CACL,wOC1VaZ,GAAY,CAIrB,oBAAqB,yBAIrB,kBAAmB,sBAInB,oBAAqB,yBAKrB,qBAAsB,0BAItB,qBAAsB,yBAItB,wBAAyB,6BAIzB,yBAA0B,8BAI1B,uBAAwB,4BAKxB,uBAAwB,4BAIxB,sBAAuB,0BAIvB,mBAAoB,uBAIpB,kBAAmB,sBAInB,mBAAoB,uBAIpB,6BAA8B,kCAI9B,KAAM,OAIN,mBAAoB,uBAIpB,eAAgB,mBAIhB,oBAAqB,yBAKrB,cAAe,wBAKf,cAAe,wBAKf,yBAA0B,oCAI1B,eAAgB,mBAIhB,iBAAkB,qBAIlB,eAAgB,kBACpB,ECtDMA,EAAY,CAId,KAAM,OAIN,YAAa,cAIb,UAAW,YAIX,gBAAiB,mBAIjB,YAAa,cAIb,aAAc,gBAId,OAAQ,SAIR,cAAe,kBAIf,KAAM,OAIN,QAAS,UAIT,SAAU,YAIV,YAAa,eAIb,cAAe,iBAKf,cAAe,uBAIf,WAAY,cAKZ,wBAAyB,iCAMzB,6BAA8B,4CAK9B,kBAAmB,qBAKnB,kCAAmC,yCAKnC,yBAA0B,uCAI1B,QAAS,UAIT,WAAY,aAIZ,WAAY,aAIZ,YAAa,eAIb,WAAY,aAIZ,aAAc,gBAId,iBAAkB,qBAIlB,cAAe,iBAIf,+BAAgC,0EAMhC,gBAAiB,wCAIjB,aAAc,gBAKd,UAAW,iBAKX,sBAAuB,SAIvB,4BAA6B,0BAI7B,yBAA0B,8BAI1B,0BAA2B,+BAO3B,4BAA6B,0CAI7B,UAAW,aAIX,oBAAqB,uBAIrB,oCAAqC,4HAIrC,QAAS,WAKT,QAAS,iBAIT,gBAAiB,oBAIjB,iCAAkC,6GAKlC,wBAAyB,2BAC7B,EACMC,GAAOC,EAA4B,sCAAuCF,CAAS,EACnFG,EAAaC,EAA6B,KAAK,OAAWH,EAAI,EAK9DkuB,GAAejuB,EAA4B,qCAAsCkuB,EAAyB,EAC1GC,GAAmBjuB,EAA6B,KAAK,OAAW+tB,EAAY,EAC3E,MAAMG,WAAyBnY,EAAmB,CACrD,cACA,QACA,UACA,0BACA,uBACA,YACA,oBACA,kBACA,eACA,qBACA,mBACA,aACA,WACA,mBACA,iBACA,oBACA,WACA,mBACA,iBACA,kBACA,aACA,sBACA,kBACA,WACA,aACA,gBACA,iBACA,qBACA,cACA,wBACA,mBACA,SACA,gBACA,YACA,qBACA,yBAA2B,GAC3B,aACA,YAAYlK,EAAqB3E,EAAS,CACtC,MAAMnH,EAAWH,EAAU,YAAY,CAAC,EACxC,KAAK,cAAgB,GACrB,KAAK,QAAQ,UAAU,IAAI,oBAAoB,EAC/C,KAAK,QAAUsH,EACf,KAAK,UAAY,IAAIkP,GACrB,MAAM9P,EAAcY,EAAQ,cAC5BZ,EAAY,iBAAiB,mBAA0E,KAAK,kBAAmB,IAAI,EACnIA,EAAY,iBAAiB,wBAAuE,KAAK,uBAAwB,IAAI,EACrI,MAAM6nB,EAAiB7nB,EAAY,KAAO8nB,GAAgC,OACtED,GACA,KAAK,eAAc,EAEvB,MAAME,EAAsBC,GAAS,gCAAgC,8BAA+B,EAAC,IAAG,EACxG,KAAK,0BAA4BziB,EACjC,KAAK,uBAAyB,IAAImK,GAAiC,KAAM,IAAI,EAC7E,KAAK,uBAAuB,eAAejW,EAAWH,EAAU,IAAI,EAAGG,EAAWH,EAAU,IAAI,CAAC,EACjG,KAAK,uBAAuB,KAAK,KAAK,OAAO,EAC7C,KAAK,YAAc,IAAI2uB,GAA2B,GAAO,GAAM,iCAAkC,IAAK,GAAG,EACzG,KAAK,YAAY,KAAK,KAAK,uBAAuB,OAAO,EACzD,MAAMjV,EAAoBpS,EAAQ,oBAClC,KAAK,oBAAsB,IAAImjB,GAAgC/Q,EAAmB,KAAwBvZ,EAAWH,EAAU,WAAW,CAAC,EAC3I,KAAK,oBAAoB,iBAAiB,eAA6D,KAAK,iBAAkB,IAAI,EAClI,KAAK,kBAAoB,KAAK,oBAAoB,SAAQ,EAC1D,KAAK,kBAAkB,eAAe,GAAI,EAAE,EAC5C,KAAK,eAAiB,IAAI4uB,GAC1B,KAAK,qBAAuB,IAAIzD,GAAiCzR,EAAmB,IAAI,EACxF,KAAK,qBAAqB,iBAAiB,eAA6D,KAAK,iBAAkB,IAAI,EACnI,KAAK,mBAAqB,KAAK,qBAAqB,SAAQ,EAC5D,KAAK,mBAAmB,eAAe,GAAI,EAAE,EAC7C,KAAK,mBAAmB,QAAQ,aAAa,QAAS,GAAGmV,GAAmB,iCAAiC,EAAE,MAAM,CAAE,OAAQ,EAAI,CAAE,CAAC,EAAE,EACxI,KAAK,aAAe,IAAIlD,GAAyBjS,EAAmB,IAAI,EACxE,KAAK,aAAa,iBAAiB,eAA6D,KAAK,iBAAkB,IAAI,EAC3H,KAAK,WAAa,KAAK,aAAa,SAAQ,EAC5C,KAAK,WAAW,eAAe,GAAI,EAAE,EACrC,KAAK,mBAAqB,KACtB6U,GAAkBE,IAClB,KAAK,mBAAqB,IAAIxC,GAAmBvS,EAAmB,IAAI,EACxE,KAAK,mBAAmB,iBAAiB,eAA6D,KAAK,uBAAwB,IAAI,EACvI,KAAK,iBAAmB,KAAK,mBAAmB,SAAQ,EACxD,KAAK,iBAAiB,eAAe,GAAI,EAAE,EAC3C,KAAK,oBAAsB,IAAIoV,GAAwBpV,CAAiB,EACxE,KAAK,oBAAoB,eAAe,GAAI,EAAE,EAC9C,KAAK,WAAa,IAAIqV,IAE1B,KAAK,mBAAqB,IAAI/D,GAA+BtR,EAAmB,IAAI,EACpF,KAAK,iBAAmB,KAAK,mBAAmB,SAAQ,EACxD,KAAK,iBAAiB,eAAe,GAAI,EAAE,EAC3C,KAAK,iBAAiB,QAAQ,UAAU,IAAI,sBAAsB,EAClE,KAAK,iBAAiB,QAAQ,aAAa,QAAS,GAAGmV,GAAmB,oCAAoC,EAAE,MAAM,CAAE,OAAQ,EAAI,CAAE,CAAC,EAAE,EACzI,IAAIG,EACJ,GAAI,KAAK,oBACL,KAAK,WAAa,IAAID,GACtB,KAAK,WAAW,UAAU,YAAa5uB,EAAWH,EAAU,SAAS,EAAG,KAAK,gBAAgB,EAC7F,KAAK,WAAW,UAAU,mBAAoBG,EAAWH,EAAU,eAAe,EAAG,KAAK,mBAAmB,EAC7GgvB,EAAqB,KAAK,WAAW,gBACrC,KAAK,kBAAoB,KAAK,eAE7B,CACD,MAAMC,EAAuB,SAAS,cAAc,KAAK,EACzDA,EAAqB,UAAU,IAAI,4BAA4B,EAC/D,MAAMC,EAAyBD,EAAqB,YAAY,MAAO,OAAO,EAC9EA,EAAqB,YAAY,MAAO,qBAAqB,EAC7D,MAAME,EAAsBD,EAAuB,YAAY,MAAM,EACrEC,EAAoB,YAAchvB,EAAWH,EAAU,SAAS,EAChEgvB,EAAqBC,EACrB,KAAK,kBAAoB,IAAIrnB,EAC7B,KAAK,kBAAkB,QAAQ,YAAYqnB,CAAoB,EAC/D,KAAK,iBAAiB,KAAK,KAAK,kBAAkB,OAAO,CAC5D,CACD,KAAK,YAAY,qBACjB,KAAK,YAAY,eAAeD,CAAkB,EAClD,KAAK,mBAAmB,iBAAiB,eAA6D,KAAK,uBAAwB,IAAI,EACvI,KAAK,mBAAmB,QACxB,KAAK,aAAe,GACpB,KAAK,sBAAwB,IAAII,GACjC,KAAK,aAAa,KAAK,IAAIC,EAAoB,EAC3C/nB,EAAQ,gBAAkBonB,GAAS,iCACnC,KAAK,aAAa,KAAK,KAAK,qBAAqB,EAErD,KAAK,aAAa,KAAK,IAAIY,EAAwB,EAC/C,KAAK,kBACL,KAAK,aAAa,KAAK,IAAIC,EAAuB,EAEtD,KAAK,aAAa,KAAK,IAAIC,EAAuB,EAClD,KAAK,kBAAoB,IAAIlZ,GAA2B,KAAK,6BAA6B,KAAK,IAAI,EAAGnW,EAAWH,EAAU,WAAW,EAAG,OAAW,oCAAoC,EACxL,KAAK,yBAAwB,EAC7B,KAAK,WAAa,IAAIsW,GAA2B,KAAK,WAAW,KAAK,IAAI,EAAGnW,EAAWH,EAAU,YAAY,EAAG,OAAW,6BAA6B,EACzJ,KAAK,WAAW,WAAW,EAAK,EAChC,KAAK,kBAAiB,EACtB,KAAK,aAAe,IAAIsW,GAA2B,KAAK,aAAa,KAAK,IAAI,EAAGnW,EAAWH,EAAU,MAAM,EAAG,OAAW,+BAA+B,EACzJ,KAAK,aAAa,WAAW,EAAK,EAClC,KAAK,oBAAmB,EACxB,KAAK,gBAAkB,IAAIyvB,GAAyBtvB,EAAWH,EAAU,aAAa,CAAC,EACvF,KAAK,gBAAgB,WAAW,EAAK,EACrC,KAAK,qBAAqB,cAAc,KAAK,eAAe,EAC5D,KAAK,aAAa,cAAc,KAAK,eAAe,EACpD,KAAK,iBAAmB,IAAIkZ,GAC5B,MAAMwW,EAA0BvvB,EAAWH,EAAU,uBAAuB,EAC5E,KAAK,qBACD,IAAIuW,GAAyBmZ,EAAyB,aAAcA,CAAuB,EAC/F,KAAK,qBAAqB,WAAW,EAAK,EAC1C,KAAK,qBAAqB,iBAAiB,QAAqD,SAAY,CAExG,MAAM,KAAK,mBAAmB,UAAU,gCAA+B,EACvE,MAAM,KAAK,mBAAmB,mBAC1C,CAAS,EACD,KAAK,mBAAmB,qBAAuB,KAAK,qBACpD,KAAK,cAAgB,IAAIC,GAA+B,KAAK,QAAS,KAAK,kBAAkB,KAAK,IAAI,EAAG,+BAA+B,EACxI,KAAK,cAAc,kBAAkB,EAAI,EACzC,KAAK,cAAc,cAAc,EAAI,EACrC,KAAK,QAAQ,iBAAiB,SAAU,KAAK,cAAc,YAAY,KAAK,KAAK,aAAa,EAAG,EAAI,EACrG,KAAK,wBAA0B,EAC/B,KAAK,mBAAqB,KAAK,aAAa,CAAC,EAC7C,KAAK,mBAAmB,SAAS,IAAI,EACrC,KAAK,SAAW,KAAK,mBAAmB,WAAW,IAAI,EAClD,KAAK,WACV,KAAK,gBAAkB,IAAIC,GAA2B,CAAC,EACvD,UAAWC,KAAmB,KAAK,WAC/BA,EAAgB,iBAAiB,sBAAuE,KAAK,eAAgB,IAAI,CAExI,CACD,gBAAiB,CACb,MAAMnpB,EAAc,KAAK,QAAQ,YAAW,EAC5C,KAAK,qBAAuB,IAAIkT,GAChC,KAAK,qBAAqB,iBAAiB,kBAAkD,KAAK,kBAAkB,KAAK,IAAI,CAAC,EAC1H,CAAC,KAAK,QAAQ,SAAQ,GAAMlT,EAAY,qBAAoB,IAAO,KAAK,UACxEA,EACK,iBAAiB,kBAAiF,KAAK,kBAAmB,IAAI,EACnIA,EACK,iBAAiB,kBAAgF,KAAK,eAAgB,IAAI,EAC/H,KAAK,qBAAqB,QAEjC,CACD,gBAAiB,CACb,MAAMA,EAAc,KAAK,QAAQ,YAAW,EAC5CA,EAAY,oBAAoB,kBAAiF,KAAK,kBAAmB,IAAI,EAC7IA,EAAY,oBAAoB,kBAAgF,KAAK,eAAgB,IAAI,EACrI,KAAK,sBACL,KAAK,qBAAqB,MAEjC,CACD,kBAAkB,CAAE,KAAMuT,GAAW,CAC7B,KAAK,sBACL,KAAK,qBAAqB,WAAWA,CAAO,CAEnD,CACD,gBAAiB,CACb,OAAO,KAAK,sBACf,CACD,YAAY3S,EAAS,CACjB,OAAO,KAAK,0BAA0B,YAAYA,CAAO,CAC5D,CACD,WAAWqf,EAAkBvN,EAAiB,CACtC,OAAOuN,CAAgB,GAAK,KAAK,QAAQ,cACpC,KAAK,iBAAiBvN,EAAiBuN,CAAgB,EAG5D,KAAK,0BAA0B,WAAWA,EAAkBvN,CAAe,CAElF,CACD,MAAM,cAAcwG,EAAW,CAC3B,MAAMlG,EAAoB,KAAK,QAAQ,kBAAiB,EAExD,GAAI,CAACA,EACD,OAAO,KAEX,MAAMlC,EAAW,MAAM,KAAK,QAAQ,YAAYoI,CAAS,EACzD,GAAI,CAACpI,EACD,OAAO,KAGX,MAAMsY,EADgBpW,EAAkB,aAAc,EAAC,cAAa,EAClC,4BAA4B,OAAOlC,EAAS,QAAQ,EAAGA,EAAS,WAAYA,EAAS,YAAY,EACnI,GAAI,CAACsY,EACD,OAAO,KAEX,MAAMvY,EAASuY,EAAY,SACrBC,EAAYxY,GAAUA,EAAO,UACnC,OAAOwY,GAAa,KAAK,UAAY,KAAK,UAAU,mBAAmBD,EAAaC,CAAS,EAAI,IACpG,CACD,MAAM,UAAW,CACb,MAAMC,EAAoB,MAAM,KAAK,QAAQ,YAK7C,GAJK,KAAK,mBAAmBA,CAAiB,EAC1C,KAAK,UACA,KAAK,SAAS,cAAcA,EAAmB,CAAC,EAErD,KAAK,QAAQ,YAAW,EAAG,KAAOxB,GAAgC,QAAU,KAAK,QAAQ,WAAY,CACrG,MAAMvU,EAAU,MAAM+V,EAAkB,aACxC,GAAI/V,EAAS,CACT,QAAQ,OAAO,EAAQA,EAAQ,WAAW,MAAO,EACjD,MAAMC,EAAiB,IAAIH,GAC3BG,EAAe,MAAQD,EAAQ,MAC/BC,EAAe,IAAMD,EAAQ,gBAC7BC,EAAe,WAAaD,EAAQ,WACpCC,EAAe,IAAMD,EAAQ,MAC7BC,EAAe,UAAY,KAAK,IAAID,EAAQ,WAAWA,EAAQ,WAAW,OAAS,CAAC,GAAK,EAAG,GAAK,EAC7F,KAAK,sBACL,KAAK,qBAAqB,WAAWC,CAAc,CAE1D,CACJ,CAED,MAAMuR,EADO,KAAK,WACQ,QAAQ,KAAK,OAAO,EAC9C,KAAK,WAAW,iBAAiB,KAAK,IAAI,EAAGA,EAAe,CAAC,CAAC,EAC1D,KAAK,sBACL,KAAK,qBAAqB,YAEjC,CACD,MAAM,mBAAmBuE,EAAmB,CACxC,MAAMC,EAAa,MAAMD,EAAkB,gBACrCE,EAAU,CACZ,CAAE,MAAOD,EAAW,KAAM,MAAO,OAAQ,MAAO9vB,EAAWH,EAAU,IAAI,CAAG,EAC5E,CAAE,MAAOiwB,EAAW,QAAS,MAAO,OAAQ,MAAO9vB,EAAWH,EAAU,OAAO,CAAG,EAClF,CAAE,MAAOiwB,EAAW,SAAU,MAAO,OAAQ,MAAO9vB,EAAWH,EAAU,QAAQ,CAAG,EACpF,CAAE,MAAOiwB,EAAW,OAAQ,MAAO,OAAQ,MAAO9vB,EAAWH,EAAU,WAAW,CAAG,EACrF,CAAE,MAAOiwB,EAAW,OAAQ,MAAO,OAAQ,MAAO9vB,EAAWH,EAAU,aAAa,CAAG,CACnG,EACQ,YAAK,eAAe,mBAAmBiwB,EAAW,MAAOC,CAAO,EACzDD,CACV,CACD,kBAAkB1nB,EAAO,CACrB,KAAM,CAAE,MAAAqT,EAAO,MAAAC,GAAUtT,EAAM,KAC/B,KAAK,iBAAiB,QAAQpI,EAAWH,EAAU,cAAe,CAAE,IAAK4I,EAAuCL,EAAM,KAAK,IAAI,CAAC,CAAE,CAAC,EAC/H,KAAK,qBAAqB,UAC1B,KAAK,qBAAqB,kBAAkBqT,EAAOC,CAAK,CAE/D,CACD,MAAM,cAAe,CACjB,MAAMwK,EAAS,CAAC,KAAK,kBAAmB,KAAK,eAAe,EAC5D,OAAI,KAAK,QAAQ,YAAW,IAAOqI,GAAS,iCACxCrI,EAAO,KAAK,KAAK,WAAY,KAAK,YAAY,EAElDA,EAAO,KAAK,KAAK,gBAAgB,EACjCA,EAAO,KAAK,KAAK,oBAAoB,EAC9BA,CACV,CACD,UAAW,CACP,KAAK,yBAA2B,GAChC,KAAK,cAAc,aACtB,CACD,6BAA8B,CAC1B,MAAO,EACV,CACD,qBAAsB,CAClB,MAAO,EACV,CACD,kBAAmB,CACf,KAAK,yBAA2B,GAChC,KAAK,cAAgB,EACxB,CACD,mBAAmBxjB,EAAM,CACjBA,GACAA,EAAK,OAAM,CAElB,CACD,cAAcY,EAAca,EAAYC,EAAe,CACnD,MAAM4rB,EAAY,IAAIC,GAAiD3sB,EAAa,MAAM,KAAM,EAAEA,EAAa,cAAeA,EAAa,QAASa,EAAYC,GAAiB,EAAK,EACjL,KAAK,gBAAgB,SAAS,KAAK,sBAAsB,KAAK,KAAM4rB,CAAS,CAAC,CACtF,CACD,MAAM,sBAAsBA,EAAW,CAGnC,GADA,KAAK,iBAAgB,EACjB,CAAC,KAAK,mBAAmB,iBACzB,OAEJ,KAAK,aAAeA,EACpB,MAAMzsB,EAAQysB,EAAU,MAAM,KAAI,EAClC,GAAI,CAACzsB,EACD,OAEJ,GAAIA,EAAM,OAAO,CAAC,IAAM,IAAK,CACzB,MAAM0hB,EAAiB,SAAS1hB,EAAM,UAAU,CAAC,EAAG,EAAE,EAItD,GAHI,MAAM0hB,CAAc,GAGpB,CAAC,KAAK,SACN,OAEJ,MAAMviB,EAAO,MAAM,KAAK,SAAS,6BAA6B,OAAOuiB,CAAc,CAAC,EACpF,KAAK,mBAAmBviB,CAAI,EAC5B,MACH,CACD,GAAI,CAAC,KAAK,QAAQ,eAAiB,CAAC,KAAK,SACrC,OAEJ,MAAMirB,EAAS,KAAK,SAAS,WAAU,EACvC,KAAK,cAAgBA,EAAS,MAAM,KAAK,QAAQ,cAAc,OAAO,KAAK,aAAcA,CAAM,EAAI,CAAA,EACnG,KAAK,uBAAuB,yBAAyB,KAAK,cAAc,MAAM,EAC1E,KAAK,cAAc,SACnB,KAAK,yBAA2BqC,EAAU,aAAe,KAAK,cAAc,OAAS,EAAI,GAE7F,MAAM,KAAK,mBAAmB,KAAK,wBAAwB,CAC9D,CACD,wBAAyB,CAChB,KAAK,cAAc,SAGxB,KAAK,0BAA4B,KAAK,yBAA2B,GAAK,KAAK,cAAc,OACpF,KAAK,gBAAgB,SAAS,KAAK,mBAAmB,KAAK,KAAM,KAAK,wBAAwB,CAAC,EACvG,CACD,4BAA6B,CACpB,KAAK,cAAc,SAGxB,KAAK,0BACA,KAAK,yBAA2B,KAAK,cAAc,OAAS,GAAK,KAAK,cAAc,OACpF,KAAK,gBAAgB,SAAS,KAAK,mBAAmB,KAAK,KAAM,KAAK,wBAAwB,CAAC,EACvG,CACD,MAAM,mBAAmBE,EAAmB,CAKxC,GAJA,KAAK,uBAAuB,wBAAwBA,CAAiB,EACjEA,IAAsB,IAGtB,CAAC,KAAK,SACN,OAEJ,MAAMxtB,EAAO,MAAM,KAAK,SAAS,6BAA6B,OAAO,KAAK,cAAcwtB,CAAiB,CAAC,CAAC,EAC3G,KAAK,mBAAmBxtB,CAAI,CAC/B,CACD,oBAAqB,CACjB,GAAI,CAAC,KAAK,SACN,OAEJ,IAAItB,EAAQ,KAAK,SAAS,SAAQ,EAAG,SAAS,CAAC,EAC/C,KAAOA,GACHA,EAAM,QAAO,EACbA,EAAQA,EAAM,iBAAiB,GAAO,KAAM,EAAI,CAEvD,CACD,YAAa,CACT,GAAI,KAAK,cAAgB,KAAK,SAAU,EAAC,KAAK,WAAW,cAAa,CAAE,EACpE,OAEJ,KAAK,YAAc,KAAK,SAAQ,EAAG,KAAK,WAAW,cAAa,CAAE,EAClE,MAAM0gB,EAAW,KAAK,SAElBA,EAAS,UACJ,KAAK,YAAY,YAAY,KAAKA,EAAS,kBAAkB,KAAKA,CAAQ,CAAC,EAEhF,GAAC,KAAK,cAAgB,CAAC,KAAK,gBAMhC,KAAK,cAAc,KAAK,aAAc,EAAK,CAC9C,CACD,OAAO,yBAA2B,CAC9B,CAAE,OAAQ9hB,EAAWH,EAAU,iBAAiB,EAAG,WAAY,mBAAqB,EACpF,CAAE,OAAQG,EAAWH,EAAU,iCAAiC,EAAG,WAAY,mCAAqC,EACpH,CAAE,OAAQG,EAAWH,EAAU,wBAAwB,EAAG,WAAY,0BAA4B,CAC1G,EACI,cAAe,CACX,IAAIswB,EAAgB,KAAK,aAAa,cAAa,EAC/C5E,EACJ,MAAM6E,EAAoC,KAAK,aAAa,KAAI,EAAKjC,GAAiB,yBAAyB,OAC3GgC,GAAiBC,IACjB7E,EACI4C,GAAiB,yBAAyBgC,EAAgBC,CAAiC,EAAE,WACjGD,EAAgB,GAEpB,MAAM7E,EAAe6E,EAAgB,EAChC,KAAK,WAGV,KAAK,SACA,yBAAyB,KAAK,SAAU,EAAE7E,EAAcC,CAAU,EACnE,GAAC,KAAK,cAAgB,CAAC,KAAK,gBAMhC,KAAK,cAAc,KAAK,aAAc,EAAK,EAC9C,CACD,UAAW,CACP,OAAO,KAAK,QAAQ,YAAa,EAAC,YAAW,CAChD,CACD,iBAAiBnjB,EAAO,CACpB,MAAMwP,EAAexP,EAAM,KAC3B,KAAK,8BAA8BwP,CAAY,EAC/C,KAAK,uBAAuBxP,CAAK,CACpC,CACD,uBAAuBA,EAAO,CAC1B,MAAMwP,EAAexP,EAAM,KAC3B,KAAK,qBAAqB,oBAAoBwP,EAAa,iBAAkB,CAAA,EAC7E,KAAK,8BAA8B,IAAI,CAC1C,CACD,uBAAuBxP,EAAO,CAC1B,MAAMwP,EAAexP,EAAM,KACrBmR,EAAoB,KAAK,QAAQ,kBAAiB,EACpDA,GAAqB3B,aAAwB8L,IACxCnK,EAAkB,uBAAuB,OAAO3B,EAAa,cAAc,CAAC,CAExF,CACD,8BAA8ByY,EAAU,CACpC,MAAMC,EAAaD,GAAYA,EAAS,oBAAmB,EACvDC,GACK,KAAK,mBAAmB,cAAcA,EAAW,SAAUA,EAAW,kBAAmBA,EAAW,cAAc,EACnH,KAAK,qBACA,KAAK,oBAAoB,mBAAmBA,EAAW,SAAUA,EAAW,iBAAiB,IAIlG,KAAK,qBACL,KAAK,oBAAoB,QAE7B,KAAK,mBAAmB,QAE/B,CACD,MAAM,yBAAyBC,EAAkB,CAC7C,MAAMC,EAAmB,KAAK,aAAa,UAAUC,GAAeA,EAAY,UAAYF,CAAgB,EAC5G,GAAIC,IAAqB,IAAM,KAAK,0BAA4BA,EAC5D,OAEJ,MAAM1O,EAAW,KAAK,aAAa0O,CAAgB,EAAE,WAAW,IAAI,EACpE,GAAI,CAAC1O,EACD,OAEJ,MAAM4O,EAAU5O,EAAS,KAAKmE,EAAmC,YAAY,EACvEjP,EAAS,KAAK,kBAAkB,QAAO,EAAG,KAAKA,GAAUA,EAAO,QAAU,OAAOwZ,CAAgB,CAAC,EACxG,KAAK,kBAAkB,OAAOxZ,CAAM,EACpC,KAAK,kBAAkBwZ,CAAgB,EACvC,MAAME,CACT,CACD,MAAM,yBAA0B,CAC5B,MAAM5O,EAAW,KAAK,SACtB,GAAI,CAACA,GAAYA,EAAS,SACtB,OAEJ,MAAM2L,EAAgB,MAAM,KAAK,QAAQ,YAOzC,GANI,KAAK,WAAa3L,IAGlBA,EAAS,WAAa2L,GACjB3L,EAAS,cAAc2L,EAAe,CAAC,EAE5C3L,IAAa,KAAK,cAClB,OAEC,KAAK,cACN,KAAK,YAAc,KAAK,SAAQ,EAAG,KAAK,WAAW,cAAa,CAAE,GAEtE,MAAM6O,EAAoB,MAAM,KAAK,YAAY,YAC7C,KAAK,aAAa,eAAiBA,GACnC,KAAK,aAAa,kBAAkBA,CAAiB,CAE5D,CACD,6BAA6BvoB,EAAO,CAChC,KAAK,kBAAkB,OAAOA,EAAM,OAAO,gBAAgB,CAAC,EAAE,KAAK,CAAC,CACvE,CACD,kBAAkB+nB,EAAe,CAC7B,GAAIA,IAAkB,KAAK,wBACvB,OAEJ,KAAK,wBAA0BA,EAC/B,KAAK,mBAAmB,WAAW,IAAI,EACvC,MAAMM,EAAc,KAAK,aAAaN,CAAa,EACnD,KAAK,mBAAqBM,EAC1B,KAAK,SAAWA,EAAY,WAAW,IAAI,EAC3CA,EAAY,SAAS,IAAI,EACzB,KAAK,mBAAkB,EACnB,KAAK,UACL,KAAK,SAAS,eAEb,KAAK,0BACN,GAAC,KAAK,cAAgB,CAAC,KAAK,gBAMhC,KAAK,cAAc,KAAK,aAAc,EAAK,CAC9C,CACD,MAAM,iBAAiBxX,EAAiBuN,EAAkB,CAEtD,GADA,MAAM,KAAK,yBAAyBvN,CAAe,EAC/C,CAAC,KAAK,SACN,OAEJ,MAAMvW,EAAO,MAAM,KAAK,SAAS,6BAA6B8jB,CAAgB,EAC1E9jB,EACAA,EAAK,OAAM,EAGXvD,EAAuB,SAAQ,EAAG,MAAM,8CAA8C,CAE7F,CACD,kBAAkBiJ,EAAO,CACrB,MAAMwoB,EAAOC,GAA2CzoB,EAAM,OAAQ,MAAM,EACtEsO,EAAMma,GAA2CzoB,EAAM,OAAQ,IAAI,EAIzE,GAHI,CAACsO,GAGD,CAAC,KAAK,SACN,OAAO,KAEX,MAAMhU,EAAO,KAAK,SAAS,qBAAqBgU,CAAG,GAAK,KAAK,oBAAoB,qBAAqBA,CAAG,GACrG,KAAK,qBAAqB,qBAAqBA,CAAG,GAAK,KAAK,aAAa,qBAAqBA,CAAG,GAChG,KAAK,oBAAsB,KAAK,mBAAmB,qBAAqBA,CAAG,GAC5E,KAAK,mBAAmB,qBAAqBA,CAAG,EAC9C6C,EAAoB,KAAK,QAAQ,kBAAiB,EACxD,GAAI,CAAC7W,GAAQ,CAACkuB,GAAQ,CAACrX,EACnB,OAAO,KAEX,IAAIuX,EACJ,MAAO,CAGH,IAAKF,EAAK,YAAa,EACvB,KAAM,MAAOG,GAAY,CACrB,GAAI,CAACxX,EACD,MAAO,GAEX,MAAM2L,EAAe,MAAMxiB,EAAK,mBAAmB6W,EAAmB,SAAS,EAQ/E,OAPI2L,aAAwB8L,GACxBF,EACI,MAAMG,GAAiD,mBAAmB/L,EAAc6L,CAAO,EAGnGD,EAAsBG,GAAiD,wBAAwB/L,EAAa,YAAaA,EAAa,KAAM6L,CAAO,EAElJD,EAIE,IAHHvX,EAAkB,aAAY,EAAG,mBAAmB,SAAS,EACtD,GAGd,EACD,KAAM,IAAM,CACRA,EAAkB,aAAY,EAAG,mBAAmB,SAAS,EACzDuX,GACAA,EAAoB,QAAO,CAElC,CACb,CACK,CACD,0BAA2B,CACvB,MAAMI,EAAoB,KAAK,SAAQ,EAAG,OAAS,EACnD,KAAK,kBAAkB,gBACvB,KAAK,aAAa,QAAQ,CAACT,EAAa3vB,IAAU,CAC9C,GAAIowB,GAAqBT,IAAgB,KAAK,sBAAuB,CACjE,MAAMzZ,EAAS,KAAK,kBAAkB,aAAayZ,EAAY,QAAS,OAAO3vB,CAAK,CAAC,EACjF2vB,IAAgB,KAAK,oBACrB,KAAK,kBAAkB,OAAOzZ,CAAM,CAE3C,CACb,CAAS,CACJ,CACD,mBAAoB,CAChB,MAAMma,EAAO,KAAK,WACZhB,EAAgB,KAAK,WAAW,cAAa,EACnD,KAAK,WAAW,gBAChB,UAAW5rB,KAAQ4sB,EACf,KAAK,WAAW,aAAa5sB,EAAK,KAAK,EAEvC4rB,EAAgB,IAChB,KAAK,WAAW,iBAAiBA,CAAa,CAErD,CACD,qBAAsB,CAClB,MAAMgB,EAAO,KAAK,WACZhB,EAAgB,KAAK,aAAa,cAAa,EAC/CiB,EAAe,KAAK,aAAa,KAAI,EAC3C,KAAK,aAAa,gBAClB,KAAK,aAAa,aAAapxB,EAAWH,EAAU,UAAU,CAAC,EAC/D,QAAS2E,EAAI,EAAGA,EAAI2sB,EAAK,OAAQ,EAAE3sB,EAAG,CAClC,IAAIgC,EACChC,EAIDgC,EAAQxG,EAAWH,EAAU,6BAA8B,CAAE,IAAKsxB,EAAK3sB,EAAI,CAAC,EAAE,MAAO,IAAK2sB,EAAK3sB,CAAC,EAAE,KAAK,CAAE,EAHzGgC,EAAQxG,EAAWH,EAAU,wBAAyB,CAAE,IAAKsxB,EAAK3sB,CAAC,EAAE,KAAK,CAAE,EAKhF,KAAK,aAAa,aAAagC,CAAK,CACvC,CAED,MAAM6qB,EAAe,KAAK,aAAa,KAAI,EACrCC,EAAU,KAAK,aAAa,aAAa,IAAS,OAAO,EAAE,CAAC,EAClEA,EAAQ,SAAW,GACnB,UAAW3D,KAAUQ,GAAiB,yBAClC,KAAK,aAAa,aAAaR,EAAO,MAAM,EAEhD,MAAM4D,EAAU,KAAK,aAAa,KAAI,EACtC,GAAIpB,EAAgB,GAAI,CACpB,MAAMqB,EAAkBJ,EAAejB,EACnCqB,GAAmBrD,GAAiB,yBAAyB,OAG7D,KAAK,aAAa,iBAAiBoD,EAAUC,CAAe,EAEvDrB,GAAiBkB,EAGtB,KAAK,aAAa,iBAAiB,EAAE,EAGrC,KAAK,aAAa,iBAAiBlB,CAAa,CAEvD,CACJ,CACD,gBAAiB,CACb,KAAK,yBAAwB,EAC7B,KAAK,kBAAiB,EACtB,KAAK,oBAAmB,CAC3B,CACD,kBAAkB/nB,EAAO,CACrB,KAAK,eAAc,EACHA,EAAM,KACd,iBAAiB,sBAAuE,KAAK,eAAgB,IAAI,CAC5H,CACD,uBAAuBA,EAAO,CAC1B,MAAMjB,EAAUiB,EAAM,KACtBjB,EAAQ,oBAAoB,sBAAuE,KAAK,eAAgB,IAAI,EACxH,KAAK,UAAYA,GACjB,KAAK,OAAM,EACX,KAAK,QAAQ,cAAc,oBAAoB,mBAA0E,KAAK,kBAAmB,IAAI,EACrJ,KAAK,QAAQ,cAAc,oBAAoB,wBAAuE,KAAK,uBAAwB,IAAI,EACvJ,KAAK,QAAO,GAGZ,KAAK,eAAc,CAE1B,CACD,SAAU,CACN,KAAK,UAAU,UACf,KAAK,cAAc,UACf,KAAK,sBACL,KAAK,oBAAoB,QACrB,KAAK,oBACL,KAAK,mBAAmB,WAGhC,KAAK,eAAc,EACf,KAAK,sBACL,KAAK,qBAAqB,oBAAoB,kBAAkD,KAAK,kBAAkB,KAAK,IAAI,CAAC,CAExI,CACL,CACO,MAAMsqB,EAAY,CACrB,cACA,YAAYjrB,EAAO,CACf,KAAK,cAAgBA,CACxB,CACD,SAASkrB,EAAmB,CAC3B,CACD,WAAWC,EAAkB,CACzBA,EAAiB,WAAW,WAAW,EAAK,EAC5CA,EAAiB,aAAa,WAAW,EAAK,EAC9CA,EAAiB,gBAAgB,WAAW,EAAK,EAC7CA,EAAiB,sBACjBA,EAAiB,qBAAqB,SAEtCA,EAAiB,kBACjBA,EAAiB,iBAAiB,SAElCA,EAAiB,gBACjBA,EAAiB,eAAe,SAEpCA,EAAiB,YAAY,SAC7BA,EAAiB,YAAY,oBAChC,CACD,WAAWD,EAAmB,CAC1B,OAAO,IACV,CACD,OAAQ,CACJ,OAAO,KAAK,aACf,CACD,gBAAiB,CACb,MAAO,EACV,CACL,CACO,MAAMxC,WAA2BuC,EAAY,CAChD,aAAc,CACV,MAAMzxB,EAAWH,EAAU,OAAO,CAAC,CACtC,CACD,SAAS8xB,EAAkB,CACvBA,EAAiB,YAAY,cAAcA,EAAiB,kBAAkB,EAC9EA,EAAiB,YAAY,iBAAiBA,EAAiB,iBAAiB,EAChFA,EAAiB,YAAY,KAAKA,EAAiB,uBAAuB,OAAO,EACjFA,EAAiB,aAAa,WAAW,EAAI,EAC7CA,EAAiB,gBAAgB,WAAW,EAAI,EAC3CA,EAAiB,uBAGtBA,EAAiB,qBAAqB,KAAKA,EAAiB,uBAAuB,QAASA,EAAiB,YAAY,OAAO,EAChIA,EAAiB,qBAAqB,SACtCA,EAAiB,qBAAqB,aACzC,CACD,WAAWA,EAAkB,CACzB,OAAOA,EAAiB,oBAC3B,CACD,gBAAiB,CACb,MAAO,EACV,CACL,CACO,MAAM1C,WAA8BwC,EAAY,CACnD,aAAc,CACV,MAAMzxB,EAAWH,EAAU,UAAU,CAAC,CACzC,CACD,SAAS8xB,EAAkB,CACvBA,EAAiB,YAAY,cAAcA,EAAiB,UAAU,EACtEA,EAAiB,YAAY,iBAAiBA,EAAiB,iBAAiB,EAChFA,EAAiB,YAAY,KAAKA,EAAiB,uBAAuB,OAAO,EACjFA,EAAiB,WAAW,WAAW,EAAI,EAC3CA,EAAiB,gBAAgB,WAAW,EAAI,CACnD,CACD,WAAWA,EAAkB,CACzB,OAAOA,EAAiB,YAC3B,CACD,gBAAiB,CACb,MAAO,EACV,CACL,CACO,MAAMxC,WAA+BsC,EAAY,CACpD,aAAc,CACV,MAAMzxB,EAAWH,EAAU,WAAW,CAAC,CAC1C,CACD,SAAS8xB,EAAkB,CACvBA,EAAiB,YAAY,cAAcA,EAAiB,iBAAiB,EAC7EA,EAAiB,YAAY,iBAAiBA,EAAiB,iBAAiB,EAChFA,EAAiB,YAAY,KAAKA,EAAiB,uBAAuB,OAAO,CACpF,CACD,WAAWA,EAAkB,CACzB,OAAOA,EAAiB,mBAC3B,CACL,CACO,MAAMvC,WAA8BqC,EAAY,CACnD,sBACA,aAAc,CACV,MAAMzxB,EAAWH,EAAU,UAAU,CAAC,EACtC,KAAK,sBACD,IAAI2uB,GAA2B,GAAO,GAAM,4CAA6C,IAAK,GAAG,EACrG,KAAK,sBAAsB,iBAAiB,IAAI/mB,CAAgB,CACnE,CACD,SAASkqB,EAAkB,CACnBA,EAAiB,kBACjB,KAAK,sBAAsB,cAAcA,EAAiB,gBAAgB,EAE9EA,EAAiB,YAAY,cAAcA,EAAiB,kBAAkB,EAC9EA,EAAiB,YAAY,iBAAiBA,EAAiB,iBAAiB,EAChF,MAAMC,EAAuB,IAAInqB,EAC3BoqB,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAU,IAAI,4BAA4B,EAClD,MAAMrrB,EAAQqrB,EAAQ,YAAY,MAAO,OAAO,EAAE,YAAY,MAAM,EAUpE,GATAA,EAAQ,YAAY,MAAO,qBAAqB,EAChDrrB,EAAM,YAAcxG,EAAWH,EAAU,WAAW,EACpD,KAAK,sBAAsB,qBAC3B,KAAK,sBAAsB,eAAegyB,CAAO,EACjDD,EAAqB,QAAQ,YAAYC,CAAO,EAChDF,EAAiB,YAAY,KAAKC,EAAqB,OAAO,EAC9D,KAAK,sBAAsB,iBAAiBA,CAAoB,EAChE,KAAK,sBAAsB,KAAKD,EAAiB,uBAAuB,OAAO,EAC/EA,EAAiB,qBAAqB,QAClCA,EAAiB,mBAAoB,CACrC,MAAM/Z,EAAe+Z,EAAiB,mBAAmB,aACrD/Z,GACA+Z,EAAiB,qBAAqB,oBAAoB/Z,EAAa,iBAAkB,CAAA,CAEhG,CACJ,CACD,WAAW+Z,EAAkB,CACzB,KAAK,sBAAsB,SAC3B,MAAM,WAAWA,CAAgB,CACpC,CACD,WAAWA,EAAkB,CACzB,OAAOA,EAAiB,kBAC3B,CACL,CACO,MAAMtC,WAA8BoC,EAAY,CACnD,aAAc,CACV,MAAMzxB,EAAWH,EAAU,UAAU,CAAC,CACzC,CACD,SAAS8xB,EAAkB,CACvBA,EAAiB,eAAe,KAAKA,EAAiB,uBAAuB,OAAO,CACvF,CACD,WAAWD,EAAmB,CAC1B,OAAO,IACV,CACL,CACO,MAAMI,WAAgC5nB,EAAgCnD,EAAW,CAAE,CACtF,gBACA,sBACA,YAAYC,EAAIR,EAAO,CACnB,MAAMQ,GAAM8qB,GAAwB,OAAQtrB,GAASxG,EAAWH,EAAU,YAAY,CAAC,EACvFoI,EAAgC,SAAU,EAAC,cAAcuB,EAAyC,IAAI,EACtGvB,EAAgC,SAAU,EAAC,iBAAiBuB,EAAyC,gBAAmE,KAAK,cAAe,IAAI,EAChMvB,EAAgC,SAAU,EAAC,iBAAiBuB,EAAyC,uBAAmF,KAAK,qBAAsB,IAAI,EACvNvB,EAAgC,SAAU,EAAC,iBAAiBuB,EAAyC,6BAA+F,KAAK,2BAA4B,IAAI,EACzO,KAAK,gBAAkBa,GAAyB,SAAU,EAAC,cAAc,mBAAoB,EAAK,EAClG,KAAK,sBAAwB,IAChC,CACD,WAAWkP,EAAmB,CACrBA,EAAkB,QAC1B,CACD,aAAa4H,EAAoB,CAChC,CACD,aAAc,CACV,OAAO,MAAM,aAChB,CACD,eAAgB,CACZ,MAAO,eACV,CACD,IAAI,eAAgB,CAChB,OAAOnhB,EAAWH,EAAU,gBAAgB,CAC/C,CACD,kBAAmB,CACf,MAAO,EACV,CACD,eAAgB,CACZ,OAAK,KAAK,mBACV6X,GAAiB,YAAYC,GAAwB,wBAAwB,EACtE,EACV,CACD,IAAI,eAAgB,CAChB,OAAO3X,EAAWH,EAAU,aAAa,CAC5C,CACD,IAAI,aAAc,CACd,OAAOG,EAAWH,EAAU,8BAA8B,CAC7D,CACD,eAAgB,CACZ,MAAMkyB,EAA4CzV,GAAyB,UAAU,kDAAkD,EAEjI0V,EAAwCC,GAAoCjyB,EAAWH,EAAU,eAAe,EAAG,KAAK,eAAqC,EACnK,YAAK,sBAAwBmyB,EACtBD,EAA4CC,EAAwC,IAC9F,CACD,wBAAwB3jB,EAAQ,CACxB,KAAK,wBACL,KAAK,sBAAsB,gBAAgB,SAAW,CAACA,EAE9D,CACD,4BAA4B7H,EAAO,CAC/B,OAAO,IAAI0rB,GAAkB,KAAM,KAAM1rB,CAAK,CACjD,CACD,MAAM,kBAAmB,CACrB,GAAI,KAAK,uBACL,OAEJ,MAAM+S,EAAoBhQ,EAAmB,SAAU,EAAC,OAAOC,CAAuC,EACtG,GAAI,CAAC+P,EACD,OAEJ,IAAIpS,EAAU,IAAI+qB,GAAkB3Y,EAAmB,IAAI,EAC3D,KAAK,wBAAwBpS,CAAO,EACpC,KAAK,WAAWA,CAAO,EACvBA,EAAQ,aAAanH,EAAWH,EAAU,YAAY,CAAC,EACvD,MAAM0Z,EAAkB,iBAAiB,CACrC,eAAgB,GAChB,oBAAqB,GACrB,gBAAiB,KAAK,gBAAgB,IAAK,CACvD,CAAS,EACDpS,EAAU,KAAK,uBACVA,IAGLA,EAAQ,MAAQnH,EAAWH,EAAU,UAAW,CAAE,IAAKsH,EAAQ,GAAG,CAAE,EACpEA,EAAQ,WAAU,EAClB,KAAK,wBAAwB,IAAI,EACjC,KAAK,yBAAyB,mBAA6DA,CAAO,EACrG,CACD,qBAAqBiB,EAAO,CACxB,MAAMjB,EAAU,KAAK,uBAChBA,GAGLA,EAAQ,cAAciB,EAAM,IAAI,CACnC,CACD,2BAA2BA,EAAO,CAC9B,MAAMjB,EAAU,KAAK,uBACrB,GAAI,CAACA,EACD,OAEJ,KAAM,CAAE,KAAAgrB,EAAM,MAAArvB,EAAO,SAAAsvB,CAAQ,EAAKhqB,EAAM,KACxCjB,EAAQ,aAAanH,EAAWH,EAAU,sBAAuB,CAAE,KAAOsyB,EAAOrvB,EAAS,KAAK,QAAQ,CAAC,CAAG,CAAA,EAAG,EAAI,EAC9GsvB,GACAjrB,EAAQ,cAAa,CAE5B,CACD,cAAciB,EAAO,CACjB,MAAMmR,EAAoBnR,EAAM,KAChC,UAAWjB,KAAW,KAAK,cACnBA,EAAQ,kBAAmB,IAAKoS,GAChC,KAAK,cAAcpS,CAAO,CAGrC,CACD,iBAAiBA,EAAS,CAClB,KAAK,qBAAsB,IAAKA,GAChC,KAAK,wBAAwB,IAAI,EAErC,KAAK,yBAAyB,mBAA0EA,CAAO,CAClH,CAED,OAAO,OAAS,OAGhB,OAAO,iBAAmB,kBAC9B,CACO,MAAMknB,WAAwCnkB,EAAgC4nB,EAAuB,CAAE,CAC1G,sCACA,sBACA,UACA,eACA,aAAc,CACV,MAAMzD,GAAgC,OAAQruB,EAAWH,EAAU,2BAA2B,CAAC,EAC/F,KAAK,sCACDwK,GAAyB,SAAU,EAAC,cAAc,2BAA4B,EAAK,EACvF,KAAK,sBAAwB,KAC7B,KAAK,UAAY,EACpB,CACD,WAAWkP,EAAmB,CAC1B,MAAM,WAAWA,CAAiB,EAClCA,EAAkB,iBAAiB,kBAAyE,KAAK,gBAAiB,IAAI,EACtIA,EAAkB,iBAAiB,mBAA2E,KAAK,iBAAkB,IAAI,CAC5I,CACD,aAAaA,EAAmB,CAC5B,MAAM,aAAaA,CAAiB,EACpCA,EAAkB,oBAAoB,kBAAyE,KAAK,gBAAiB,IAAI,EACzIA,EAAkB,oBAAoB,mBAA2E,KAAK,iBAAkB,IAAI,CAC/I,CACD,gBAAgBnR,EAAO,CACnB,GAAI,CAAC,KAAK,eACN,OAEJ,MAAM0R,EAAU1R,EAAM,KACtB,IAAItH,EACJ,QAAS0D,EAAI,EAAGA,EAAIsV,EAAQ,OAAQtV,GAAK,EAAG,CACxC1D,EAAQgZ,EAAQtV,CAAC,EACjB,MAAM0M,EAAO4I,EAAQtV,EAAI,CAAC,EAC1B,KAAK,eAAe,MAAM1D,CAAK,EAAIoQ,EAC9B,KAAK,eAAe,IAAIpQ,CAAK,IAC9B,KAAK,eAAe,IAAIA,CAAK,EAAIoQ,EAExC,CACJ,CACD,iBAAiB9I,EAAO,CACpB,MAAM2R,EAAiB,KAAK,eAC5B,GAAI,CAACA,EACD,OAEJ,KAAM,CAAE,iBAAAsY,EAAkB,UAAAC,GAAclqB,EAAM,KACxCmqB,EAAe,KAAK,IAAIxY,EAAe,IAAI,OAAQA,EAAe,IAAI,OAAS,CAAC,EACtFA,EAAe,IAAIwY,CAAY,EAAIF,EAC9BtY,EAAe,IAAIwY,CAAY,IAChCxY,EAAe,IAAIwY,CAAY,EAAI,EACnCxY,EAAe,MAAMwY,CAAY,EAAI,GAEzCxY,EAAe,WAAWwY,CAAY,EAAID,EACtCvY,EAAe,UAAYuY,EAAYvY,EAAe,WAAW,CAAC,IAClEA,EAAe,WAAa,GAE5B,KAAK,gBACL,KAAK,yBAAyB,kBAAiF,KAAK,cAAc,EAEtI,MAAM5S,EAAU,KAAK,uBACjBA,GACAA,EAAQ,aAAa,KAAM,EAAI,CAEtC,CACD,kBAAmB,CACf,MAAO,EACV,CACD,IAAI,eAAgB,CAChB,OAAO,KAAK,UAAYnH,EAAWH,EAAU,wBAAwB,EACjEG,EAAWH,EAAU,yBAAyB,CACrD,CACD,kBAAmB,CACf,MAAO,EACV,CACD,eAAgB,CACZ,OAAO,KAAK,iBACf,CACD,uBAAwB,CACpB,GAAI,KAAK,uBACL,OAEJ,MAAM0Z,EAAoB,KAAK,gBAC1BA,GAGAA,EAAkB,yBAAyB,KAAK,sCAAsC,IAAK,CAAA,CACnG,CACD,eAAgB,CACZ,MAAMiZ,EAAkBP,GAAoCjyB,EAAWH,EAAU,2BAA2B,EAAG,KAAK,qCAA2C,EAC/J,YAAK,sBAAwB2yB,EACtBA,CACV,CACD,wBAAwBnkB,EAAQ,CACxB,KAAK,wBACL,KAAK,sBAAsB,gBAAgB,SAAW,CAACA,EAE9D,CACD,+BAAgC,CAC5B,OAAO,KAAK,qCACf,CACD,eAAgB,CACZ,MAAMkL,EAAoBhQ,EAAmB,SAAU,EAAC,OAAOC,CAAuC,EACtG,OAAK+P,GAGL,KAAK,wBAAwB,IAAI2Y,GAAkB3Y,EAAmB,KAAM,MAAS,CAAC,EACtF,KAAK,eAAiB,IAAIK,GAG1B,KAAK,qBAAsB,EAAC,gBAAkB,KAAK,eACnD,KAAK,UAAY,GACjB,KAAK,WAAW,KAAK,qBAAsB,CAAA,EAC3C,KAAK,qBAAoB,EAAG,aAAa5Z,EAAWH,EAAU,SAAS,CAAC,EACxE,KAAK,yBAAyB,mBACvB0Z,GAXI,IAYd,CACD,MAAM,sBAAuB,CACzB,IAAIpS,EAAU,KAAK,uBACnBA,EAAQ,aAAanH,EAAWH,EAAU,YAAY,CAAC,EACvD,MAAM4yB,EAActrB,EAAQ,kBAAmB,EAAC,wBAAwB,EAAI,EAC5E,KAAK,UAAY,GACjB,KAAK,yBAAyB,mBAC9B,MAAMsrB,EACNtrB,EAAU,KAAK,uBACVA,IAGLA,EAAQ,WAAU,EAClB,KAAK,eAAiB,KACtB,KAAK,wBAAwB,IAAI,EACjC,KAAK,yBAAyB,mBAA6DA,CAAO,EACrG,CACD,iBAAkB,CACd,OAAI,KAAK,UACA,KAAK,uBAGV,KAAK,sBAAqB,EAEvB,KAAK,SACf,CACD,eAAgB,CACZ,MAAO,eACV,CACD,IAAI,eAAgB,CAChB,OAAOnH,EAAWH,EAAU,mBAAmB,CAClD,CACD,IAAI,aAAc,CACd,OAAOG,EAAWH,EAAU,mCAAmC,CAClE,CACD,cAAcuI,EAAO,CACjB,MAAMsqB,EAAe,KAAK,UAE1B,KAAK,wBAAwB,IAAI,EACjC,MAAM,cAActqB,CAAK,EACzB,KAAK,eAAiB,KAClBsqB,GACA,KAAK,cAAa,CAEzB,CACD,6BAA8B,CACrB,KAAK,uBACV,KAAK,eAAiB,IACzB,CAED,OAAO,OAAS,cAGhB,OAAO,gBAAkB,kBAEzB,OAAO,gBAAkB,kBAEzB,OAAO,gBAAkB,iBAC7B,CACO,MAAMR,WAA0B7rB,EAAc,CACjD,0BACA,cACA,YACA,SACA,cACA,YACA,YACA,oBACA,eACA,gBACA,uBACA,YACA,SACA,YAAYkT,EAAmB9N,EAAMjF,EAAO,CACxC,MAAMiF,EAAMjF,GAASxG,EAAWH,EAAU,UAAW,CAAE,IAAK4L,EAAK,eAAgB,CAAA,CAAE,CAAC,EACpF,KAAK,0BAA4B8N,EACjC,KAAK,cAAgB,GACrB,KAAK,YAAc,KACnB,KAAK,SAAW,KAChB,KAAK,cAAgB,KACrB,KAAK,YAAc,IAAI,QAAQja,GAAW,CACtC,KAAK,YAAcA,CAC/B,CAAS,EACD,KAAK,oBAAsB,EAC3B,KAAK,eAAiB,KACtB,KAAK,gBAAkB,IAC1B,CACD,mBAAoB,CAChB,OAAO,KAAK,yBACf,CACD,MAAM,YAAYmgB,EAAW,CACzB,OAAK,KAAK,cAGH,KAAK,cAAc,YAAYA,CAAS,EAFpC,IAGd,CACD,yBAAyB3T,EAAqB,CAC1C,OAAO,IAAIF,GAA0BE,EAAqB,KAAM,iCAAiC,CACpG,CACD,WAAWA,EAAqB,CAC5B,OAAO,IAAIqiB,GAAiBriB,EAAqB,IAAI,CACxD,CACD,eAAgB,CACZ,QAAQ,OAAO,CAAC,KAAK,SAAU,iBAAiB,EAChD,KAAK,YAAW,EAChB,KAAK,aAAa9L,EAAWH,EAAU,OAAO,EAAG,EAAI,CACxD,CACD,YAAa,CACL,CAAC,KAAK,aAAe,KAAK,UACrB,KAAK,SAAS,QAElB,KAAK,gBAGV,KAAK,mBAAmB,KAAK,cAAc,CAC9C,CACD,mBAAmB8yB,EAAU,CACzB,GAAI,KAAK,YAAa,CACdA,GACAA,EAAS,OAAM,EAEnB,MACH,CACD,KAAK,SAAWA,EACXA,IACD,KAAK,uBAAyB,IAE9B,KAAK,kBACL,KAAK,gBAAe,EACpB,KAAK,gBAAkB,KAE9B,CACD,aAAc,CACV,QAAQ,OAAO,CAAC,KAAK,YAAa,wCAAwC,EAC1E,KAAK,YAAc,IAAIrG,GAAwB,KAAK,kBAAkB,KAAK,IAAI,CAAC,EAChF,KAAK,YAAY,iBAAiB,OAAkDlkB,GAAS,CACzF,KAAK,aAAa,KAAMA,EAAM,IAAI,CACrC,EAAE,IAAI,EACP,KAAK,SAAW,KAAK,YAAY,aAAa,KAAK,IAAK,KAAK,iBAAiB,KAAK,IAAI,CAAC,CAC3F,CAGD,kBAAkBwqB,EAAWna,EAAM,CAC/B,GAAIoa,GAA8D,iBAAmBD,EAAW,CAC5F,MAAMpzB,EAAQiZ,EACdtZ,EAAuB,SAAQ,EAAG,MAAMK,CAAK,EAC7C,MACH,CACD,GAAIqzB,GAA8D,SAAWD,EACzE,OAGJ,MAAME,EAAgBC,GADIta,CAC2C,EAGrE,KAAK,aAAayV,GAAiB4E,EAAc,OAAQA,EAAc,MAAM,CAAC,CACjF,CACD,SAAU,CACF,KAAK,aACL,KAAK,YAAY,UAErB,KAAK,eAAc,EACnB,KAAK,YAAc,EACtB,CACD,6BAA8B,CACrB,KAAK,eAGV,KAAK,aAAarqB,EAAuC,KAAK,cAAc,SAAS,EAAG,EAAK,CAChG,CACD,cAAc+kB,EAAO,CACZ,KAAK,iBACN,KAAK,eAAiB,IAAI3U,IAE9B,KAAK,eAAe,MAAM,CAAC2U,CAAK,CAAC,EACjC,EAAE,KAAK,oBACH,KAAK,UACA,KAAK,SAAS,MAAMA,CAAK,CAErC,CACD,iBAAiBC,EAAe,CACxB,KAAK,cAGT,KAAK,SAAW,KAChB,KAAK,cAAgBA,EACrB,KAAK,cAAgBA,EAAc,gBACnC,KAAK,4BAA2B,EAC5B,KAAK,aACL,KAAK,YAAY,mCAErB,KAAK,uBAAsB,EAC9B,CACD,wBAAyB,CACjB,KAAK,eAAiB,KAAK,aAC3B,KAAK,YAAY,KAAK,aAAa,EAEvC,KAAK,YAAW,EAAG,iBAAiB,IAAI,CAC3C,CACD,eAAgB,CACZ,MAAO,CAAC,KAAK,UAChB,CACD,MAAM,YAAa,CACf,MAAM,KAAK,YACX,MAAMpV,EAAmB,IAAIC,GAC7B,KAAK,SAAW,KAAK,UACjB,QAAUE,GAAwC,IAAI,IAAM,EAAI,KAAK,YAAW,EAAG,gBACvF,MAAMwa,EAAS,MAAOC,GAAa,CAC/B,GAAKA,EAGL,IAAI,KAAK,uBAAwB,CAC7B9zB,EAAuB,SAAQ,EAAG,MAAM,6CAA6C,EAChFkZ,EAAiB,QACtB,MACH,CACD,GAAI,KAAK,SAAU,CACf,MAAM7Y,EAAQ,MAAM,KAAK,SAAS,mBAAmB6Y,EAAkB,KAAK,mBAAmB,KAAK,IAAI,CAAC,EACrG7Y,GACAL,EAAuB,SAAQ,EAAG,MAAM,gDAAkDK,EAAM,OAAO,EAE3G,KAAK,4BAA2B,EAChC,MACH,CACD,KAAK,gBAAkB,IAAM,CACpBwzB,EAAOC,CAAQ,CACpC,EACY,KAAK,mBAAmB,EAAG,CAAC,EACxC,EACQ,MAAM5a,EAAiB,KAAK,KAAK,QAAQ,EAAE,KAAK2a,EAAO,KAAK,IAAI,CAAC,CACpE,CACD,mBAAmB3zB,EAAQ,CACvB,KAAK,mBAAmBA,EAAO,WAAY,EAAEA,EAAO,SAAQ,CAAE,CACjE,CACD,mBAAmB2C,EAAOc,EAAO,CAC7B,MAAMowB,IAAiBpwB,GAASd,EAAQc,GAAS,KAAK,QAAQ,CAAC,EAC/D,KAAK,aAAa9C,EAAWH,EAAU,QAAS,CAAE,IAAKqzB,CAAc,CAAA,CAAC,CACzE,CACD,MAAM,aAAa7rB,EAAM,CACrB,KAAK,aAAarH,EAAWH,EAAU,OAAO,EAAG,EAAI,EACrD,KAAK,YAAW,EAChB,MAAMR,EAAS,IAAIsZ,GAAqCtR,EAAM,GAAQ,EAChEzH,EAAU,MAAMP,EAAO,KAAK,KAAK,QAAQ,EAC/C,GAAI,CAACO,EAAS,CACV,MAAMJ,EAAQH,EAAO,QACjBG,GACA,KAAK,aAAaA,EAAM,OAAO,CAEtC,CACD,OAAOI,EAAU,KAAOP,EAAO,MAAK,CACvC,CACD,aAAc,CACV,OAAO,MAAM,aAChB,CACL,CACO,MAAMovB,WAAmChnB,CAAe,CAC3D,SACA,aAAc,CACV,QACA,KAAK,QAAQ,UAAU,IAAI,+BAA+B,EAC1D,KAAK,QAAQ,aAAa,QAAS,GAAGinB,GAAmB,wCAAwC,EAAE,MAAM,CAAE,OAAQ,EAAI,CAAE,CAAC,EAAE,EAC5H,KAAK,SAAW,IAAIyE,GACpB,KAAK,mBAAmB,EAAG,CAAA,CAAE,EAC7B,KAAK,SAAS,UAAU,IAAI,+BAA+B,EAC3D,KAAK,QAAQ,YAAY,KAAK,QAAQ,CACzC,CACD,OAAO,eAAenxB,EAAO,CAKzB,OAJkB,IAAI,KAAK,aAAaoxB,GAAmC,SAAU,EAAC,OAAQ,CAC1F,MAAO,OACP,KAAM,UAClB,CAAS,EACgB,OAAO,KAAK,MAAMpxB,EAAQ,GAAI,CAAC,CACnD,CACD,mBAAmBc,EAAOitB,EAAS,CAC/B,KAAK,SAAS,KAAO,CACjB,UAAW/vB,EAAWH,EAAU,eAAe,EAC/C,KAAM,IACN,UAAW4uB,GAA2B,eACtC,WAAY,GACZ,MAAA3rB,EACA,OAAQitB,CACpB,CACK,CACL,CACO,MAAMpB,WAAgC0E,EAAiB,CAC1D,kBACA,UACA,cACA,YAAY9Z,EAAmB,CAC3B,QACA,KAAK,kBAAoBA,EACzB,KAAK,UAAY,IAAIlD,GACrB,KAAK,cAAgB,EACxB,CACD,cAAc8I,EAAM/W,EAAO,CACvB,MAAMoE,EAAc,IAAIC,GAA2BrE,CAAK,EACxDoE,EAAY,sBAAsB2S,CAAI,EACjC3S,EAAY,OACjBpE,EAAM,QAAQ,EAAI,CACrB,CACD,mBAAmBA,EAAO,CACtB,MAAMwB,EAASxB,EAAM,OACrB,GAAI,CAACwB,EACD,OAEJ,GAAIxB,EAAM,MAAQ,QAAS,CACvB,MAAM+W,EAAOmU,GAAuB,IAAI1pB,CAAM,EAC9C,GAAI,CAACuV,EACD,OAEJ,MAAMoU,EAAWld,GAA+B,SAAS8I,CAAI,EAC7D,GAAI,CAACoU,EACD,OAEAld,GAA+B,kBAAkBkd,CAAQ,GACzDnrB,EAAM,QAAQ,EAAI,EAEtB,MACH,CACD,IAAIorB,EACJ,MAAMC,EAAgBrrB,EACtB,GAAIqrB,EAAc,MAAQ,UACtBD,EAAU,WAELC,EAAc,MAAQ,YAC3BD,EAAU,OAGV,QAEJ,MAAM1yB,EAAQ,KAAK,cAAc,QAAQ8I,CAAM,EAC/C,GAAI9I,IAAU,GACV,OAEJ,MAAM4yB,EAAYF,EAAU1yB,EAAQ,EAAIA,EAAQ,EAChD,GAAI4yB,EAAY,GAAKA,GAAa,KAAK,cAAc,OACjD,OAEJ,MAAMC,EAAY,KAAK,cAAcD,CAAS,EAC9CC,EAAU,SAAW,EACrB/pB,EAAO,SAAW,GAClB+pB,EAAU,MAAK,EACfvrB,EAAM,QAAQ,EAAI,CACrB,CACD,MAAM,mBAAmBub,EAAUkC,EAAmB,CAClD,KAAK,MAAK,EACV,MAAM+N,EAAS,MAAMjQ,EAAS,gBAAgBkC,CAAiB,EAC/D,GAAI,CAAC+N,EAAQ,CACT,MAAMC,EAAW,KAAK,QAAQ,YAAY,MAAO,0BAA0B,EAC3E/xB,GAA2B+xB,EAAU7zB,EAAWH,EAAU,gCAAgC,CAAC,EAC3F,MACH,CACD,MAAMg0B,EAAW,KAAK,QAAQ,YAAY,MAAO,uBAAuB,EACxEA,EAAS,iBAAiB,UAAW,KAAK,mBAAmB,KAAK,IAAI,EAAG,EAAK,EAC9E,UAAWC,KAASF,EAAQ,CACxB,MAAMG,EAAWF,EAAS,YAAY,MAAO,aAAa,EAC1D,KAAK,cAAc,KAAKE,CAAQ,EAChCA,EAAS,SAAW,GACpB,MAAM9sB,EAAO8sB,EAAS,YAAY,KAAK,EAEvC,GADA9sB,EAAK,YAAc1G,GAAgCuzB,EAAM,YAAY,EACjE,CAACA,EAAM,SACP,SAEJ,MAAMlqB,EAAS,KAAK,kBAAoB,KAAK,kBAAkB,OAAQ,EAAG,KACpEkN,EAAU,CAAE,aAAcgd,EAAM,OAAS,EAAG,iBAAkB,GAC9D/xB,EAAa,KAAK,UAAU,sBAAsB6H,EAAQ,OAAOkqB,EAAM,QAAQ,EAAGA,EAAM,WAAYA,EAAM,KAAO,EAAGhd,CAAO,EACjIid,EAAS,YAAYhyB,CAAU,EAC/BuxB,GAAuB,IAAIS,EAAUhyB,CAAU,EAC/CgyB,EAAS,iBAAiB,cAAe,KAAK,cAAc,KAAK,KAAMhyB,CAAU,CAAC,CACrF,CACD,KAAK,cAAc,CAAC,EAAE,SAAW,CACpC,CACD,OAAQ,CACJ,KAAK,QAAQ,iBACb,KAAK,cAAgB,GACrB,KAAK,UAAU,OAClB,CACL,CACA,MAAMuxB,GAAyB,IAAI,gZC5oD5B,MAAMU,EAAoB,CAC7B,wBACA,wBACA,gCACA,2BACA,aAAc,CACV,KAAK,wBAA0B,IAAIlC,GACnC,KAAK,wBAA0B,IAAI3U,GACnC,KAAK,gCAAkC,IAAIkR,GAC3C,KAAK,2BAA6B,IAAIhV,EACzC,CACL,CACO,MAAMkV,GAAW,IAAIyF,oICVtBn0B,GAAY,CAId,oBAAqB,wBACzB,EACMC,GAAOC,EAA4B,uCAAwCF,EAAS,EACpFG,GAAaC,EAA6B,KAAK,OAAWH,EAAI,EACpE,IAAIm0B,GACG,MAAMC,WAA0BvnB,EAAc,CACjD,aAAc,CACV,MAAMwnB,EAAW5F,GACXzhB,EAAe,CACjBqnB,EAAS,wBACTA,EAAS,gCACTA,EAAS,wBACTA,EAAS,0BACrB,EACQ,MAAM,gBAAiBrnB,EAAc,gCAAgC,CACxE,CACD,OAAO,UAAW,CACd,OAAKmnB,KACDA,GAA4B,IAAIC,IAE7BD,EACV,CACD,sBAAsB5J,EAAQ7d,EAAa4nB,EAAQ,CAI/C,GAHI,CAAC,KAAK,aAGN,CAACA,EAAO,SACR,OAEJ,MAAMpb,EAAWob,EAAO,SAExB,GAAI,CADiB7F,GAAS,wBAAwB,YAAW,EAC/C,OACd,OAEJ,MAAMhV,EAAoB6a,EAAO,aAAc,EAAC,kBAAiB,EACjE,GAAI,CAAC7a,EACD,OAEJ,SAAS8a,EAAaC,EAAU,CACvB/a,EAAkB,4BAA4BP,CAAQ,EAAE,KAAKkN,GAAU,CACpE,KAAK,UAAW,GAAIA,GACpB,KAAK,WAAWA,EAAQoO,CAAQ,CAEpD,CAAa,CACJ,CACD9nB,EAAY,cAAa,EAAG,WAAWxM,GAAWH,GAAU,mBAAmB,EAAGw0B,EAAa,KAAK,KAAM,SAAS,EAAG,CAAE,aAAc,mBAAmB,CAAE,CAC9J,CACD,aAAa7hB,EAAU+hB,EAAW,CAC9B,MAAMpkB,EAAQ5G,EAAmB,SAAU,EAAC,OAAO2qB,EAAiB,EACpE,eAAQ,OAAO,EAAQ/jB,GAAUA,aAAiB+jB,EAAiB,EAC/D/jB,GACAA,EAAM,aAAY,EAEf,EACV,CACD,UAAW,CACP,MAAM,SAAQ,EACd5G,EAAmB,SAAU,EAAC,UAAU2qB,GAAmB,IAAI,EAE/Dxc,GAAiB,YAAY,gBAAiB,8BAA8B,CAC/E,CACD,UAAW,CACPnO,EAAmB,SAAU,EAAC,UAAU2qB,GAAmB,IAAI,EAC/D,MAAM,SAAQ,CACjB,CACD,WAAW1N,EAAkBvN,EAAiB,CAE1C,MAAMub,EADWjG,GACa,wBAAwB,YAAW,EACjE,QAAS/pB,EAAI,EAAGA,EAAIgwB,EAAa,OAAQhwB,IAAK,CAC1C,MAAM2C,EAAUqtB,EAAahwB,CAAC,EAE9B,GAAI2C,EAAQ,eAAiB,SAASqf,EAAkB,EAAE,EAAG,CACzD,KAAK,YAAYrf,CAAO,EACX,KAAK,eAAeA,CAAO,EAC9B,iBAAiB8R,EAAiBuN,CAAgB,EAC5D,KACH,CACJ,CACJ,CACL,0HCtFMpgB,GAAS,IAAI,cACnBA,GAAO,YACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAwBC,ECpBD,MAAMvG,EAAY,CAId,OAAQ,UAIR,+BAAgC,0CAIhC,IAAK,MAIL,gCAAiC,+CAIjC,UAAW,aAIX,qBAAsB,2BAItB,YAAa,eAKb,iBAAkB,2BAIlB,GAAI,IACR,EACMC,GAAOC,EAA4B,yCAA0CF,CAAS,EACtFG,EAAaC,EAA6B,KAAK,OAAWH,EAAI,EACpE,IAAI20B,GACG,MAAMC,WAA4BjtB,CAAe,CACpD,cACA,QACA,mBACA,mBACA,sBACA,SACA,cACA,aAAc,CACV,MAAM,EAAI,EACV,KAAK,cAAgB,IAAI,IACzB,KAAK,QAAU4C,GAAyB,SAAQ,EAAG,cAAc,0BAA0B,EAC3F,MAAMgD,EAAU,IAAIC,EAAmB,4BAA6B,KAAK,cAAc,EACvF,KAAK,mBACDzC,GAAiC,SAAQ,EAAG,UAAU,oCAAoC,EAC9F,KAAK,mBACDyC,EAAmB,mBAAmB,KAAK,kBAAkB,EACjE,KAAK,mBAAmB,WAAW,KAAK,QAAQ,IAAG,CAAE,EACrDD,EAAQ,kBAAkB,KAAK,kBAAkB,EACjD,MAAMsnB,EAAa1sB,EAAgC,SAAU,EAAC,kBAAiB,EAC/E,GAAI0sB,GAAcA,EAAW,MAAMC,EAAuC,EAAG,CACzE,MAAMC,EAAwBhqB,GAAiC,SAAU,EAAC,UAAU,qCAAqC,EACzH,KAAK,sBAAwByC,EAAmB,mBAAmBunB,CAAqB,EACxFxnB,EAAQ,kBAAkB,KAAK,qBAAqB,CACvD,CACD,KAAK,SAAW,KAAK,iBACrB,KAAK,SAAS,SAAQ,EAAG,KAAK,KAAK,cAAc,EACjD,KAAK,cAAgB,CACxB,CACD,OAAO,UAAW,CACd,OAAKonB,KACDA,GAA8B,IAAIC,IAE/BD,EACV,CACD,gBAAiB,CACb,MAAMK,EAAsB,CACxB,GAAI,GACJ,MAAOpY,GACP,MAAO,OACP,WAAY,GACZ,SAAU,GACV,MAAO,QACP,KAAMxG,EAAwB,WAC9B,iBAAkB,OAClB,SAAU,OACV,cAAe,OACf,SAAU,OACV,WAAY,OACZ,OAAQ,OACR,4BAA6B,OAC7B,SAAU,OACV,cAAe,MAC3B,EACcxF,EAAU,CACZ,CACI,GAAGokB,EACH,GAAI,OACJ,MAAO90B,EAAWH,EAAU,MAAM,EAClC,MAAO,OACP,WAAY,GACZ,SAAU,GACV,MAAO,QACP,KAAMqW,EAAwB,WAC9B,QAASlW,EAAWH,EAAU,8BAA8B,CAC/D,EACD,CACI,GAAGi1B,EACH,GAAI,WACJ,MAAO90B,EAAWH,EAAU,GAAG,EAC/B,MAAO,OACP,WAAY,GACZ,MAAO,QACP,QAASG,EAAWH,EAAU,+BAA+B,CAChE,EACD,CACI,GAAGi1B,EACH,GAAI,MACJ,MAAO90B,EAAWH,EAAU,SAAS,EACrC,WAAY,GACZ,SAAU,GACV,QAASG,EAAWH,EAAU,oBAAoB,CACrD,CACb,EACciiB,EAAW,IAAIiT,GAA2C,CAC5D,YAAa/0B,EAAWH,EAAU,WAAW,EAC7C,QAAA6Q,EACA,aAAc,OACd,eAAgB,OAChB,gBAAiB,MAC7B,CAAS,EACDoR,EAAS,gBAAgB,QACzBA,EAAS,QAAQ,UAAU,IAAI,WAAW,EAC1CA,EAAS,QAAQ,iBAAiB,UAAW,KAAK,UAAU,KAAK,IAAI,EAAG,EAAK,EAC7EA,EAAS,iBAAiB,aAAyD,KAAK,4BAA6B,IAAI,EACzHA,EAAS,iBAAiB,iBAAiE,KAAK,eAAgB,IAAI,EACpH,UAAWmG,KAAQvX,EAAS,CACxB,MAAMwX,EAAapG,EAAS,kBAAkBmG,EAAK,EAAE,EACjDC,GACAA,EAAW,aAAa,QAASD,EAAK,OAAO,CAEpD,CACD,OAAOnG,CACV,CACD,UAAW,CACP,MAAM,SAAQ,EACT,KAAK,OACV,KAAK,iBAAiB,CAACkT,EAAqB,CAAC,EAC7C,KAAK,QAAQ,kBAAkB,KAAK,eAAgB,IAAI,CAC3D,CACD,UAAW,CACP,EAAE,KAAK,cACP,KAAK,QAAQ,qBAAqB,KAAK,eAAgB,IAAI,CAC9D,CACD,eAAehzB,EAAO,CAClB,KAAK,mBAAmB,WAAWA,EAAM,IAAI,CAChD,CACD,MAAM,MAAO,CACT,MAAMizB,EAAS,KAAK,cACpB,EAAG,CACC,MAAMC,EAAW,MAAM,KAAKltB,GAAkC,SAAU,EAAC,SAAQ,CAAE,EAC7E2G,EAAW,MAAM,QAAQ,IAAIumB,EAAS,IAAIhtB,GAAW,CACvD,MAAMqR,EAAoBrR,EAAQ,oBAClC,OAAKqR,EAGEA,EAAkB,qBAFd,IAGd,CAAA,CAAC,EACF,GAAI,KAAK,gBAAkB0b,EACvB,OAEJ,KAAK,OAAOC,EAAUvmB,CAAQ,EAC9B,MAAM,IAAI,QAAQwmB,GAAK,OAAO,WAAWA,EAAG,GAAI,CAAC,CAC7D,OAAiB,KAAK,gBAAkBF,EACnC,CACD,OAAOC,EAAUvmB,EAAU,CACvB,MAAMymB,EAAY,IAAI,IACtBzmB,EAAS,QAAQ,CAACxH,EAASrG,IAAU,CAC7BqG,GACAkuB,EAAgBH,EAASp0B,CAAK,EAAG,GAAIqG,EAAQ,IAAI,CAEjE,CAAS,EACD,MAAMyjB,EAAW,KAAK,SAAS,SAAQ,EACjC0K,EAAiB,IAAI,IAC3B,UAAWC,KAAQH,EAAW,CAC1B,MAAMxQ,EAAM2Q,EAAK,CAAC,EACZrkB,EAAOqkB,EAAK,CAAC,EAAE,KACfC,EAAeD,EAAK,CAAC,EAAE,SAAS,KACtC,GAAI,CAAC3Q,EAAK,CACN,QAAQ,KAAK,wBAAwB1T,CAAI,QAAQ,EACjD,QACH,CACD,IAAIxO,EAAO,KAAK,cAAc,IAAIkiB,CAAG,EACjCliB,EACAA,EAAK,WAAWwO,EAAMskB,CAAY,GAGlC9yB,EAAO,IAAI+yB,GAAS7Q,EAAK1T,EAAMskB,CAAY,EAC3C,KAAK,cAAc,IAAI5Q,EAAKliB,CAAI,EAChCkoB,EAAS,YAAYloB,CAAI,GAE7B4yB,EAAe,IAAI5yB,CAAI,CAC1B,CACD,UAAWA,KAAQkoB,EAAS,SAAS,MAAK,EAAI,CAC1C,MAAM7pB,EAAW2B,EACZ4yB,EAAe,IAAIv0B,CAAQ,GAC5BA,EAAS,OAAM,EAEnB,KAAK,cAAc,OAAOA,EAAS,GAAG,CACzC,CACD,KAAK,eAAc,EACnB,SAASs0B,EAAgBntB,EAASwtB,EAAWhzB,EAAM,CAC/C,MAAMkiB,EAAMliB,EAAK,UAAU,KAAOgzB,GAAaC,EAAejzB,CAAI,GAAKkzB,EAAoBlzB,CAAI,EAE/F,GADAA,EAAK,SAAS,QAAQ2yB,EAAgB,KAAK,KAAMntB,EAAS0c,CAAG,CAAC,EAC1D,CAACliB,EAAK,SACN,OAEJ,IAAI+V,EAAO2c,EAAU,IAAIxQ,CAAG,EACvBnM,IACDA,EAAO,CAAE,KAAM,EAAG,SAAU,IAAI,KAChC2c,EAAU,IAAIxQ,EAAKnM,CAAI,GAE3BA,EAAK,MAAQ/V,EAAK,SAClB+V,EAAK,SAAS,IAAIvQ,CAAO,CAC5B,CACD,SAASytB,EAAejzB,EAAM,CAC1B,MAAMuE,EAAOvE,EAAK,UAAU,aAC5B,OAAOuE,EAAK,WAAW,GAAG,GAAKA,IAAS,SAAWA,EAAO,EAC7D,CACD,SAAS2uB,EAAoBlzB,EAAM,CAC/B,OAAO,OAAOA,EAAK,UAAU,QAAQ,EAAI1C,EAAWH,EAAU,iBAAkB,CAAE,IAAK6C,EAAK,UAAU,QAAQ,CAAE,EAC5G,EACP,CACJ,CACD,UAAU0F,EAAO,CACPA,EAAM,MAAQ,UAGpBA,EAAM,QAAQ,EAAI,EAClB,KAAK,4BAA2B,EACnC,CACD,6BAA8B,CAC1B,MAAM1F,EAAO,KAAK,SAAS,aAC3B,GAAI,CAACA,GAAQ,CAACA,EAAK,IACf,OAEJ,MAAMmzB,EAAaC,GAAkC,SAAQ,EAAG,mBAAmBpzB,EAAK,GAAG,EACvFmzB,GACKre,GAAuBqe,CAAU,CAE7C,CACD,gBAAiB,CACb,MAAMp0B,EAAW,KAAK,SAAS,aAAY,EAC3C,GAAI,CAACA,EACD,OAEJ,SAASs0B,EAAU3J,EAAGC,EAAG,CACrB,OAAOA,EAAE,IAAI,cAAcD,EAAE,GAAG,CACnC,CACD,SAAS4J,EAAW5J,EAAGC,EAAG,CACtB,OAAOA,EAAE,KAAOD,EAAE,IACrB,CACD,MAAMpD,EAAevnB,IAAa,MAAQs0B,EAAYC,EACtD,KAAK,SAAS,UAAUhN,EAAc,KAAK,SAAS,qBAAoB,CAAE,CAC7E,CACD,iBAAkB,CACC,CAAC,KAAK,QAAQ,IAAG,EAE5B,KAAK,eAAe,EAAK,EAGpB,KAAK,eAEjB,CACD,eAAeiN,EAAQ,CAEnB,GADA,KAAK,QAAQ,IAAI,EAAI,EACjB,CAACA,EACD,OAEJ,MAAMtB,EAAa1sB,EAAgC,SAAU,EAAC,kBAAiB,EAC/E,GAAI,CAAC0sB,EACD,OAEJ,MAAMuB,EAAoBvB,EAAW,MAAMC,EAAuC,EAC9EsB,GACAA,EAAkB,WAAU,CAEnC,CACD,MAAM,eAAgB,CAClB,KAAK,QAAQ,IAAI,EAAK,CACzB,CACL,CACO,MAAMT,WAAiBU,EAA+C,CACzE,IACA,KACA,aACA,YAAYvR,EAAK1T,EAAMskB,EAAc,CACjC,QACA,KAAK,IAAM5Q,EACX,KAAK,KAAO1T,EACZ,KAAK,aAAeskB,CACvB,CACD,WAAWtkB,EAAMskB,EAAc,CACvB,KAAK,OAAStkB,GAAQ,KAAK,eAAiBskB,IAGhD,KAAK,KAAOtkB,EACZ,KAAK,aAAeskB,EACpB,KAAK,QAAO,EACf,CACD,WAAW/zB,EAAU,CACjB,MAAMC,EAAO,KAAK,SAASD,CAAQ,EACnC,OAAQA,EAAQ,CACZ,IAAK,MACDC,EAAK,YAAc,KAAK,IACxB,MACJ,IAAK,OACDA,EAAK,YAAc6c,EAAgD,KAAK,MAAM,KAAK,KAAO,GAAG,CAAC,EAC9F7c,EAAK,YAAY,OAAQ,YAAY,EAAE,YAAc1B,EAAWH,EAAU,EAAE,EAC5E,MACJ,IAAK,WACD6B,EAAK,YAAc,GAAG,KAAK,YAAY,GACvC,KACP,CACD,OAAOA,CACV,CACL,CACO,MAAM00B,EAAe,CACxB,aAAa5jB,EAAUjC,EAAU,CAC7B,OAAM,SAAY,CACd,MAAM8lB,EAAgB,oBACtB,MAAMC,GAA2B,SAAQ,EAAG,SAASD,CAAa,EAClE,MAAMznB,EAAO0nB,GAA2B,SAAU,EAAC,KAAKD,CAAa,EACrE,GAAIznB,EAAM,CACN,MAAM2nB,EAAS,MAAM3nB,EAAK,SAC1B,KAAK,kBAAkB2nB,EAAQhmB,CAAQ,CAC1C,CACb,KACe,EACV,CACD,kBAAkBimB,EAAcjmB,EAAU,CACtC,OAAQA,EAAQ,CACZ,IAAK,qCACDimB,EAAa,gBAAe,EAC5B,MACJ,IAAK,sCACDA,EAAa,eAAe,EAAI,EAChC,MACJ,QACI,QAAQ,OAAO,GAAO,mBAAmBjmB,CAAQ,EAAE,CAC1D,CACJ,CACL"}