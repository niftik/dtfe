{"version":3,"file":"protocol_monitor-DrXmqQix.js","sources":["../../ui/components/data_grid/DataGridControllerIntegrator.js","../../panels/protocol_monitor/components/toolbar.css.js","../../panels/protocol_monitor/components/Toolbar.js","../../panels/protocol_monitor/components/JSONEditor.css.js","../../panels/protocol_monitor/components/JSONEditor.js","../../panels/protocol_monitor/protocolMonitor.css.js","../../panels/protocol_monitor/ProtocolMonitor.js"],"sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../../core/common/common.js';\nimport * as UI from '../../legacy/legacy.js';\nimport { DataGridController } from './DataGridController.js';\nexport class DataGridControllerIntegrator extends UI.Widget.VBox {\n    dataGrid;\n    #updateThrottler;\n    // The `data` here mirrors the data of the DataGridController because\n    // the users of this class expects the `data` to be up to date after `update` calls.\n    // However, the `update` calls below are debounced for setting `dataGrid`s data\n    // for performance reasons.\n    #data;\n    constructor(data) {\n        /**\n         * first true = useShadowDom and tells the widget system it's using a shadow dom\n         * second true = delegatesFocus, which tells the widget system to\n         * let the component deal with its own focusing.\n         */\n        super(true, true);\n        this.dataGrid = new DataGridController();\n        this.dataGrid.data = data;\n        this.#data = data;\n        this.contentElement.appendChild(this.dataGrid);\n        this.#updateThrottler = new Common.Throttler.Throttler(0);\n    }\n    data() {\n        return this.#data;\n    }\n    update(data) {\n        this.#data = data;\n        // Setting of `dataGrid.data` is compute heavy because of the\n        // filtering logic. Thus, we're debouncing calls to the setter.\n        void this.#updateThrottler.schedule(async () => {\n            this.dataGrid.data = data;\n        });\n    }\n}\n//# sourceMappingURL=DataGridControllerIntegrator.js.map","// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(\n`/*\n * Copyright 2023 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n* {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n  font-size: inherit;\n}\n\n:host {\n  display: block;\n}\n\n.toolbar {\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n  padding-left: 5px;\n  padding-right: 6px;\n  padding-top: 1px;\n  height: 27px;\n  background-color: var(--sys-color-cdt-base-container);\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  border-top: 1px solid var(--sys-color-divider);\n}\n\n/*# sourceURL=toolbar.css */\n`);\n\nexport default styles;\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Host from '../../../core/host/host.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\nimport toolbarStyles from './toolbar.css.js';\nconst { html, Decorators, LitElement } = LitHtml;\nconst { customElement } = Decorators;\nconst UIStrings = {\n    /**\n     * @description The title of a the button that sends a CDP command.\n     */\n    sendCommandCtrlEnter: 'Send command - Ctrl+Enter',\n    /**\n     * @description The title of a the button that sends a CDP command.\n     */\n    sendCommandCmdEnter: 'Send command - âŒ˜+Enter',\n    /**\n     * @description he title of a the button that copies a CDP command.\n     */\n    copyCommand: 'Copy command',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/protocol_monitor/components/Toolbar.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst copyIconUrl = new URL('../../../Images/copy.svg', import.meta.url).toString();\nconst sendIconUrl = new URL('../../../Images/send.svg', import.meta.url).toString();\nexport class CopyCommandEvent extends Event {\n    static eventName = 'copycommand';\n    constructor() {\n        super(CopyCommandEvent.eventName, { bubbles: true, composed: true });\n    }\n}\nexport class SendCommandEvent extends Event {\n    static eventName = 'commandsent';\n    constructor() {\n        super(SendCommandEvent.eventName, { bubbles: true, composed: true });\n    }\n}\nlet Toolbar = class Toolbar extends LitElement {\n    static styles = [toolbarStyles];\n    #handleCopy = () => {\n        this.dispatchEvent(new CopyCommandEvent());\n    };\n    #handleSend = () => {\n        this.dispatchEvent(new SendCommandEvent());\n    };\n    render() {\n        // clang-format off\n        return html `\n        <div class=\"toolbar\">\n          <devtools-button\n          title=${i18nString(UIStrings.copyCommand)}\n          .size=${\"SMALL\" /* Buttons.Button.Size.SMALL */}\n          .iconUrl=${copyIconUrl}\n          .variant=${\"toolbar\" /* Buttons.Button.Variant.TOOLBAR */}\n          @click=${this.#handleCopy}\n          jslog=${VisualLogging.action('protocol-monitor.copy-command').track({ click: true })}\n        ></devtools-button>\n        <devtools-button\n          .size=${\"REGULAR\" /* Buttons.Button.Size.REGULAR */}\n          title=${Host.Platform.isMac() ? i18nString(UIStrings.sendCommandCmdEnter) : i18nString(UIStrings.sendCommandCtrlEnter)}\n          .iconUrl=${sendIconUrl}\n          .variant=${\"primary_toolbar\" /* Buttons.Button.Variant.PRIMARY_TOOLBAR */}\n          @click=${this.#handleSend}\n          jslog=${VisualLogging.action('protocol-monitor.send-command').track({ click: true })}\n        ></devtools-button>\n      </div>\n    `;\n        // clang-format on\n    }\n};\nToolbar = __decorate([\n    customElement('devtools-pm-toolbar')\n], Toolbar);\nexport { Toolbar };\n//# sourceMappingURL=Toolbar.js.map","// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(\n`/*\n * Copyright 2023 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n* {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n  font-size: inherit;\n}\n\n:host {\n  display: block;\n  height: 100%;\n}\n\n.target-select-menu {\n  max-width: 180px;\n}\n\n.warning-icon {\n  margin-left: -18px;\n  margin-right: 4px;\n}\n\n.row {\n  flex-wrap: wrap;\n}\n\n.row,\n.row-icons {\n  display: flex;\n  flex-direction: row;\n  color: var(--sys-color-token-property-special);\n  font-family: var(--monospace-font-family);\n  font-size: var(--monospace-font-size);\n  align-items: center;\n  line-height: 18px;\n  margin-top: 3px;\n}\n\n.separator {\n  margin-right: 0.5em;\n  color: var(--sys-color-on-surface);\n}\n\nul {\n  padding-left: 2em;\n}\n\n.optional-parameter {\n  color: var(--sys-color-token-attribute-value);\n\n  --override-color-recorder-input: var(--sys-color-on-surface);\n}\n\n.undefined-parameter {\n  color: var(--sys-color-state-disabled);\n}\n\n.wrapper {\n  padding-left: 1em;\n  overflow-x: hidden;\n  height: 100%;\n  width: 100%;\n  padding-bottom: 50px;\n  padding-top: 0.5em;\n}\n\n.clear-button,\n.add-button,\n.delete-button {\n  opacity: 0%;\n  transition: opacity 0.3s ease-in-out;\n}\n\n.clear-button,\n.delete-button {\n  margin-left: 5px;\n}\n\n.row:focus-within .delete-button,\n.row:focus-within .add-button,\n.row:focus-within .clear-button,\n.row:hover .delete-button,\n.row:hover .add-button,\n.row:hover .clear-button {\n  opacity: 100%;\n}\n\n/*# sourceURL=JSONEditor.css */\n`);\n\nexport default styles;\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport './Toolbar.js';\nimport '../../../ui/components/icon_button/icon_button.js';\nimport '../../../ui/components/menus/menus.js';\nimport * as Host from '../../../core/host/host.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as Dialogs from '../../../ui/components/dialogs/dialogs.js';\nimport * as SuggestionInput from '../../../ui/components/suggestion_input/suggestion_input.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\nimport * as ElementsComponents from '../../elements/components/components.js';\nimport editorWidgetStyles from './JSONEditor.css.js';\nconst { html, Decorators, LitElement, Directives, nothing } = LitHtml;\nconst { customElement, property, state } = Decorators;\nconst { live, classMap, repeat } = Directives;\nconst UIStrings = {\n    /**\n     *@description The title of a button that deletes a parameter.\n     */\n    deleteParameter: 'Delete parameter',\n    /**\n     *@description The title of a button that adds a parameter.\n     */\n    addParameter: 'Add a parameter',\n    /**\n     *@description The title of a button that reset the value of a paremeters to its default value.\n     */\n    resetDefaultValue: 'Reset to default value',\n    /**\n     *@description The title of a button to add custom key/value pairs to object parameters with no keys defined\n     */\n    addCustomProperty: 'Add custom property',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/protocol_monitor/components/JSONEditor.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n/**\n * Parents should listen for this event and register the listeners provided by\n * this event\"\n */\nexport class SubmitEditorEvent extends Event {\n    static eventName = 'submiteditor';\n    data;\n    constructor(data) {\n        super(SubmitEditorEvent.eventName);\n        this.data = data;\n    }\n}\nconst splitDescription = (description) => {\n    // If the description is too long we make the UI a bit better by highlighting the first sentence\n    // which contains the most informations.\n    // The number 150 has been chosen arbitrarily\n    if (description.length > 150) {\n        const [firstSentence, restOfDescription] = description.split('.');\n        // To make the UI nicer, we add a dot at the end of the first sentence.\n        firstSentence + '.';\n        return [firstSentence, restOfDescription];\n    }\n    return [description, ''];\n};\nconst defaultValueByType = new Map([\n    ['string', ''],\n    ['number', 0],\n    ['boolean', false],\n]);\nconst DUMMY_DATA = 'dummy';\nconst EMPTY_STRING = '<empty_string>';\nexport function suggestionFilter(option, query) {\n    return option.toLowerCase().includes(query.toLowerCase());\n}\nlet JSONEditor = class JSONEditor extends LitElement {\n    static styles = [editorWidgetStyles];\n    command = '';\n    targetId;\n    #hintPopoverHelper;\n    constructor() {\n        super();\n        this.parameters = [];\n        this.targets = [];\n        this.addEventListener('keydown', event => {\n            if (event.key === 'Enter' && (event.ctrlKey || event.metaKey)) {\n                this.#handleParameterInputKeydown(event);\n                this.dispatchEvent(new SubmitEditorEvent({\n                    command: this.command,\n                    parameters: this.getParameters(),\n                    targetId: this.targetId,\n                }));\n            }\n        });\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        this.#hintPopoverHelper = new UI.PopoverHelper.PopoverHelper(this, event => this.#handlePopoverDescriptions(event), 'protocol-monitor.hint');\n        this.#hintPopoverHelper.setDisableOnClick(true);\n        this.#hintPopoverHelper.setTimeout(300);\n        this.#hintPopoverHelper.setHasPadding(true);\n        const targetManager = SDK.TargetManager.TargetManager.instance();\n        targetManager.addEventListener(\"AvailableTargetsChanged\" /* SDK.TargetManager.Events.AVAILABLE_TARGETS_CHANGED */, this.#handleAvailableTargetsChanged, this);\n        this.#handleAvailableTargetsChanged();\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.#hintPopoverHelper?.hidePopover();\n        this.#hintPopoverHelper?.dispose();\n        const targetManager = SDK.TargetManager.TargetManager.instance();\n        targetManager.removeEventListener(\"AvailableTargetsChanged\" /* SDK.TargetManager.Events.AVAILABLE_TARGETS_CHANGED */, this.#handleAvailableTargetsChanged, this);\n    }\n    #handleAvailableTargetsChanged() {\n        this.targets = SDK.TargetManager.TargetManager.instance().targets();\n        if (this.targets.length && this.targetId === undefined) {\n            this.targetId = this.targets[0].id();\n        }\n    }\n    getParameters() {\n        const formatParameterValue = (parameter) => {\n            if (parameter.value === undefined) {\n                return;\n            }\n            switch (parameter.type) {\n                case \"number\" /* ParameterType.NUMBER */: {\n                    return Number(parameter.value);\n                }\n                case \"boolean\" /* ParameterType.BOOLEAN */: {\n                    return Boolean(parameter.value);\n                }\n                case \"object\" /* ParameterType.OBJECT */: {\n                    const nestedParameters = {};\n                    for (const subParameter of parameter.value) {\n                        const formattedValue = formatParameterValue(subParameter);\n                        if (formattedValue !== undefined) {\n                            nestedParameters[subParameter.name] = formatParameterValue(subParameter);\n                        }\n                    }\n                    if (Object.keys(nestedParameters).length === 0) {\n                        return undefined;\n                    }\n                    return nestedParameters;\n                }\n                case \"array\" /* ParameterType.ARRAY */: {\n                    const nestedArrayParameters = [];\n                    for (const subParameter of parameter.value) {\n                        nestedArrayParameters.push(formatParameterValue(subParameter));\n                    }\n                    return nestedArrayParameters.length === 0 ? [] : nestedArrayParameters;\n                }\n                default: {\n                    return parameter.value;\n                }\n            }\n        };\n        const formattedParameters = {};\n        for (const parameter of this.parameters) {\n            formattedParameters[parameter.name] = formatParameterValue(parameter);\n        }\n        return formatParameterValue({\n            type: \"object\" /* ParameterType.OBJECT */,\n            name: DUMMY_DATA,\n            optional: true,\n            value: this.parameters,\n            description: '',\n        });\n    }\n    // Displays a command entered in the input bar inside the editor\n    displayCommand(command, parameters, targetId) {\n        this.targetId = targetId;\n        this.command = command;\n        const schema = this.metadataByCommand.get(this.command);\n        if (!schema?.parameters) {\n            return;\n        }\n        this.populateParametersForCommandWithDefaultValues();\n        const displayedParameters = this.#convertObjectToParameterSchema('', parameters, {\n            typeRef: DUMMY_DATA,\n            type: \"object\" /* ParameterType.OBJECT */,\n            name: '',\n            description: '',\n            optional: true,\n            value: [],\n        }, schema.parameters)\n            .value;\n        const valueByName = new Map(this.parameters.map(param => [param.name, param]));\n        for (const param of displayedParameters) {\n            const existingParam = valueByName.get(param.name);\n            if (existingParam) {\n                existingParam.value = param.value;\n            }\n        }\n        this.requestUpdate();\n    }\n    #convertObjectToParameterSchema(key, value, schema, initialSchema) {\n        const type = schema?.type || typeof value;\n        const description = schema?.description ?? '';\n        const optional = schema?.optional ?? true;\n        switch (type) {\n            case \"string\" /* ParameterType.STRING */:\n            case \"boolean\" /* ParameterType.BOOLEAN */:\n            case \"number\" /* ParameterType.NUMBER */:\n                return this.#convertPrimitiveParameter(key, value, schema);\n            case \"object\" /* ParameterType.OBJECT */:\n                return this.#convertObjectParameter(key, value, schema, initialSchema);\n            case \"array\" /* ParameterType.ARRAY */:\n                return this.#convertArrayParameter(key, value, schema);\n        }\n        return {\n            type,\n            name: key,\n            optional,\n            typeRef: schema?.typeRef,\n            value,\n            description,\n        };\n    }\n    #convertPrimitiveParameter(key, value, schema) {\n        const type = schema?.type || typeof value;\n        const description = schema?.description ?? '';\n        const optional = schema?.optional ?? true;\n        return {\n            type,\n            name: key,\n            optional,\n            typeRef: schema?.typeRef,\n            value,\n            description,\n            isCorrectType: schema ? this.#isValueOfCorrectType(schema, String(value)) : true,\n        };\n    }\n    #convertObjectParameter(key, value, schema, initialSchema) {\n        const description = schema?.description ?? '';\n        if (typeof value !== 'object' || value === null) {\n            throw Error('The value is not an object');\n        }\n        const typeRef = schema?.typeRef;\n        if (!typeRef) {\n            throw Error('Every object parameters should have a type ref');\n        }\n        const nestedType = typeRef === DUMMY_DATA ? initialSchema : this.typesByName.get(typeRef);\n        if (!nestedType) {\n            throw Error('No nested type for keys were found');\n        }\n        const objectValues = [];\n        for (const objectKey of Object.keys(value)) {\n            const objectType = nestedType.find(param => param.name === objectKey);\n            objectValues.push(this.#convertObjectToParameterSchema(objectKey, value[objectKey], objectType));\n        }\n        return {\n            type: \"object\" /* ParameterType.OBJECT */,\n            name: key,\n            optional: schema.optional,\n            typeRef: schema.typeRef,\n            value: objectValues,\n            description,\n            isCorrectType: true,\n        };\n    }\n    #convertArrayParameter(key, value, schema) {\n        const description = schema?.description ?? '';\n        const optional = schema?.optional ?? true;\n        const typeRef = schema?.typeRef;\n        if (!typeRef) {\n            throw Error('Every array parameters should have a type ref');\n        }\n        if (!Array.isArray(value)) {\n            throw Error('The value is not an array');\n        }\n        const nestedType = this.#isTypePrimitive(typeRef) ? undefined : {\n            optional: true,\n            type: \"object\" /* ParameterType.OBJECT */,\n            value: [],\n            typeRef,\n            description: '',\n            name: '',\n        };\n        const objectValues = [];\n        for (let i = 0; i < value.length; i++) {\n            const temp = this.#convertObjectToParameterSchema(`${i}`, value[i], nestedType);\n            objectValues.push(temp);\n        }\n        return {\n            type: \"array\" /* ParameterType.ARRAY */,\n            name: key,\n            optional,\n            typeRef: schema?.typeRef,\n            value: objectValues,\n            description,\n            isCorrectType: true,\n        };\n    }\n    #handlePopoverDescriptions(event) {\n        const hintElement = event.composedPath()[0];\n        const elementData = this.#getDescriptionAndTypeForElement(hintElement);\n        if (!elementData?.description) {\n            return null;\n        }\n        const [head, tail] = splitDescription(elementData.description);\n        const type = elementData.type;\n        const replyArgs = elementData.replyArgs;\n        let popupContent = '';\n        // replyArgs and type cannot get into conflict because replyArgs is attached to a command and type to a parameter\n        if (replyArgs) {\n            popupContent = tail + `Returns: ${replyArgs}<br>`;\n        }\n        else if (type) {\n            popupContent = tail + `<br>Type: ${type}<br>`;\n        }\n        else {\n            popupContent = tail;\n        }\n        return {\n            box: hintElement.boxInWindow(),\n            show: async (popover) => {\n                const popupElement = new ElementsComponents.CSSHintDetailsView.CSSHintDetailsView({\n                    getMessage: () => `<code><span>${head}</span></code>`,\n                    getPossibleFixMessage: () => popupContent,\n                    getLearnMoreLink: () => `https://chromedevtools.github.io/devtools-protocol/tot/${this.command.split('.')[0]}/`,\n                });\n                popover.contentElement.appendChild(popupElement);\n                return true;\n            },\n        };\n    }\n    #getDescriptionAndTypeForElement(hintElement) {\n        if (hintElement.matches('.command')) {\n            const metadata = this.metadataByCommand.get(this.command);\n            if (metadata) {\n                return { description: metadata.description, replyArgs: metadata.replyArgs };\n            }\n        }\n        if (hintElement.matches('.parameter')) {\n            const id = hintElement.dataset.paramid;\n            if (!id) {\n                return;\n            }\n            const pathArray = id.split('.');\n            const { parameter } = this.#getChildByPath(pathArray);\n            if (!parameter.description) {\n                return;\n            }\n            return { description: parameter.description, type: parameter.type };\n        }\n        return;\n    }\n    getCommandJson() {\n        return this.command !== '' ? JSON.stringify({ command: this.command, parameters: this.getParameters() }) : '';\n    }\n    #copyToClipboard() {\n        const commandJson = this.getCommandJson();\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(commandJson);\n    }\n    #handleCommandSend() {\n        this.dispatchEvent(new SubmitEditorEvent({\n            command: this.command,\n            parameters: this.getParameters(),\n            targetId: this.targetId,\n        }));\n    }\n    populateParametersForCommandWithDefaultValues() {\n        const commandParameters = this.metadataByCommand.get(this.command)?.parameters;\n        if (!commandParameters) {\n            return;\n        }\n        this.parameters = commandParameters.map((parameter) => {\n            return this.#populateParameterDefaults(parameter);\n        });\n    }\n    #populateParameterDefaults(parameter) {\n        if (parameter.type === \"object\" /* ParameterType.OBJECT */) {\n            let typeRef = parameter.typeRef;\n            if (!typeRef) {\n                typeRef = DUMMY_DATA;\n            }\n            // Fallback to empty array is extremely rare.\n            // It happens when the keys for an object are not registered like for Tracing.MemoryDumpConfig or headers for instance.\n            const nestedTypes = this.typesByName.get(typeRef) ?? [];\n            const nestedParameters = nestedTypes.map(nestedType => {\n                return this.#populateParameterDefaults(nestedType);\n            });\n            return {\n                ...parameter,\n                value: parameter.optional ? undefined : nestedParameters,\n                isCorrectType: true,\n            };\n        }\n        if (parameter.type === \"array\" /* ParameterType.ARRAY */) {\n            return {\n                ...parameter,\n                value: parameter?.optional ? undefined :\n                    parameter.value?.map(param => this.#populateParameterDefaults(param)) || [],\n                isCorrectType: true,\n            };\n        }\n        return {\n            ...parameter,\n            value: parameter.optional ? undefined : defaultValueByType.get(parameter.type),\n            isCorrectType: true,\n        };\n    }\n    #getChildByPath(pathArray) {\n        let parameters = this.parameters;\n        let parentParameter;\n        for (let i = 0; i < pathArray.length; i++) {\n            const name = pathArray[i];\n            const parameter = parameters.find(param => param.name === name);\n            if (i === pathArray.length - 1) {\n                return { parameter, parentParameter };\n            }\n            if (parameter?.type === \"array\" /* ParameterType.ARRAY */ || parameter?.type === \"object\" /* ParameterType.OBJECT */) {\n                if (parameter.value) {\n                    parameters = parameter.value;\n                }\n            }\n            else {\n                throw new Error('Parameter on the path in not an object or an array');\n            }\n            parentParameter = parameter;\n        }\n        throw new Error('Not found');\n    }\n    #isValueOfCorrectType(parameter, value) {\n        if (parameter.type === \"number\" /* ParameterType.NUMBER */ && isNaN(Number(value))) {\n            return false;\n        }\n        // For boolean or array parameters, this will create an array of the values the user can enter\n        const acceptedValues = this.#computeDropdownValues(parameter);\n        // Check to see if the entered value by the user is indeed part of the values accepted by the enum or boolean parameter\n        if (acceptedValues.length !== 0 && !acceptedValues.includes(value)) {\n            return false;\n        }\n        return true;\n    }\n    #saveParameterValue = (event) => {\n        if (!(event.target instanceof SuggestionInput.SuggestionInput.SuggestionInput)) {\n            return;\n        }\n        let value;\n        if (event instanceof KeyboardEvent) {\n            const editableContent = event.target.renderRoot.querySelector('devtools-editable-content');\n            if (!editableContent) {\n                return;\n            }\n            value = editableContent.innerText;\n        }\n        else {\n            value = event.target.value;\n        }\n        const paramId = event.target.getAttribute('data-paramid');\n        if (!paramId) {\n            return;\n        }\n        const pathArray = paramId.split('.');\n        const object = this.#getChildByPath(pathArray).parameter;\n        if (value === '') {\n            object.value = defaultValueByType.get(object.type);\n        }\n        else {\n            object.value = value;\n            object.isCorrectType = this.#isValueOfCorrectType(object, value);\n        }\n        // Needed to render the delete button for object parameters\n        this.requestUpdate();\n    };\n    #saveNestedObjectParameterKey = (event) => {\n        if (!(event.target instanceof SuggestionInput.SuggestionInput.SuggestionInput)) {\n            return;\n        }\n        const value = event.target.value;\n        const paramId = event.target.getAttribute('data-paramid');\n        if (!paramId) {\n            return;\n        }\n        const pathArray = paramId.split('.');\n        const { parameter } = this.#getChildByPath(pathArray);\n        parameter.name = value;\n        // Needed to render the delete button for object parameters\n        this.requestUpdate();\n    };\n    #handleParameterInputKeydown = (event) => {\n        if (!(event.target instanceof SuggestionInput.SuggestionInput.SuggestionInput)) {\n            return;\n        }\n        if (event.key === 'Enter' && (event.ctrlKey || event.metaKey)) {\n            this.#saveParameterValue(event);\n        }\n    };\n    #handleFocusParameter(event) {\n        if (!(event.target instanceof SuggestionInput.SuggestionInput.SuggestionInput)) {\n            return;\n        }\n        const paramId = event.target.getAttribute('data-paramid');\n        if (!paramId) {\n            return;\n        }\n        const pathArray = paramId.split('.');\n        const object = this.#getChildByPath(pathArray).parameter;\n        object.isCorrectType = true;\n        this.requestUpdate();\n    }\n    #handleCommandInputBlur = async (event) => {\n        if (event.target instanceof SuggestionInput.SuggestionInput.SuggestionInput) {\n            this.command = event.target.value;\n        }\n        this.populateParametersForCommandWithDefaultValues();\n    };\n    #computeTargetLabel(target) {\n        if (!target) {\n            return undefined;\n        }\n        return `${target.name()} (${target.inspectedURL()})`;\n    }\n    #isTypePrimitive(type) {\n        if (type === \"string\" /* ParameterType.STRING */ || type === \"boolean\" /* ParameterType.BOOLEAN */ || type === \"number\" /* ParameterType.NUMBER */) {\n            return true;\n        }\n        return false;\n    }\n    #createNestedParameter(type, name) {\n        if (type.type === \"object\" /* ParameterType.OBJECT */) {\n            let typeRef = type.typeRef;\n            if (!typeRef) {\n                typeRef = DUMMY_DATA;\n            }\n            const nestedTypes = this.typesByName.get(typeRef) ?? [];\n            const nestedValue = nestedTypes.map(nestedType => this.#createNestedParameter(nestedType, nestedType.name));\n            return {\n                type: \"object\" /* ParameterType.OBJECT */,\n                name,\n                optional: type.optional,\n                typeRef,\n                value: nestedValue,\n                isCorrectType: true,\n                description: type.description,\n            };\n        }\n        return {\n            type: type.type,\n            name,\n            optional: type.optional,\n            isCorrectType: true,\n            typeRef: type.typeRef,\n            value: type.optional ? undefined : defaultValueByType.get(type.type),\n            description: type.description,\n        };\n    }\n    #handleAddParameter(parameterId) {\n        const pathArray = parameterId.split('.');\n        const { parameter, parentParameter } = this.#getChildByPath(pathArray);\n        if (!parameter) {\n            return;\n        }\n        switch (parameter.type) {\n            case \"array\" /* ParameterType.ARRAY */: {\n                const typeRef = parameter.typeRef;\n                if (!typeRef) {\n                    throw Error('Every array parameter must have a typeRef');\n                }\n                const nestedType = this.typesByName.get(typeRef) ?? [];\n                const nestedValue = nestedType.map(type => this.#createNestedParameter(type, type.name));\n                let type = this.#isTypePrimitive(typeRef) ? typeRef : \"object\" /* ParameterType.OBJECT */;\n                // If the typeRef is actually a ref to an enum type, the type of the nested param should be a string\n                if (nestedType.length === 0) {\n                    if (this.enumsByName.get(typeRef)) {\n                        type = \"string\" /* ParameterType.STRING */;\n                    }\n                }\n                // In case the parameter is an optional array, its value will be undefined so before pushing new value inside,\n                // we reset it to empty array\n                if (!parameter.value) {\n                    parameter.value = [];\n                }\n                parameter.value.push({\n                    type,\n                    name: String(parameter.value.length),\n                    optional: true,\n                    typeRef,\n                    value: nestedValue.length !== 0 ? nestedValue : '',\n                    description: '',\n                    isCorrectType: true,\n                });\n                break;\n            }\n            case \"object\" /* ParameterType.OBJECT */: {\n                let typeRef = parameter.typeRef;\n                if (!typeRef) {\n                    typeRef = DUMMY_DATA;\n                }\n                if (!parameter.value) {\n                    parameter.value = [];\n                }\n                if (!this.typesByName.get(typeRef)) {\n                    parameter.value.push({\n                        type: \"string\" /* ParameterType.STRING */,\n                        name: '',\n                        optional: true,\n                        value: '',\n                        isCorrectType: true,\n                        description: '',\n                        isKeyEditable: true,\n                    });\n                    break;\n                }\n                const nestedTypes = this.typesByName.get(typeRef) ?? [];\n                const nestedValue = nestedTypes.map(nestedType => this.#createNestedParameter(nestedType, nestedType.name));\n                const nestedParameters = nestedTypes.map(nestedType => {\n                    return this.#populateParameterDefaults(nestedType);\n                });\n                if (parentParameter) {\n                    parameter.value.push({\n                        type: \"object\" /* ParameterType.OBJECT */,\n                        name: '',\n                        optional: true,\n                        typeRef,\n                        value: nestedValue,\n                        isCorrectType: true,\n                        description: '',\n                    });\n                }\n                else {\n                    parameter.value = nestedParameters;\n                }\n                break;\n            }\n            default:\n                // For non-array and non-object parameters, set the value to the default value if available.\n                parameter.value = defaultValueByType.get(parameter.type);\n                break;\n        }\n        this.requestUpdate();\n    }\n    #handleClearParameter(parameter, isParentArray) {\n        if (!parameter || parameter.value === undefined) {\n            return;\n        }\n        switch (parameter.type) {\n            case \"object\" /* ParameterType.OBJECT */:\n                if (parameter.optional && !isParentArray) {\n                    parameter.value = undefined;\n                    break;\n                }\n                if (!parameter.typeRef || !this.typesByName.get(parameter.typeRef)) {\n                    parameter.value = [];\n                }\n                else {\n                    parameter.value.forEach(param => this.#handleClearParameter(param, isParentArray));\n                }\n                break;\n            case \"array\" /* ParameterType.ARRAY */:\n                parameter.value = parameter.optional ? undefined : [];\n                break;\n            default:\n                parameter.value = parameter.optional ? undefined : defaultValueByType.get(parameter.type);\n                parameter.isCorrectType = true;\n                break;\n        }\n        this.requestUpdate();\n    }\n    #handleDeleteParameter(parameter, parentParameter) {\n        if (!parameter) {\n            return;\n        }\n        if (!Array.isArray(parentParameter.value)) {\n            return;\n        }\n        parentParameter.value.splice(parentParameter.value.findIndex(p => p === parameter), 1);\n        if (parentParameter.type === \"array\" /* ParameterType.ARRAY */) {\n            for (let i = 0; i < parentParameter.value.length; i++) {\n                parentParameter.value[i].name = String(i);\n            }\n        }\n        this.requestUpdate();\n    }\n    #renderTargetSelectorRow() {\n        const target = this.targets.find(el => el.id() === this.targetId);\n        const targetLabel = target ? this.#computeTargetLabel(target) : this.#computeTargetLabel(this.targets[0]);\n        // clang-format off\n        return html `\n    <div class=\"row attribute padded\">\n      <div>target<span class=\"separator\">:</span></div>\n      <devtools-select-menu\n            class=\"target-select-menu\"\n            @selectmenuselected=${this.#onTargetSelected}\n            .showDivider=${true}\n            .showArrow=${true}\n            .sideButton=${false}\n            .showSelectedItem=${true}\n            .showConnector=${false}\n            .position=${\"bottom\" /* Dialogs.Dialog.DialogVerticalPosition.BOTTOM */}\n            .buttonTitle=${targetLabel || ''}\n            jslog=${VisualLogging.dropDown('targets').track({ click: true })}\n          >\n          ${repeat(this.targets, target => {\n            return html `\n                <devtools-menu-item\n                  .value=${target.id()}>\n                    ${this.#computeTargetLabel(target)}\n                </devtools-menu-item>\n              `;\n        })}\n          </devtools-select-menu>\n    </div>\n  `;\n        // clang-format on\n    }\n    #onTargetSelected(event) {\n        this.targetId = event.itemValue;\n        this.requestUpdate();\n    }\n    #computeDropdownValues(parameter) {\n        // The suggestion box should only be shown for parameters of type string and boolean\n        if (parameter.type === \"string\" /* ParameterType.STRING */) {\n            const enums = this.enumsByName.get(`${parameter.typeRef}`) ?? {};\n            return Object.values(enums);\n        }\n        if (parameter.type === \"boolean\" /* ParameterType.BOOLEAN */) {\n            return ['true', 'false'];\n        }\n        return [];\n    }\n    #renderInlineButton(opts) {\n        return html `\n          <devtools-button\n            title=${opts.title}\n            .size=${\"SMALL\" /* Buttons.Button.Size.SMALL */}\n            .iconName=${opts.iconName}\n            .variant=${\"icon\" /* Buttons.Button.Variant.ICON */}\n            class=${classMap(opts.classMap)}\n            @click=${opts.onClick}\n            .jslogContext=${opts.jslogContext}\n          ></devtools-button>\n        `;\n    }\n    #renderWarningIcon() {\n        return html `<devtools-icon\n    .data=${{\n            iconName: 'warning-filled',\n            color: 'var(--icon-warning)',\n            width: '14px',\n            height: '14px',\n        }}\n    class=${classMap({\n            'warning-icon': true,\n        })}\n  >\n  </devtools-icon>`;\n    }\n    /**\n     * Renders the parameters list corresponding to a specific CDP command.\n     */\n    #renderParameters(parameters, id, parentParameter, parentParameterId) {\n        parameters.sort((a, b) => Number(a.optional) - Number(b.optional));\n        // clang-format off\n        return html `\n      <ul>\n        ${repeat(parameters, parameter => {\n            const parameterId = parentParameter ? `${parentParameterId}` + '.' + `${parameter.name}` : parameter.name;\n            const subparameters = parameter.type === \"array\" /* ParameterType.ARRAY */ || parameter.type === \"object\" /* ParameterType.OBJECT */ ? (parameter.value ?? []) : [];\n            const handleInputOnBlur = (event) => {\n                this.#saveParameterValue(event);\n            };\n            const handleKeydown = (event) => {\n                this.#handleParameterInputKeydown(event);\n            };\n            const handleFocus = (event) => {\n                this.#handleFocusParameter(event);\n            };\n            const handleParamKeyOnBlur = (event) => {\n                this.#saveNestedObjectParameterKey(event);\n            };\n            const isPrimitive = this.#isTypePrimitive(parameter.type);\n            const isArray = parameter.type === \"array\" /* ParameterType.ARRAY */;\n            const isParentArray = parentParameter && parentParameter.type === \"array\" /* ParameterType.ARRAY */;\n            const isParentObject = parentParameter && parentParameter.type === \"object\" /* ParameterType.OBJECT */;\n            const isObject = parameter.type === \"object\" /* ParameterType.OBJECT */;\n            const isParamValueUndefined = parameter.value === undefined;\n            const isParamOptional = parameter.optional;\n            const hasTypeRef = isObject && parameter.typeRef && this.typesByName.get(parameter.typeRef) !== undefined;\n            // This variable indicates that this parameter is a parameter nested inside an object parameter\n            // that no keys defined inside the CDP documentation.\n            const hasNoKeys = parameter.isKeyEditable;\n            const isCustomEditorDisplayed = isObject && !hasTypeRef;\n            const hasOptions = parameter.type === \"string\" /* ParameterType.STRING */ || parameter.type === \"boolean\" /* ParameterType.BOOLEAN */;\n            const canClearParameter = (isArray && !isParamValueUndefined && parameter.value?.length !== 0) || (isObject && !isParamValueUndefined);\n            const parametersClasses = {\n                'optional-parameter': parameter.optional,\n                parameter: true,\n                'undefined-parameter': parameter.value === undefined && parameter.optional,\n            };\n            const inputClasses = {\n                'json-input': true,\n            };\n            return html `\n                <li class=\"row\">\n                  <div class=\"row-icons\">\n                      ${!parameter.isCorrectType ? html `${this.#renderWarningIcon()}` : nothing}\n\n                      <!-- If an object parameter has no predefined keys, show an input to enter the key, otherwise show the name of the parameter -->\n                      <div class=${classMap(parametersClasses)} data-paramId=${parameterId}>\n                          ${hasNoKeys ?\n                html `<devtools-suggestion-input\n                              data-paramId=${parameterId}\n                              isKey=${true}\n                              .isCorrectInput=${live(parameter.isCorrectType)}\n                              .options=${hasOptions ? this.#computeDropdownValues(parameter) : []}\n                              .autocomplete=${false}\n                              .value=${live(parameter.name ?? '')}\n                              .placeholder=${parameter.value === '' ? EMPTY_STRING : `<${defaultValueByType.get(parameter.type)}>`}\n                              @blur=${handleParamKeyOnBlur}\n                              @focus=${handleFocus}\n                              @keydown=${handleKeydown}\n                            ></devtools-suggestion-input>` :\n                html `${parameter.name}`} <span class=\"separator\">:</span>\n                      </div>\n\n                      <!-- Render button to add values inside an array parameter -->\n                      ${isArray ? html `\n                        ${this.#renderInlineButton({\n                title: i18nString(UIStrings.addParameter),\n                iconName: 'plus',\n                onClick: () => this.#handleAddParameter(parameterId),\n                classMap: { 'add-button': true },\n                jslogContext: 'protocol-monitor.add-parameter',\n            })}\n                      ` : nothing}\n\n                      <!-- Render button to complete reset an array parameter or an object parameter-->\n                      ${canClearParameter ?\n                this.#renderInlineButton({\n                    title: i18nString(UIStrings.resetDefaultValue),\n                    iconName: 'clear',\n                    onClick: () => this.#handleClearParameter(parameter, isParentArray),\n                    classMap: { 'clear-button': true },\n                    jslogContext: 'protocol-monitor.reset-to-default-value',\n                }) : nothing}\n\n                      <!-- Render the buttons to change the value from undefined to empty string for optional primitive parameters -->\n                      ${isPrimitive && !isParentArray && isParamOptional && isParamValueUndefined ?\n                html `  ${this.#renderInlineButton({\n                    title: i18nString(UIStrings.addParameter),\n                    iconName: 'plus',\n                    onClick: () => this.#handleAddParameter(parameterId),\n                    classMap: { 'add-button': true },\n                    jslogContext: 'protocol-monitor.add-parameter',\n                })}` : nothing}\n\n                      <!-- Render the buttons to change the value from undefined to populate the values inside object with their default values -->\n                      ${isObject && isParamOptional && isParamValueUndefined && hasTypeRef ?\n                html `  ${this.#renderInlineButton({\n                    title: i18nString(UIStrings.addParameter),\n                    iconName: 'plus',\n                    onClick: () => this.#handleAddParameter(parameterId),\n                    classMap: { 'add-button': true },\n                    jslogContext: 'protocol-monitor.add-parameter',\n                })}` : nothing}\n                  </div>\n\n                  <div class=\"row-icons\">\n                      <!-- If an object has no predefined keys, show an input to enter the value, and a delete icon to delete the whole key/value pair -->\n                      ${hasNoKeys && isParentObject ? html `\n                      <!-- @ts-ignore -->\n                      <devtools-suggestion-input\n                          data-paramId=${parameterId}\n                          .isCorrectInput=${live(parameter.isCorrectType)}\n                          .options=${hasOptions ? this.#computeDropdownValues(parameter) : []}\n                          .autocomplete=${false}\n                          .value=${live(parameter.value ?? '')}\n                          .placeholder=${parameter.value === '' ? EMPTY_STRING : `<${defaultValueByType.get(parameter.type)}>`}\n                          .jslogContext=${'parameter-value'}\n                          @blur=${handleInputOnBlur}\n                          @focus=${handleFocus}\n                          @keydown=${handleKeydown}\n                        ></devtools-suggestion-input>\n\n                        ${this.#renderInlineButton({\n                title: i18nString(UIStrings.deleteParameter),\n                iconName: 'bin',\n                onClick: () => this.#handleDeleteParameter(parameter, parentParameter),\n                classMap: { deleteButton: true, deleteIcon: true },\n                jslogContext: 'protocol-monitor.delete-parameter',\n            })}` : nothing}\n\n                    <!-- In case  the parameter is not optional or its value is not undefined render the input -->\n                    ${isPrimitive && !hasNoKeys && (!isParamValueUndefined || !isParamOptional) && (!isParentArray) ?\n                html `\n                        <!-- @ts-ignore -->\n                        <devtools-suggestion-input\n                          data-paramId=${parameterId}\n                          .strikethrough=${live(parameter.isCorrectType)}\n                          .options=${hasOptions ? this.#computeDropdownValues(parameter) : []}\n                          .autocomplete=${false}\n                          .value=${live(parameter.value ?? '')}\n                          .placeholder=${parameter.value === '' ? EMPTY_STRING : `<${defaultValueByType.get(parameter.type)}>`}\n                          .jslogContext=${'parameter-value'}\n                          @blur=${handleInputOnBlur}\n                          @focus=${handleFocus}\n                          @keydown=${handleKeydown}\n                        ></devtools-suggestion-input>` : nothing}\n\n                    <!-- Render the buttons to change the value from empty string to undefined for optional primitive parameters -->\n                    ${isPrimitive && !hasNoKeys && !isParentArray && isParamOptional && !isParamValueUndefined ?\n                html `  ${this.#renderInlineButton({\n                    title: i18nString(UIStrings.resetDefaultValue),\n                    iconName: 'clear',\n                    onClick: () => this.#handleClearParameter(parameter),\n                    classMap: { 'clear-button': true },\n                    jslogContext: 'protocol-monitor.reset-to-default-value',\n                })}` : nothing}\n\n                    <!-- If the parameter is an object with no predefined keys, renders a button to add key/value pairs to it's value -->\n                    ${isCustomEditorDisplayed ? html `\n                      ${this.#renderInlineButton({\n                title: i18nString(UIStrings.addCustomProperty),\n                iconName: 'plus',\n                onClick: () => this.#handleAddParameter(parameterId),\n                classMap: { 'add-button': true },\n                jslogContext: 'protocol-monitor.add-custom-property',\n            })}\n                    ` : nothing}\n\n                    <!-- In case the parameter is nested inside an array we render the input field as well as a delete button -->\n                    ${isParentArray ? html `\n                    <!-- If the parameter is an object we don't want to display the input field we just want the delete button-->\n                    ${!isObject ? html `\n                    <!-- @ts-ignore -->\n                    <devtools-suggestion-input\n                      data-paramId=${parameterId}\n                      .options=${hasOptions ? this.#computeDropdownValues(parameter) : []}\n                      .autocomplete=${false}\n                      .value=${live(parameter.value ?? '')}\n                      .placeholder=${parameter.value === '' ? EMPTY_STRING : `<${defaultValueByType.get(parameter.type)}>`}\n                      .jslogContext=${'parameter'}\n                      @blur=${handleInputOnBlur}\n                      @keydown=${handleKeydown}\n                      class=${classMap(inputClasses)}\n                    ></devtools-suggestion-input>` : nothing}\n\n                    ${this.#renderInlineButton({\n                title: i18nString(UIStrings.deleteParameter),\n                iconName: 'bin',\n                onClick: () => this.#handleDeleteParameter(parameter, parentParameter),\n                classMap: { 'delete-button': true },\n                jslogContext: 'protocol-monitor.delete-parameter',\n            })}` : nothing}\n                  </div>\n                </li>\n                ${this.#renderParameters(subparameters, id, parameter, parameterId)}\n              `;\n        })}\n      </ul>\n    `;\n        // clang-format on\n    }\n    render() {\n        // clang-format off\n        return html `\n    <div class=\"wrapper\">\n      ${this.#renderTargetSelectorRow()}\n      <div class=\"row attribute padded\">\n        <div class=\"command\">command<span class=\"separator\">:</span></div>\n        <devtools-suggestion-input\n          .options=${[...this.metadataByCommand.keys()]}\n          .value=${this.command}\n          .placeholder=${'Enter your command...'}\n          .suggestionFilter=${suggestionFilter}\n          .jslogContext=${'command'}\n          @blur=${this.#handleCommandInputBlur}\n          class=${classMap({ 'json-input': true })}\n        ></devtools-suggestion-input>\n      </div>\n      ${this.parameters.length ? html `\n      <div class=\"row attribute padded\">\n        <div>parameters<span class=\"separator\">:</span></div>\n      </div>\n        ${this.#renderParameters(this.parameters)}\n      ` : nothing}\n    </div>\n    <devtools-pm-toolbar @copycommand=${this.#copyToClipboard} @commandsent=${this.#handleCommandSend}></devtools-pm-toolbar>`;\n        // clang-format on\n    }\n};\n__decorate([\n    property({ attribute: false })\n], JSONEditor.prototype, \"metadataByCommand\", void 0);\n__decorate([\n    property({ attribute: false })\n], JSONEditor.prototype, \"typesByName\", void 0);\n__decorate([\n    property({ attribute: false })\n], JSONEditor.prototype, \"enumsByName\", void 0);\n__decorate([\n    state()\n], JSONEditor.prototype, \"parameters\", void 0);\n__decorate([\n    state()\n], JSONEditor.prototype, \"targets\", void 0);\n__decorate([\n    state()\n], JSONEditor.prototype, \"command\", void 0);\n__decorate([\n    state()\n], JSONEditor.prototype, \"targetId\", void 0);\nJSONEditor = __decorate([\n    customElement('devtools-json-editor')\n], JSONEditor);\nexport { JSONEditor };\n//# sourceMappingURL=JSONEditor.js.map","// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(\n`/*\n * Copyright 2021 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.protocol-monitor .protocol-monitor-toolbar {\n  border-bottom: 1px solid var(--sys-color-divider);\n}\n\n.protocol-monitor .protocol-monitor-bottom-toolbar {\n  border-top: 1px solid var(--sys-color-divider);\n}\n\n/*# sourceURL=protocolMonitor.css */\n`);\n\nexport default styles;\n","// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as ProtocolClient from '../../core/protocol_client/protocol_client.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as DataGrid from '../../ui/components/data_grid/data_grid.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as LitHtml from '../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport * as Components from './components/components.js';\nimport protocolMonitorStyles from './protocolMonitor.css.js';\nconst { html } = LitHtml;\nconst UIStrings = {\n    /**\n     *@description Text for one or a group of functions\n     */\n    method: 'Method',\n    /**\n     * @description Text in Protocol Monitor. Title for a table column which shows in which direction\n     * the particular protocol message was travelling. Values in this column will either be 'sent' or\n     * 'received'.\n     */\n    type: 'Type',\n    /**\n     * @description Text in Protocol Monitor of the Protocol Monitor tab. Noun relating to a network request.\n     */\n    request: 'Request',\n    /**\n     *@description Title of a cell content in protocol monitor. A Network response refers to the act of acknowledging a\n    network request. Should not be confused with answer.\n     */\n    response: 'Response',\n    /**\n     *@description Text for timestamps of items\n     */\n    timestamp: 'Timestamp',\n    /**\n     *@description Title of a cell content in protocol monitor. It describes the time between sending a request and receiving a response.\n     */\n    elapsedTime: 'Elapsed time',\n    /**\n     *@description Text in Protocol Monitor of the Protocol Monitor tab\n     */\n    target: 'Target',\n    /**\n     *@description Text to record a series of actions for analysis\n     */\n    record: 'Record',\n    /**\n     *@description Text to clear everything\n     */\n    clearAll: 'Clear all',\n    /**\n     *@description Text to filter result items\n     */\n    filter: 'Filter',\n    /**\n     *@description Text for the documentation of something\n     */\n    documentation: 'Documentation',\n    /**\n     *@description Text to open the CDP editor with the selected command\n     */\n    editAndResend: 'Edit and resend',\n    /**\n     *@description Cell text content in Protocol Monitor of the Protocol Monitor tab\n     *@example {30} PH1\n     */\n    sMs: '{PH1} ms',\n    /**\n     *@description Text in Protocol Monitor of the Protocol Monitor tab\n     */\n    noMessageSelected: 'No message selected',\n    /**\n     *@description Text in Protocol Monitor for the save button\n     */\n    save: 'Save',\n    /**\n     *@description Text in Protocol Monitor to describe the sessions column\n     */\n    session: 'Session',\n    /**\n     *@description A placeholder for an input in Protocol Monitor. The input accepts commands that are sent to the backend on Enter. CDP stands for Chrome DevTools Protocol.\n     */\n    sendRawCDPCommand: 'Send a raw `CDP` command',\n    /**\n     * @description A tooltip text for the input in the Protocol Monitor panel. The tooltip describes what format is expected.\n     */\n    sendRawCDPCommandExplanation: 'Format: `\\'Domain.commandName\\'` for a command without parameters, or `\\'{\"command\":\"Domain.commandName\", \"parameters\": {...}}\\'` as a JSON object for a command with parameters. `\\'cmd\\'`/`\\'method\\'` and `\\'args\\'`/`\\'params\\'`/`\\'arguments\\'` are also supported as alternative keys for the `JSON` object.',\n    /**\n     * @description A label for a select input that allows selecting a CDP target to send the commands to.\n     */\n    selectTarget: 'Select a target',\n    /**\n     * @description Tooltip for the the console sidebar toggle in the Console panel. Command to\n     * open/show the sidebar.\n     */\n    showCDPCommandEditor: 'Show CDP command editor',\n    /**\n     * @description Tooltip for the the console sidebar toggle in the Console panel. Command to\n     * open/show the sidebar.\n     */\n    hideCDPCommandEditor: 'Hide  CDP command editor',\n    /**\n     * @description Screen reader announcement when the sidebar is shown in the Console panel.\n     */\n    CDPCommandEditorShown: 'CDP command editor shown',\n    /**\n     * @description Screen reader announcement when the sidebar is hidden in the Console panel.\n     */\n    CDPCommandEditorHidden: 'CDP command editor hidden',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/protocol_monitor/ProtocolMonitor.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst timeRenderer = (value) => {\n    return html `${i18nString(UIStrings.sMs, { PH1: String(value) })}`;\n};\nexport const buildProtocolMetadata = (domains) => {\n    const metadataByCommand = new Map();\n    for (const domain of domains) {\n        for (const command of Object.keys(domain.metadata)) {\n            metadataByCommand.set(command, domain.metadata[command]);\n        }\n    }\n    return metadataByCommand;\n};\nconst metadataByCommand = buildProtocolMetadata(ProtocolClient.InspectorBackend.inspectorBackend.agentPrototypes.values());\nconst typesByName = ProtocolClient.InspectorBackend.inspectorBackend.typeMap;\nconst enumsByName = ProtocolClient.InspectorBackend.inspectorBackend.enumMap;\nexport class ProtocolMonitorDataGrid extends Common.ObjectWrapper.eventMixin(UI.Widget.VBox) {\n    started;\n    startTime;\n    requestTimeForId;\n    dataGridRowForId;\n    infoWidget;\n    dataGridIntegrator;\n    filterParser;\n    suggestionBuilder;\n    textFilterUI;\n    selector;\n    #commandAutocompleteSuggestionProvider = new CommandAutocompleteSuggestionProvider();\n    #selectedTargetId;\n    #commandInput;\n    constructor(splitWidget) {\n        super(true);\n        this.started = false;\n        this.startTime = 0;\n        this.dataGridRowForId = new Map();\n        this.requestTimeForId = new Map();\n        const topToolbar = new UI.Toolbar.Toolbar('protocol-monitor-toolbar', this.contentElement);\n        topToolbar.element.setAttribute('jslog', `${VisualLogging.toolbar('top')}`);\n        this.contentElement.classList.add('protocol-monitor');\n        const recordButton = new UI.Toolbar.ToolbarToggle(i18nString(UIStrings.record), 'record-start', 'record-stop', 'protocol-monitor.toggle-recording');\n        recordButton.addEventListener(\"Click\" /* UI.Toolbar.ToolbarButton.Events.CLICK */, () => {\n            this.setRecording(recordButton.isToggled());\n        });\n        recordButton.enableToggleWithRedColor();\n        topToolbar.appendToolbarItem(recordButton);\n        recordButton.setToggled(true);\n        const clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clearAll), 'clear', undefined, 'protocol-monitor.clear-all');\n        clearButton.addEventListener(\"Click\" /* UI.Toolbar.ToolbarButton.Events.CLICK */, () => {\n            this.dataGridIntegrator.update({ ...this.dataGridIntegrator.data(), rows: [] });\n            this.infoWidget.render(null);\n        });\n        topToolbar.appendToolbarItem(clearButton);\n        const saveButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.save), 'download', undefined, 'protocol-monitor.save');\n        saveButton.addEventListener(\"Click\" /* UI.Toolbar.ToolbarButton.Events.CLICK */, () => {\n            void this.saveAsFile();\n        });\n        topToolbar.appendToolbarItem(saveButton);\n        this.selector = this.#createTargetSelector();\n        this.infoWidget = new InfoWidget();\n        const dataGridInitialData = {\n            paddingRowsCount: 100,\n            showScrollbar: true,\n            columns: [\n                {\n                    id: 'type',\n                    title: i18nString(UIStrings.type),\n                    sortable: true,\n                    widthWeighting: 1,\n                    visible: true,\n                    hideable: true,\n                    styles: {\n                        'text-align': 'center',\n                    },\n                },\n                {\n                    id: 'method',\n                    title: i18nString(UIStrings.method),\n                    sortable: false,\n                    widthWeighting: 5,\n                    visible: true,\n                    hideable: false,\n                },\n                {\n                    id: 'request',\n                    title: i18nString(UIStrings.request),\n                    sortable: false,\n                    widthWeighting: 5,\n                    visible: true,\n                    hideable: true,\n                },\n                {\n                    id: 'response',\n                    title: i18nString(UIStrings.response),\n                    sortable: false,\n                    widthWeighting: 5,\n                    visible: true,\n                    hideable: true,\n                },\n                {\n                    id: 'elapsed-time',\n                    title: i18nString(UIStrings.elapsedTime),\n                    sortable: true,\n                    widthWeighting: 2,\n                    visible: false,\n                    hideable: true,\n                },\n                {\n                    id: 'timestamp',\n                    title: i18nString(UIStrings.timestamp),\n                    sortable: true,\n                    widthWeighting: 5,\n                    visible: false,\n                    hideable: true,\n                },\n                {\n                    id: 'target',\n                    title: i18nString(UIStrings.target),\n                    sortable: true,\n                    widthWeighting: 5,\n                    visible: false,\n                    hideable: true,\n                },\n                {\n                    id: 'session',\n                    title: i18nString(UIStrings.session),\n                    sortable: true,\n                    widthWeighting: 5,\n                    visible: false,\n                    hideable: true,\n                },\n            ],\n            rows: [],\n            contextMenus: {\n                bodyRow: (menu, columns, row) => {\n                    const methodColumn = DataGrid.DataGridUtils.getRowEntryForColumnId(row, 'method');\n                    const typeColumn = DataGrid.DataGridUtils.getRowEntryForColumnId(row, 'type');\n                    /**\n                     * You can click the \"Edit and resend\" item in the context menu to be\n                     * taken to the CDP editor with the filled with the selected command.\n                     */\n                    menu.editSection().appendItem(i18nString(UIStrings.editAndResend), () => {\n                        if (!methodColumn.value) {\n                            return;\n                        }\n                        const parameters = this.infoWidget.request;\n                        const targetId = this.infoWidget.targetId;\n                        const command = String(methodColumn.value);\n                        if (splitWidget.showMode() === \"OnlyMain\" /* UI.SplitWidget.ShowMode.ONLY_MAIN */) {\n                            splitWidget.toggleSidebar();\n                        }\n                        this.dispatchEventToListeners(\"CommandChange\" /* Events.COMMAND_CHANGE */, { command, parameters, targetId });\n                    }, { jslogContext: 'edit-and-resend', disabled: typeColumn.title !== 'sent' });\n                    /**\n                     * You can click the \"Filter\" item in the context menu to filter the\n                     * protocol monitor entries to those that match the method of the\n                     * current row.\n                     */\n                    menu.editSection().appendItem(i18nString(UIStrings.filter), () => {\n                        const methodColumn = DataGrid.DataGridUtils.getRowEntryForColumnId(row, 'method');\n                        this.textFilterUI.setValue(`method:${methodColumn.value}`, true);\n                    }, { jslogContext: 'filter' });\n                    /**\n                     * You can click the \"Documentation\" item in the context menu to be\n                     * taken to the CDP Documentation site entry for the given method.\n                     */\n                    menu.footerSection().appendItem(i18nString(UIStrings.documentation), () => {\n                        if (!methodColumn.value) {\n                            return;\n                        }\n                        const [domain, method] = String(methodColumn.value).split('.');\n                        const type = typeColumn.title === 'sent' ? 'method' : 'event';\n                        Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(`https://chromedevtools.github.io/devtools-protocol/tot/${domain}#${type}-${method}`);\n                    }, { jslogContext: 'documentation' });\n                },\n            },\n        };\n        this.dataGridIntegrator =\n            new DataGrid.DataGridControllerIntegrator.DataGridControllerIntegrator(dataGridInitialData);\n        this.dataGridIntegrator.dataGrid.addEventListener('cellfocused', event => {\n            const focusedRow = event.data.row;\n            const infoWidgetData = {\n                request: DataGrid.DataGridUtils.getRowEntryForColumnId(focusedRow, 'request'),\n                response: DataGrid.DataGridUtils.getRowEntryForColumnId(focusedRow, 'response'),\n                target: DataGrid.DataGridUtils.getRowEntryForColumnId(focusedRow, 'target'),\n                type: DataGrid.DataGridUtils.getRowEntryForColumnId(focusedRow, 'type').title,\n                selectedTab: event.data.cell.columnId === 'request' ? 'request' :\n                    event.data.cell.columnId === 'response' ? 'response' :\n                        undefined,\n            };\n            this.infoWidget.render(infoWidgetData);\n        });\n        this.dataGridIntegrator.dataGrid.addEventListener('newuserfiltertext', event => {\n            this.textFilterUI.setValue(event.data.filterText, /* notify listeners */ true);\n        });\n        const split = new UI.SplitWidget.SplitWidget(true, true, 'protocol-monitor-panel-split', 250);\n        split.show(this.contentElement);\n        split.setMainWidget(this.dataGridIntegrator);\n        split.setSidebarWidget(this.infoWidget);\n        const keys = ['method', 'request', 'response', 'type', 'target', 'session'];\n        this.filterParser = new TextUtils.TextUtils.FilterParser(keys);\n        this.suggestionBuilder = new UI.FilterSuggestionBuilder.FilterSuggestionBuilder(keys);\n        this.textFilterUI = new UI.Toolbar.ToolbarFilter(undefined, 1, .2, '', this.suggestionBuilder.completions.bind(this.suggestionBuilder), true);\n        this.textFilterUI.addEventListener(\"TextChanged\" /* UI.Toolbar.ToolbarInput.Event.TEXT_CHANGED */, event => {\n            const query = event.data;\n            const filters = this.filterParser.parse(query);\n            this.dataGridIntegrator.update({ ...this.dataGridIntegrator.data(), filters });\n        });\n        const bottomToolbar = new UI.Toolbar.Toolbar('protocol-monitor-bottom-toolbar', this.contentElement);\n        bottomToolbar.element.setAttribute('jslog', `${VisualLogging.toolbar('bottom')}`);\n        bottomToolbar.appendToolbarItem(splitWidget.createShowHideSidebarButton(i18nString(UIStrings.showCDPCommandEditor), i18nString(UIStrings.hideCDPCommandEditor), i18nString(UIStrings.CDPCommandEditorShown), i18nString(UIStrings.CDPCommandEditorHidden), 'protocol-monitor.toggle-command-editor'));\n        this.#commandInput = this.#createCommandInput();\n        bottomToolbar.appendToolbarItem(this.#commandInput);\n        bottomToolbar.appendToolbarItem(this.selector);\n        const shadowRoot = bottomToolbar.element?.shadowRoot;\n        const inputBar = shadowRoot?.querySelector('.toolbar-input');\n        const tabSelector = shadowRoot?.querySelector('.toolbar-select-container');\n        const populateToolbarInput = () => {\n            const editorWidget = splitWidget.sidebarWidget();\n            if (!(editorWidget instanceof EditorWidget)) {\n                return;\n            }\n            const commandJson = editorWidget.jsonEditor.getCommandJson();\n            const targetId = editorWidget.jsonEditor.targetId;\n            if (targetId) {\n                const selectedIndex = this.selector.options().findIndex(option => option.value === targetId);\n                if (selectedIndex !== -1) {\n                    this.selector.setSelectedIndex(selectedIndex);\n                    this.#selectedTargetId = targetId;\n                }\n            }\n            if (commandJson) {\n                this.#commandInput.setValue(commandJson);\n            }\n        };\n        splitWidget.addEventListener(\"ShowModeChanged\" /* UI.SplitWidget.Events.SHOW_MODE_CHANGED */, (event => {\n            if (event.data === 'OnlyMain') {\n                populateToolbarInput();\n                inputBar?.setAttribute('style', 'display:flex; flex-grow: 1');\n                tabSelector?.setAttribute('style', 'display:flex');\n            }\n            else {\n                const { command, parameters } = parseCommandInput(this.#commandInput.value());\n                this.dispatchEventToListeners(\"CommandChange\" /* Events.COMMAND_CHANGE */, { command, parameters, targetId: this.#selectedTargetId });\n                inputBar?.setAttribute('style', 'display:none');\n                tabSelector?.setAttribute('style', 'display:none');\n            }\n        }));\n        topToolbar.appendToolbarItem(this.textFilterUI);\n    }\n    #createCommandInput() {\n        const placeholder = i18nString(UIStrings.sendRawCDPCommand);\n        const accessiblePlaceholder = placeholder;\n        const growFactor = 1;\n        const shrinkFactor = 0.2;\n        const tooltip = i18nString(UIStrings.sendRawCDPCommandExplanation);\n        const input = new UI.Toolbar.ToolbarInput(placeholder, accessiblePlaceholder, growFactor, shrinkFactor, tooltip, this.#commandAutocompleteSuggestionProvider.buildTextPromptCompletions, false, 'command-input');\n        input.addEventListener(\"EnterPressed\" /* UI.Toolbar.ToolbarInput.Event.ENTER_PRESSED */, () => {\n            this.#commandAutocompleteSuggestionProvider.addEntry(input.value());\n            const { command, parameters } = parseCommandInput(input.value());\n            this.onCommandSend(command, parameters, this.#selectedTargetId);\n        });\n        return input;\n    }\n    #createTargetSelector() {\n        const selector = new UI.Toolbar.ToolbarComboBox(() => {\n            this.#selectedTargetId = selector.selectedOption()?.value;\n        }, i18nString(UIStrings.selectTarget), undefined, 'target-selector');\n        selector.setMaxWidth(120);\n        const targetManager = SDK.TargetManager.TargetManager.instance();\n        const syncTargets = () => {\n            selector.removeOptions();\n            for (const target of targetManager.targets()) {\n                selector.createOption(`${target.name()} (${target.inspectedURL()})`, target.id());\n            }\n        };\n        targetManager.addEventListener(\"AvailableTargetsChanged\" /* SDK.TargetManager.Events.AVAILABLE_TARGETS_CHANGED */, syncTargets);\n        syncTargets();\n        return selector;\n    }\n    onCommandSend(command, parameters, target) {\n        const test = ProtocolClient.InspectorBackend.test;\n        const targetManager = SDK.TargetManager.TargetManager.instance();\n        const selectedTarget = target ? targetManager.targetById(target) : null;\n        const sessionId = selectedTarget ? selectedTarget.sessionId : '';\n        // TS thinks that properties are read-only because\n        // in TS test is defined as a namespace.\n        // @ts-ignore\n        test.sendRawMessage(command, parameters, () => { }, sessionId);\n    }\n    wasShown() {\n        if (this.started) {\n            return;\n        }\n        this.registerCSSFiles([protocolMonitorStyles]);\n        this.started = true;\n        this.startTime = Date.now();\n        this.setRecording(true);\n    }\n    setRecording(recording) {\n        const test = ProtocolClient.InspectorBackend.test;\n        if (recording) {\n            // TODO: TS thinks that properties are read-only because\n            // in TS test is defined as a namespace.\n            // @ts-ignore\n            test.onMessageSent = this.messageSent.bind(this);\n            // @ts-ignore\n            test.onMessageReceived = this.messageReceived.bind(this);\n        }\n        else {\n            // @ts-ignore\n            test.onMessageSent = null;\n            // @ts-ignore\n            test.onMessageReceived = null;\n        }\n    }\n    targetToString(target) {\n        if (!target) {\n            return '';\n        }\n        return target.decorateLabel(`${target.name()} ${target === SDK.TargetManager.TargetManager.instance().rootTarget() ? '' : target.id()}`);\n    }\n    messageReceived(message, target) {\n        if ('id' in message && message.id) {\n            const existingRow = this.dataGridRowForId.get(message.id);\n            if (!existingRow) {\n                return;\n            }\n            const allExistingRows = this.dataGridIntegrator.data().rows;\n            const matchingExistingRowIndex = allExistingRows.findIndex(r => existingRow === r);\n            const newRowWithUpdate = {\n                ...existingRow,\n                cells: existingRow.cells.map(cell => {\n                    if (cell.columnId === 'response') {\n                        return {\n                            ...cell,\n                            value: JSON.stringify(message.result || message.error),\n                        };\n                    }\n                    if (cell.columnId === 'elapsed-time') {\n                        const requestTime = this.requestTimeForId.get(message.id);\n                        if (requestTime) {\n                            return {\n                                ...cell,\n                                value: Date.now() - requestTime,\n                                renderer: timeRenderer,\n                            };\n                        }\n                    }\n                    return cell;\n                }),\n            };\n            const newRowsArray = [...this.dataGridIntegrator.data().rows];\n            newRowsArray[matchingExistingRowIndex] = newRowWithUpdate;\n            // Now we've updated the message, it won't be updated again, so we can delete it from the tracking map.\n            this.dataGridRowForId.delete(message.id);\n            this.dataGridIntegrator.update({\n                ...this.dataGridIntegrator.data(),\n                rows: newRowsArray,\n            });\n            return;\n        }\n        const sdkTarget = target;\n        const responseIcon = new IconButton.Icon.Icon();\n        responseIcon.data = { iconName: 'arrow-down', color: 'var(--icon-request)', width: '16px', height: '16px' };\n        const newRow = {\n            cells: [\n                { columnId: 'method', value: message.method, title: message.method },\n                { columnId: 'request', value: '', renderer: DataGrid.DataGridRenderers.codeBlockRenderer },\n                {\n                    columnId: 'response',\n                    value: JSON.stringify(message.params),\n                    renderer: DataGrid.DataGridRenderers.codeBlockRenderer,\n                },\n                {\n                    columnId: 'timestamp',\n                    value: Date.now() - this.startTime,\n                    renderer: timeRenderer,\n                },\n                { columnId: 'elapsed-time', value: '' },\n                { columnId: 'type', value: responseIcon, title: 'received', renderer: DataGrid.DataGridRenderers.iconRenderer },\n                { columnId: 'target', value: this.targetToString(sdkTarget) },\n                { columnId: 'session', value: message.sessionId || '' },\n            ],\n            hidden: false,\n        };\n        this.dataGridIntegrator.update({\n            ...this.dataGridIntegrator.data(),\n            rows: this.dataGridIntegrator.data().rows.concat([newRow]),\n        });\n    }\n    messageSent(message, target) {\n        const sdkTarget = target;\n        const requestResponseIcon = new IconButton.Icon.Icon();\n        requestResponseIcon\n            .data = { iconName: 'arrow-up-down', color: 'var(--icon-request-response)', width: '16px', height: '16px' };\n        const newRow = {\n            styles: {\n                '--override-data-grid-row-background-color': 'var(--sys-color-surface3)',\n            },\n            cells: [\n                { columnId: 'method', value: message.method, title: message.method },\n                {\n                    columnId: 'request',\n                    value: JSON.stringify(message.params),\n                    renderer: DataGrid.DataGridRenderers.codeBlockRenderer,\n                },\n                { columnId: 'response', value: '(pending)', renderer: DataGrid.DataGridRenderers.codeBlockRenderer },\n                {\n                    columnId: 'timestamp',\n                    value: Date.now() - this.startTime,\n                    renderer: timeRenderer,\n                },\n                { columnId: 'elapsed-time', value: '(pending)' },\n                {\n                    columnId: 'type',\n                    value: requestResponseIcon,\n                    title: 'sent',\n                    renderer: DataGrid.DataGridRenderers.iconRenderer,\n                },\n                { columnId: 'target', value: String(sdkTarget?.id()) },\n                { columnId: 'session', value: message.sessionId || '' },\n            ],\n            hidden: false,\n        };\n        this.requestTimeForId.set(message.id, Date.now());\n        this.dataGridRowForId.set(message.id, newRow);\n        this.dataGridIntegrator.update({\n            ...this.dataGridIntegrator.data(),\n            rows: this.dataGridIntegrator.data().rows.concat([newRow]),\n        });\n    }\n    async saveAsFile() {\n        const now = new Date();\n        const fileName = 'ProtocolMonitor-' + Platform.DateUtilities.toISO8601Compact(now) + '.json';\n        const stream = new Bindings.FileUtils.FileOutputStream();\n        const accepted = await stream.open(fileName);\n        if (!accepted) {\n            return;\n        }\n        const rowEntries = [];\n        for (const row of this.dataGridIntegrator.data().rows) {\n            const rowEntry = Object.fromEntries(row.cells.map(cell => ([cell.columnId, cell.value])));\n            rowEntries.push(rowEntry);\n        }\n        void stream.write(JSON.stringify(rowEntries, null, '  '));\n        void stream.close();\n    }\n}\nexport class ProtocolMonitorImpl extends UI.Widget.VBox {\n    #split;\n    #editorWidget = new EditorWidget();\n    #protocolMonitorDataGrid;\n    // This width corresponds to the optimal width to use the editor properly\n    // It is randomly chosen\n    #sideBarMinWidth = 400;\n    constructor() {\n        super(true);\n        this.element.setAttribute('jslog', `${VisualLogging.panel('protocol-monitor').track({ resize: true })}`);\n        this.#split =\n            new UI.SplitWidget.SplitWidget(true, false, 'protocol-monitor-split-container', this.#sideBarMinWidth);\n        this.#split.show(this.contentElement);\n        this.#protocolMonitorDataGrid = new ProtocolMonitorDataGrid(this.#split);\n        this.#protocolMonitorDataGrid.addEventListener(\"CommandChange\" /* Events.COMMAND_CHANGE */, event => {\n            this.#editorWidget.jsonEditor.displayCommand(event.data.command, event.data.parameters, event.data.targetId);\n        });\n        this.#editorWidget.element.style.overflow = 'hidden';\n        this.#split.setMainWidget(this.#protocolMonitorDataGrid);\n        this.#split.setSidebarWidget(this.#editorWidget);\n        this.#split.hideSidebar(true);\n        this.#editorWidget.addEventListener(\"CommandSent\" /* Events.COMMAND_SENT */, event => {\n            this.#protocolMonitorDataGrid.onCommandSend(event.data.command, event.data.parameters, event.data.targetId);\n        });\n    }\n}\nexport class CommandAutocompleteSuggestionProvider {\n    #maxHistorySize = 200;\n    #commandHistory = new Set();\n    constructor(maxHistorySize) {\n        if (maxHistorySize !== undefined) {\n            this.#maxHistorySize = maxHistorySize;\n        }\n    }\n    buildTextPromptCompletions = async (expression, prefix, force) => {\n        if (!prefix && !force && expression) {\n            return [];\n        }\n        const newestToOldest = [...this.#commandHistory].reverse();\n        newestToOldest.push(...metadataByCommand.keys());\n        return newestToOldest.filter(cmd => cmd.startsWith(prefix)).map(text => ({\n            text,\n        }));\n    };\n    addEntry(value) {\n        if (this.#commandHistory.has(value)) {\n            this.#commandHistory.delete(value);\n        }\n        this.#commandHistory.add(value);\n        if (this.#commandHistory.size > this.#maxHistorySize) {\n            const earliestEntry = this.#commandHistory.values().next().value;\n            this.#commandHistory.delete(earliestEntry);\n        }\n    }\n}\nexport class InfoWidget extends UI.Widget.VBox {\n    tabbedPane;\n    request;\n    targetId = '';\n    constructor() {\n        super();\n        this.tabbedPane = new UI.TabbedPane.TabbedPane();\n        this.tabbedPane.appendTab('request', i18nString(UIStrings.request), new UI.Widget.Widget());\n        this.tabbedPane.appendTab('response', i18nString(UIStrings.response), new UI.Widget.Widget());\n        this.tabbedPane.show(this.contentElement);\n        this.tabbedPane.selectTab('response');\n        this.request = {};\n        this.render(null);\n    }\n    render(data) {\n        if (!data || !data.request || !data.response || !data.target) {\n            this.tabbedPane.changeTabView('request', new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.noMessageSelected)));\n            this.tabbedPane.changeTabView('response', new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.noMessageSelected)));\n            return;\n        }\n        const requestEnabled = data && data.type && data.type === 'sent';\n        this.tabbedPane.setTabEnabled('request', Boolean(requestEnabled));\n        if (!requestEnabled) {\n            this.tabbedPane.selectTab('response');\n        }\n        const requestParsed = JSON.parse(String(data.request.value) || 'null');\n        this.request = requestParsed;\n        this.targetId = String(data.target.value);\n        this.tabbedPane.changeTabView('request', SourceFrame.JSONView.JSONView.createViewSync(requestParsed));\n        const responseParsed = data.response.value === '(pending)' ? null : JSON.parse(String(data.response.value) || 'null');\n        this.tabbedPane.changeTabView('response', SourceFrame.JSONView.JSONView.createViewSync(responseParsed));\n        if (data.selectedTab) {\n            this.tabbedPane.selectTab(data.selectedTab);\n        }\n    }\n}\nexport class EditorWidget extends Common.ObjectWrapper.eventMixin(UI.Widget.VBox) {\n    jsonEditor;\n    constructor() {\n        super();\n        this.element.setAttribute('jslog', `${VisualLogging.pane('command-editor').track({ resize: true })}`);\n        this.jsonEditor = new Components.JSONEditor.JSONEditor();\n        this.jsonEditor.metadataByCommand = metadataByCommand;\n        this.jsonEditor.typesByName = typesByName;\n        this.jsonEditor.enumsByName = enumsByName;\n        this.element.append(this.jsonEditor);\n        this.jsonEditor.addEventListener(Components.JSONEditor.SubmitEditorEvent.eventName, (event) => {\n            this.dispatchEventToListeners(\"CommandSent\" /* Events.COMMAND_SENT */, event.data);\n        });\n    }\n}\nexport function parseCommandInput(input) {\n    // If input cannot be parsed as json, we assume it's the command name\n    // for a command without parameters. Otherwise, we expect an object\n    // with \"command\"/\"method\"/\"cmd\" and \"parameters\"/\"params\"/\"args\"/\"arguments\" attributes.\n    let json = null;\n    try {\n        json = JSON.parse(input);\n    }\n    catch (err) {\n    }\n    const command = json ? json.command || json.method || json.cmd || '' : input;\n    const parameters = json?.parameters || json?.params || json?.args || json?.arguments || {};\n    return { command, parameters };\n}\n//# sourceMappingURL=ProtocolMonitor.js.map"],"names":["DataGridControllerIntegrator","UI.Widget.VBox","#updateThrottler","#data","data","DataGridController","Common.Throttler.Throttler","styles","__decorate","decorators","target","key","desc","c","r","d","i","html","Decorators","LitElement","LitHtml","customElement","UIStrings","str_","i18n.i18n.registerUIStrings","i18nString","i18n.i18n.getLocalizedString","copyIconUrl","sendIconUrl","CopyCommandEvent","SendCommandEvent","Toolbar","toolbarStyles","#handleCopy","#handleSend","VisualLogging.action","Host.Platform.isMac","Directives","nothing","property","state","live","classMap","repeat","SubmitEditorEvent","splitDescription","description","firstSentence","restOfDescription","defaultValueByType","DUMMY_DATA","EMPTY_STRING","suggestionFilter","option","query","JSONEditor","editorWidgetStyles","#hintPopoverHelper","event","#handleParameterInputKeydown","UI.PopoverHelper.PopoverHelper","#handlePopoverDescriptions","SDK.TargetManager.TargetManager","#handleAvailableTargetsChanged","formatParameterValue","parameter","nestedParameters","subParameter","nestedArrayParameters","formattedParameters","command","parameters","targetId","schema","displayedParameters","#convertObjectToParameterSchema","valueByName","param","existingParam","value","initialSchema","type","optional","#convertPrimitiveParameter","#convertObjectParameter","#convertArrayParameter","#isValueOfCorrectType","typeRef","nestedType","objectValues","objectKey","objectType","#isTypePrimitive","temp","hintElement","elementData","#getDescriptionAndTypeForElement","head","tail","replyArgs","popupContent","popover","popupElement","ElementsComponents.CSSHintDetailsView.CSSHintDetailsView","metadata","id","pathArray","#getChildByPath","#copyToClipboard","commandJson","Host.InspectorFrontendHost.InspectorFrontendHostInstance","#handleCommandSend","commandParameters","#populateParameterDefaults","parentParameter","name","acceptedValues","#computeDropdownValues","#saveParameterValue","SuggestionInput.SuggestionInput.SuggestionInput","editableContent","paramId","object","#saveNestedObjectParameterKey","#handleFocusParameter","#handleCommandInputBlur","#computeTargetLabel","#createNestedParameter","nestedValue","#handleAddParameter","parameterId","nestedTypes","#handleClearParameter","isParentArray","#handleDeleteParameter","p","#renderTargetSelectorRow","el","targetLabel","#onTargetSelected","VisualLogging.dropDown","enums","#renderInlineButton","opts","#renderWarningIcon","#renderParameters","parentParameterId","a","b","subparameters","handleInputOnBlur","handleKeydown","handleFocus","handleParamKeyOnBlur","isPrimitive","isArray","isParentObject","isObject","isParamValueUndefined","isParamOptional","hasTypeRef","hasNoKeys","isCustomEditorDisplayed","hasOptions","canClearParameter","parametersClasses","inputClasses","timeRenderer","buildProtocolMetadata","domains","metadataByCommand","domain","ProtocolClient.InspectorBackend.inspectorBackend","typesByName","enumsByName","ProtocolMonitorDataGrid","Common.ObjectWrapper.eventMixin","#commandAutocompleteSuggestionProvider","CommandAutocompleteSuggestionProvider","#selectedTargetId","#commandInput","splitWidget","topToolbar","UI.Toolbar.Toolbar","VisualLogging.toolbar","recordButton","UI.Toolbar.ToolbarToggle","clearButton","UI.Toolbar.ToolbarButton","saveButton","#createTargetSelector","InfoWidget","dataGridInitialData","menu","columns","row","methodColumn","DataGrid.DataGridUtils.getRowEntryForColumnId","typeColumn","method","DataGrid.DataGridControllerIntegrator.DataGridControllerIntegrator","focusedRow","infoWidgetData","split","UI.SplitWidget.SplitWidget","keys","TextUtils.TextUtils.FilterParser","UI.FilterSuggestionBuilder.FilterSuggestionBuilder","UI.Toolbar.ToolbarFilter","filters","bottomToolbar","#createCommandInput","shadowRoot","inputBar","tabSelector","populateToolbarInput","editorWidget","EditorWidget","selectedIndex","parseCommandInput","placeholder","accessiblePlaceholder","growFactor","shrinkFactor","tooltip","input","UI.Toolbar.ToolbarInput","selector","UI.Toolbar.ToolbarComboBox","targetManager","syncTargets","test","ProtocolClient.InspectorBackend.test","selectedTarget","sessionId","protocolMonitorStyles","recording","message","existingRow","matchingExistingRowIndex","newRowWithUpdate","cell","requestTime","newRowsArray","sdkTarget","responseIcon","IconButton.Icon.Icon","newRow","DataGrid.DataGridRenderers.codeBlockRenderer","DataGrid.DataGridRenderers.iconRenderer","requestResponseIcon","fileName","Platform.DateUtilities.toISO8601Compact","stream","Bindings.FileUtils.FileOutputStream","rowEntries","rowEntry","ProtocolMonitorImpl","#split","#editorWidget","#protocolMonitorDataGrid","#sideBarMinWidth","VisualLogging.panel","#maxHistorySize","#commandHistory","maxHistorySize","expression","prefix","force","newestToOldest","cmd","text","earliestEntry","UI.TabbedPane.TabbedPane","UI.Widget.Widget","UI.EmptyWidget.EmptyWidget","requestEnabled","requestParsed","SourceFrame.JSONView.JSONView","responseParsed","VisualLogging.pane","Components.JSONEditor.JSONEditor","Components.JSONEditor.SubmitEditorEvent","json"],"mappings":"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"}