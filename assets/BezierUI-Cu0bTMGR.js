import{an as u,ao as g,ap as d}from"./inspector-CyOA7R9n.js";class A{width;height;marginTop;radius;shouldDrawLine;constructor({width:t,height:o,marginTop:r,controlPointRadius:i,shouldDrawLine:s}){this.width=t,this.height=o,this.marginTop=r,this.radius=i,this.shouldDrawLine=s}static drawVelocityChart(t,o,r){const i=w;let s=["M",0,i];const n=1/40;let e=t.evaluateAt(0);for(let h=n;h<1+n;h+=n){const a=t.evaluateAt(h);let c=(a.y-e.y)/(a.x-e.x);const l=e.x*(1-h)+a.x*h;c=Math.tanh(c/1.5),s=s.concat(["L",(l*r).toFixed(2),(i-c*i).toFixed(2)]),e=a}s=s.concat(["L",r.toFixed(2),i,"Z"]),o.setAttribute("d",s.join(" "))}curveWidth(){return this.width-this.radius*2}curveHeight(){return this.height-this.radius*2-this.marginTop*2}drawLine(t,o,r,i,s,n){const e=u(t,"line",o);e.setAttribute("x1",String(r+this.radius)),e.setAttribute("y1",String(i+this.radius+this.marginTop)),e.setAttribute("x2",String(s+this.radius)),e.setAttribute("y2",String(n+this.radius+this.marginTop))}drawControlPoints(t,o,r,i,s){this.drawLine(t,"bezier-control-line",o,r,i,s);const n=u(t,"circle","bezier-control-circle");n.setAttribute("jslog",`${g("bezier.control-circle").track({drag:!0})}`),n.setAttribute("cx",String(i+this.radius)),n.setAttribute("cy",String(s+this.radius+this.marginTop)),n.setAttribute("r",String(this.radius))}drawCurve(t,o){if(!t)return;const r=this.curveWidth(),i=this.curveHeight();o.setAttribute("width",String(this.width)),o.setAttribute("height",String(this.height)),o.removeChildren();const s=u(o,"g");this.shouldDrawLine&&this.drawLine(s,"linear-line",0,i,r,0);const n=u(s,"path","bezier-path"),e=[new d(t.controlPoints[0].x*r+this.radius,(1-t.controlPoints[0].y)*i+this.radius+this.marginTop),new d(t.controlPoints[1].x*r+this.radius,(1-t.controlPoints[1].y)*i+this.radius+this.marginTop),new d(r+this.radius,this.marginTop+this.radius)];n.setAttribute("d","M"+this.radius+","+(i+this.radius+this.marginTop)+" C"+e.join(" ")),this.drawControlPoints(s,0,i,t.controlPoints[0].x*r,(1-t.controlPoints[0].y)*i),this.drawControlPoints(s,r,0,t.controlPoints[1].x*r,(1-t.controlPoints[1].y)*i)}}const w=26;export{A as B,w as H};
//# sourceMappingURL=BezierUI-Cu0bTMGR.js.map
