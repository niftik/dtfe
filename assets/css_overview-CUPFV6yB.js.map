{"version":3,"file":"css_overview-CUPFV6yB.js","sources":["../../panels/css_overview/CSSOverviewController.js","../../panels/css_overview/CSSOverviewPanel.js"],"sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nexport class OverviewController extends Common.ObjectWrapper.ObjectWrapper {\n    currentUrl;\n    constructor() {\n        super();\n        this.currentUrl = SDK.TargetManager.TargetManager.instance().inspectedURL();\n        SDK.TargetManager.TargetManager.instance().addEventListener(\"InspectedURLChanged\" /* SDK.TargetManager.Events.INSPECTED_URL_CHANGED */, this.#checkUrlAndResetIfChanged, this);\n    }\n    #checkUrlAndResetIfChanged() {\n        if (this.currentUrl === SDK.TargetManager.TargetManager.instance().inspectedURL()) {\n            return;\n        }\n        this.currentUrl = SDK.TargetManager.TargetManager.instance().inspectedURL();\n        this.dispatchEventToListeners(\"Reset\" /* Events.RESET */);\n    }\n}\n//# sourceMappingURL=CSSOverviewController.js.map","// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Host from '../../core/host/host.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as CSSOverviewComponents from './components/components.js';\nimport cssOverviewStyles from './cssOverview.css.js';\nimport { CSSOverviewCompletedView } from './CSSOverviewCompletedView.js';\nimport { CSSOverviewModel } from './CSSOverviewModel.js';\nimport { CSSOverviewProcessingView } from './CSSOverviewProcessingView.js';\nexport class CSSOverviewPanel extends UI.Panel.Panel {\n    #controller;\n    #startView;\n    #processingView;\n    #completedView;\n    #model;\n    #backgroundColors;\n    #textColors;\n    #fillColors;\n    #borderColors;\n    #fontInfo;\n    #mediaQueries;\n    #unusedDeclarations;\n    #elementCount;\n    #globalStyleStats;\n    #textColorContrastIssues;\n    constructor(controller) {\n        super('css-overview');\n        this.element.classList.add('css-overview-panel');\n        this.#controller = controller;\n        this.#startView = new CSSOverviewComponents.CSSOverviewStartView.CSSOverviewStartView();\n        this.#startView.addEventListener('overviewstartrequested', () => this.#controller.dispatchEventToListeners(\"RequestOverviewStart\" /* Events.REQUEST_OVERVIEW_START */));\n        this.#processingView = new CSSOverviewProcessingView(this.#controller);\n        this.#completedView = new CSSOverviewCompletedView(this.#controller);\n        SDK.TargetManager.TargetManager.instance().observeTargets(this);\n        this.#controller.addEventListener(\"RequestOverviewStart\" /* Events.REQUEST_OVERVIEW_START */, _event => {\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.CaptureCssOverviewClicked);\n            void this.#startOverview();\n        }, this);\n        this.#controller.addEventListener(\"OverviewCompleted\" /* Events.OVERVIEW_COMPLETED */, this.#overviewCompleted, this);\n        this.#controller.addEventListener(\"Reset\" /* Events.RESET */, this.#reset, this);\n        this.#controller.addEventListener(\"RequestNodeHighlight\" /* Events.REQUEST_NODE_HIGHLIGHT */, this.#requestNodeHighlight, this);\n        this.#reset();\n    }\n    targetAdded(target) {\n        if (target !== SDK.TargetManager.TargetManager.instance().primaryPageTarget()) {\n            return;\n        }\n        this.#completedView.initializeModels(target);\n        const model = target.model(CSSOverviewModel);\n        this.#model = model;\n    }\n    targetRemoved() {\n    }\n    #getModel() {\n        if (!this.#model) {\n            throw new Error('Did not retrieve model information yet.');\n        }\n        return this.#model;\n    }\n    #reset() {\n        this.#backgroundColors = new Map();\n        this.#textColors = new Map();\n        this.#fillColors = new Map();\n        this.#borderColors = new Map();\n        this.#fontInfo = new Map();\n        this.#mediaQueries = new Map();\n        this.#unusedDeclarations = new Map();\n        this.#elementCount = 0;\n        this.#globalStyleStats = {\n            styleRules: 0,\n            inlineStyles: 0,\n            externalSheets: 0,\n            stats: {\n                // Simple.\n                type: 0,\n                class: 0,\n                id: 0,\n                universal: 0,\n                attribute: 0,\n                // Non-simple.\n                nonSimple: 0,\n            },\n        };\n        this.#textColorContrastIssues = new Map();\n        this.#renderInitialView();\n    }\n    #requestNodeHighlight(evt) {\n        this.#getModel().highlightNode(evt.data);\n    }\n    #renderInitialView() {\n        this.#processingView.hideWidget();\n        this.#completedView.hideWidget();\n        this.contentElement.append(this.#startView);\n        this.#startView.show();\n    }\n    #renderOverviewStartedView() {\n        this.#startView.hide();\n        this.#completedView.hideWidget();\n        this.#processingView.show(this.contentElement);\n    }\n    #renderOverviewCompletedView() {\n        this.#startView.hide();\n        this.#processingView.hideWidget();\n        this.#completedView.show(this.contentElement);\n        this.#completedView.setOverviewData({\n            backgroundColors: this.#backgroundColors,\n            textColors: this.#textColors,\n            textColorContrastIssues: this.#textColorContrastIssues,\n            fillColors: this.#fillColors,\n            borderColors: this.#borderColors,\n            globalStyleStats: this.#globalStyleStats,\n            fontInfo: this.#fontInfo,\n            elementCount: this.#elementCount,\n            mediaQueries: this.#mediaQueries,\n            unusedDeclarations: this.#unusedDeclarations,\n        });\n    }\n    async #startOverview() {\n        this.#renderOverviewStartedView();\n        const model = this.#getModel();\n        const [globalStyleStats, { elementCount, backgroundColors, textColors, textColorContrastIssues, fillColors, borderColors, fontInfo, unusedDeclarations }, mediaQueries] = await Promise.all([\n            model.getGlobalStylesheetStats(),\n            model.getNodeStyleStats(),\n            model.getMediaQueries(),\n        ]);\n        if (elementCount) {\n            this.#elementCount = elementCount;\n        }\n        if (globalStyleStats) {\n            this.#globalStyleStats = globalStyleStats;\n        }\n        if (mediaQueries) {\n            this.#mediaQueries = mediaQueries;\n        }\n        if (backgroundColors) {\n            this.#backgroundColors = backgroundColors;\n        }\n        if (textColors) {\n            this.#textColors = textColors;\n        }\n        if (textColorContrastIssues) {\n            this.#textColorContrastIssues = textColorContrastIssues;\n        }\n        if (fillColors) {\n            this.#fillColors = fillColors;\n        }\n        if (borderColors) {\n            this.#borderColors = borderColors;\n        }\n        if (fontInfo) {\n            this.#fontInfo = fontInfo;\n        }\n        if (unusedDeclarations) {\n            this.#unusedDeclarations = unusedDeclarations;\n        }\n        this.#controller.dispatchEventToListeners(\"OverviewCompleted\" /* Events.OVERVIEW_COMPLETED */);\n    }\n    #overviewCompleted() {\n        this.#renderOverviewCompletedView();\n    }\n    wasShown() {\n        super.wasShown();\n        this.registerCSSFiles([cssOverviewStyles]);\n    }\n}\n//# sourceMappingURL=CSSOverviewPanel.js.map"],"names":["OverviewController","Common.ObjectWrapper.ObjectWrapper","SDK.TargetManager.TargetManager","#checkUrlAndResetIfChanged","CSSOverviewPanel","UI.Panel.Panel","#controller","#startView","#processingView","#completedView","#model","#backgroundColors","#textColors","#fillColors","#borderColors","#fontInfo","#mediaQueries","#unusedDeclarations","#elementCount","#globalStyleStats","#textColorContrastIssues","controller","CSSOverviewComponents.CSSOverviewStartView.CSSOverviewStartView","CSSOverviewProcessingView","CSSOverviewCompletedView","_event","Host.userMetrics","Host.UserMetrics.Action","#startOverview","#overviewCompleted","#reset","#requestNodeHighlight","target","model","CSSOverviewModel","#getModel","#renderInitialView","evt","#renderOverviewStartedView","#renderOverviewCompletedView","globalStyleStats","elementCount","backgroundColors","textColors","textColorContrastIssues","fillColors","borderColors","fontInfo","unusedDeclarations","mediaQueries","cssOverviewStyles"],"mappings":"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"}